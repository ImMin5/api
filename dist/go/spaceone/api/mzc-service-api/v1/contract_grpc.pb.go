// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/mzc_service_api/v1/contract.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Contract_Create_FullMethodName    = "/spaceone.api.mzc_service_api.v1.Contract/create"
	Contract_Update_FullMethodName    = "/spaceone.api.mzc_service_api.v1.Contract/update"
	Contract_Terminate_FullMethodName = "/spaceone.api.mzc_service_api.v1.Contract/terminate"
	Contract_Get_FullMethodName       = "/spaceone.api.mzc_service_api.v1.Contract/get"
	Contract_List_FullMethodName      = "/spaceone.api.mzc_service_api.v1.Contract/list"
	Contract_Stat_FullMethodName      = "/spaceone.api.mzc_service_api.v1.Contract/stat"
)

// ContractClient is the client API for Contract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContractClient interface {
	Create(ctx context.Context, in *ContractCreateRequest, opts ...grpc.CallOption) (*ContractInfo, error)
	Update(ctx context.Context, in *ContractUpdateRequest, opts ...grpc.CallOption) (*ContractInfo, error)
	Terminate(ctx context.Context, in *ContractRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *ContractRequest, opts ...grpc.CallOption) (*ContractInfo, error)
	List(ctx context.Context, in *ContractSearchQuery, opts ...grpc.CallOption) (*ContractsInfo, error)
	Stat(ctx context.Context, in *ContractStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type contractClient struct {
	cc grpc.ClientConnInterface
}

func NewContractClient(cc grpc.ClientConnInterface) ContractClient {
	return &contractClient{cc}
}

func (c *contractClient) Create(ctx context.Context, in *ContractCreateRequest, opts ...grpc.CallOption) (*ContractInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContractInfo)
	err := c.cc.Invoke(ctx, Contract_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractClient) Update(ctx context.Context, in *ContractUpdateRequest, opts ...grpc.CallOption) (*ContractInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContractInfo)
	err := c.cc.Invoke(ctx, Contract_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractClient) Terminate(ctx context.Context, in *ContractRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Contract_Terminate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractClient) Get(ctx context.Context, in *ContractRequest, opts ...grpc.CallOption) (*ContractInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContractInfo)
	err := c.cc.Invoke(ctx, Contract_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractClient) List(ctx context.Context, in *ContractSearchQuery, opts ...grpc.CallOption) (*ContractsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContractsInfo)
	err := c.cc.Invoke(ctx, Contract_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractClient) Stat(ctx context.Context, in *ContractStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Contract_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContractServer is the server API for Contract service.
// All implementations must embed UnimplementedContractServer
// for forward compatibility.
type ContractServer interface {
	Create(context.Context, *ContractCreateRequest) (*ContractInfo, error)
	Update(context.Context, *ContractUpdateRequest) (*ContractInfo, error)
	Terminate(context.Context, *ContractRequest) (*empty.Empty, error)
	Get(context.Context, *ContractRequest) (*ContractInfo, error)
	List(context.Context, *ContractSearchQuery) (*ContractsInfo, error)
	Stat(context.Context, *ContractStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedContractServer()
}

// UnimplementedContractServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContractServer struct{}

func (UnimplementedContractServer) Create(context.Context, *ContractCreateRequest) (*ContractInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedContractServer) Update(context.Context, *ContractUpdateRequest) (*ContractInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedContractServer) Terminate(context.Context, *ContractRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Terminate not implemented")
}
func (UnimplementedContractServer) Get(context.Context, *ContractRequest) (*ContractInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedContractServer) List(context.Context, *ContractSearchQuery) (*ContractsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedContractServer) Stat(context.Context, *ContractStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedContractServer) mustEmbedUnimplementedContractServer() {}
func (UnimplementedContractServer) testEmbeddedByValue()                  {}

// UnsafeContractServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContractServer will
// result in compilation errors.
type UnsafeContractServer interface {
	mustEmbedUnimplementedContractServer()
}

func RegisterContractServer(s grpc.ServiceRegistrar, srv ContractServer) {
	// If the following call pancis, it indicates UnimplementedContractServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Contract_ServiceDesc, srv)
}

func _Contract_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contract_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).Create(ctx, req.(*ContractCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contract_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contract_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).Update(ctx, req.(*ContractUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contract_Terminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).Terminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contract_Terminate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).Terminate(ctx, req.(*ContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contract_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contract_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).Get(ctx, req.(*ContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contract_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractSearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contract_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).List(ctx, req.(*ContractSearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contract_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contract_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).Stat(ctx, req.(*ContractStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Contract_ServiceDesc is the grpc.ServiceDesc for Contract service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Contract_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.mzc_service_api.v1.Contract",
	HandlerType: (*ContractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Contract_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _Contract_Update_Handler,
		},
		{
			MethodName: "terminate",
			Handler:    _Contract_Terminate_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Contract_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Contract_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _Contract_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/mzc_service_api/v1/contract.proto",
}
