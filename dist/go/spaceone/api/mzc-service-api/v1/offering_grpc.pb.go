// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/mzc_service_api/v1/offering.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Offering_Create_FullMethodName = "/spaceone.api.mzc_service_api.v1.Offering/create"
	Offering_Update_FullMethodName = "/spaceone.api.mzc_service_api.v1.Offering/update"
	Offering_Delete_FullMethodName = "/spaceone.api.mzc_service_api.v1.Offering/delete"
	Offering_Get_FullMethodName    = "/spaceone.api.mzc_service_api.v1.Offering/get"
	Offering_List_FullMethodName   = "/spaceone.api.mzc_service_api.v1.Offering/list"
	Offering_Stat_FullMethodName   = "/spaceone.api.mzc_service_api.v1.Offering/stat"
)

// OfferingClient is the client API for Offering service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfferingClient interface {
	Create(ctx context.Context, in *OfferingCreateRequest, opts ...grpc.CallOption) (*OfferingInfo, error)
	Update(ctx context.Context, in *OfferingUpdateRequest, opts ...grpc.CallOption) (*OfferingInfo, error)
	Delete(ctx context.Context, in *OfferingRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *OfferingRequest, opts ...grpc.CallOption) (*OfferingInfo, error)
	List(ctx context.Context, in *OfferingSearchQuery, opts ...grpc.CallOption) (*OfferingsInfo, error)
	Stat(ctx context.Context, in *OfferingStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type offeringClient struct {
	cc grpc.ClientConnInterface
}

func NewOfferingClient(cc grpc.ClientConnInterface) OfferingClient {
	return &offeringClient{cc}
}

func (c *offeringClient) Create(ctx context.Context, in *OfferingCreateRequest, opts ...grpc.CallOption) (*OfferingInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfferingInfo)
	err := c.cc.Invoke(ctx, Offering_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offeringClient) Update(ctx context.Context, in *OfferingUpdateRequest, opts ...grpc.CallOption) (*OfferingInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfferingInfo)
	err := c.cc.Invoke(ctx, Offering_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offeringClient) Delete(ctx context.Context, in *OfferingRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Offering_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offeringClient) Get(ctx context.Context, in *OfferingRequest, opts ...grpc.CallOption) (*OfferingInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfferingInfo)
	err := c.cc.Invoke(ctx, Offering_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offeringClient) List(ctx context.Context, in *OfferingSearchQuery, opts ...grpc.CallOption) (*OfferingsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfferingsInfo)
	err := c.cc.Invoke(ctx, Offering_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offeringClient) Stat(ctx context.Context, in *OfferingStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Offering_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfferingServer is the server API for Offering service.
// All implementations must embed UnimplementedOfferingServer
// for forward compatibility.
type OfferingServer interface {
	Create(context.Context, *OfferingCreateRequest) (*OfferingInfo, error)
	Update(context.Context, *OfferingUpdateRequest) (*OfferingInfo, error)
	Delete(context.Context, *OfferingRequest) (*empty.Empty, error)
	Get(context.Context, *OfferingRequest) (*OfferingInfo, error)
	List(context.Context, *OfferingSearchQuery) (*OfferingsInfo, error)
	Stat(context.Context, *OfferingStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedOfferingServer()
}

// UnimplementedOfferingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOfferingServer struct{}

func (UnimplementedOfferingServer) Create(context.Context, *OfferingCreateRequest) (*OfferingInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOfferingServer) Update(context.Context, *OfferingUpdateRequest) (*OfferingInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOfferingServer) Delete(context.Context, *OfferingRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOfferingServer) Get(context.Context, *OfferingRequest) (*OfferingInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedOfferingServer) List(context.Context, *OfferingSearchQuery) (*OfferingsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOfferingServer) Stat(context.Context, *OfferingStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedOfferingServer) mustEmbedUnimplementedOfferingServer() {}
func (UnimplementedOfferingServer) testEmbeddedByValue()                  {}

// UnsafeOfferingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfferingServer will
// result in compilation errors.
type UnsafeOfferingServer interface {
	mustEmbedUnimplementedOfferingServer()
}

func RegisterOfferingServer(s grpc.ServiceRegistrar, srv OfferingServer) {
	// If the following call pancis, it indicates UnimplementedOfferingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Offering_ServiceDesc, srv)
}

func _Offering_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferingCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferingServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Offering_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferingServer).Create(ctx, req.(*OfferingCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offering_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferingUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferingServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Offering_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferingServer).Update(ctx, req.(*OfferingUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offering_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferingServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Offering_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferingServer).Delete(ctx, req.(*OfferingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offering_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferingServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Offering_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferingServer).Get(ctx, req.(*OfferingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offering_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferingSearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferingServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Offering_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferingServer).List(ctx, req.(*OfferingSearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Offering_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferingStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferingServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Offering_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferingServer).Stat(ctx, req.(*OfferingStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Offering_ServiceDesc is the grpc.ServiceDesc for Offering service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Offering_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.mzc_service_api.v1.Offering",
	HandlerType: (*OfferingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Offering_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _Offering_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Offering_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Offering_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Offering_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _Offering_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/mzc_service_api/v1/offering.proto",
}
