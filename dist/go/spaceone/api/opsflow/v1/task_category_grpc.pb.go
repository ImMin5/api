// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/opsflow/v1/task_category.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskCategory_Create_FullMethodName       = "/spaceone.api.opsflow.v1.TaskCategory/create"
	TaskCategory_Update_FullMethodName       = "/spaceone.api.opsflow.v1.TaskCategory/update"
	TaskCategory_UpdateFields_FullMethodName = "/spaceone.api.opsflow.v1.TaskCategory/update_fields"
	TaskCategory_Delete_FullMethodName       = "/spaceone.api.opsflow.v1.TaskCategory/delete"
	TaskCategory_Get_FullMethodName          = "/spaceone.api.opsflow.v1.TaskCategory/get"
	TaskCategory_List_FullMethodName         = "/spaceone.api.opsflow.v1.TaskCategory/list"
	TaskCategory_Stat_FullMethodName         = "/spaceone.api.opsflow.v1.TaskCategory/stat"
)

// TaskCategoryClient is the client API for TaskCategory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskCategoryClient interface {
	Create(ctx context.Context, in *TaskCategoryCreateRequest, opts ...grpc.CallOption) (*TaskCategoryInfo, error)
	Update(ctx context.Context, in *TaskCategoryUpdateRequest, opts ...grpc.CallOption) (*TaskCategoryInfo, error)
	UpdateFields(ctx context.Context, in *TaskCategoryUpdateFieldsRequest, opts ...grpc.CallOption) (*TaskCategoryInfo, error)
	Delete(ctx context.Context, in *TaskCategoryRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *TaskCategoryRequest, opts ...grpc.CallOption) (*TaskCategoryInfo, error)
	List(ctx context.Context, in *TaskCategorySearchQuery, opts ...grpc.CallOption) (*TaskCategoriesInfo, error)
	Stat(ctx context.Context, in *TaskCategoryStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type taskCategoryClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskCategoryClient(cc grpc.ClientConnInterface) TaskCategoryClient {
	return &taskCategoryClient{cc}
}

func (c *taskCategoryClient) Create(ctx context.Context, in *TaskCategoryCreateRequest, opts ...grpc.CallOption) (*TaskCategoryInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskCategoryInfo)
	err := c.cc.Invoke(ctx, TaskCategory_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskCategoryClient) Update(ctx context.Context, in *TaskCategoryUpdateRequest, opts ...grpc.CallOption) (*TaskCategoryInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskCategoryInfo)
	err := c.cc.Invoke(ctx, TaskCategory_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskCategoryClient) UpdateFields(ctx context.Context, in *TaskCategoryUpdateFieldsRequest, opts ...grpc.CallOption) (*TaskCategoryInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskCategoryInfo)
	err := c.cc.Invoke(ctx, TaskCategory_UpdateFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskCategoryClient) Delete(ctx context.Context, in *TaskCategoryRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, TaskCategory_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskCategoryClient) Get(ctx context.Context, in *TaskCategoryRequest, opts ...grpc.CallOption) (*TaskCategoryInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskCategoryInfo)
	err := c.cc.Invoke(ctx, TaskCategory_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskCategoryClient) List(ctx context.Context, in *TaskCategorySearchQuery, opts ...grpc.CallOption) (*TaskCategoriesInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskCategoriesInfo)
	err := c.cc.Invoke(ctx, TaskCategory_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskCategoryClient) Stat(ctx context.Context, in *TaskCategoryStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, TaskCategory_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskCategoryServer is the server API for TaskCategory service.
// All implementations must embed UnimplementedTaskCategoryServer
// for forward compatibility.
type TaskCategoryServer interface {
	Create(context.Context, *TaskCategoryCreateRequest) (*TaskCategoryInfo, error)
	Update(context.Context, *TaskCategoryUpdateRequest) (*TaskCategoryInfo, error)
	UpdateFields(context.Context, *TaskCategoryUpdateFieldsRequest) (*TaskCategoryInfo, error)
	Delete(context.Context, *TaskCategoryRequest) (*empty.Empty, error)
	Get(context.Context, *TaskCategoryRequest) (*TaskCategoryInfo, error)
	List(context.Context, *TaskCategorySearchQuery) (*TaskCategoriesInfo, error)
	Stat(context.Context, *TaskCategoryStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedTaskCategoryServer()
}

// UnimplementedTaskCategoryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskCategoryServer struct{}

func (UnimplementedTaskCategoryServer) Create(context.Context, *TaskCategoryCreateRequest) (*TaskCategoryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTaskCategoryServer) Update(context.Context, *TaskCategoryUpdateRequest) (*TaskCategoryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTaskCategoryServer) UpdateFields(context.Context, *TaskCategoryUpdateFieldsRequest) (*TaskCategoryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFields not implemented")
}
func (UnimplementedTaskCategoryServer) Delete(context.Context, *TaskCategoryRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTaskCategoryServer) Get(context.Context, *TaskCategoryRequest) (*TaskCategoryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTaskCategoryServer) List(context.Context, *TaskCategorySearchQuery) (*TaskCategoriesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTaskCategoryServer) Stat(context.Context, *TaskCategoryStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedTaskCategoryServer) mustEmbedUnimplementedTaskCategoryServer() {}
func (UnimplementedTaskCategoryServer) testEmbeddedByValue()                      {}

// UnsafeTaskCategoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskCategoryServer will
// result in compilation errors.
type UnsafeTaskCategoryServer interface {
	mustEmbedUnimplementedTaskCategoryServer()
}

func RegisterTaskCategoryServer(s grpc.ServiceRegistrar, srv TaskCategoryServer) {
	// If the following call pancis, it indicates UnimplementedTaskCategoryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskCategory_ServiceDesc, srv)
}

func _TaskCategory_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCategoryCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskCategoryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskCategory_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskCategoryServer).Create(ctx, req.(*TaskCategoryCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskCategory_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCategoryUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskCategoryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskCategory_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskCategoryServer).Update(ctx, req.(*TaskCategoryUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskCategory_UpdateFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCategoryUpdateFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskCategoryServer).UpdateFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskCategory_UpdateFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskCategoryServer).UpdateFields(ctx, req.(*TaskCategoryUpdateFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskCategory_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskCategoryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskCategory_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskCategoryServer).Delete(ctx, req.(*TaskCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskCategory_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskCategoryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskCategory_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskCategoryServer).Get(ctx, req.(*TaskCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskCategory_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCategorySearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskCategoryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskCategory_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskCategoryServer).List(ctx, req.(*TaskCategorySearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskCategory_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCategoryStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskCategoryServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskCategory_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskCategoryServer).Stat(ctx, req.(*TaskCategoryStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskCategory_ServiceDesc is the grpc.ServiceDesc for TaskCategory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskCategory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.opsflow.v1.TaskCategory",
	HandlerType: (*TaskCategoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _TaskCategory_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _TaskCategory_Update_Handler,
		},
		{
			MethodName: "update_fields",
			Handler:    _TaskCategory_UpdateFields_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _TaskCategory_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _TaskCategory_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _TaskCategory_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _TaskCategory_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/opsflow/v1/task_category.proto",
}
