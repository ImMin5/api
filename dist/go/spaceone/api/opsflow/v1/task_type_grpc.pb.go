// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/opsflow/v1/task_type.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskType_Create_FullMethodName       = "/spaceone.api.opsflow.v1.TaskType/create"
	TaskType_Update_FullMethodName       = "/spaceone.api.opsflow.v1.TaskType/update"
	TaskType_UpdateFields_FullMethodName = "/spaceone.api.opsflow.v1.TaskType/update_fields"
	TaskType_Delete_FullMethodName       = "/spaceone.api.opsflow.v1.TaskType/delete"
	TaskType_Get_FullMethodName          = "/spaceone.api.opsflow.v1.TaskType/get"
	TaskType_List_FullMethodName         = "/spaceone.api.opsflow.v1.TaskType/list"
	TaskType_Stat_FullMethodName         = "/spaceone.api.opsflow.v1.TaskType/stat"
)

// TaskTypeClient is the client API for TaskType service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskTypeClient interface {
	Create(ctx context.Context, in *TaskTypeCreateRequest, opts ...grpc.CallOption) (*TaskTypeInfo, error)
	Update(ctx context.Context, in *TaskTypeUpdateRequest, opts ...grpc.CallOption) (*TaskTypeInfo, error)
	UpdateFields(ctx context.Context, in *TaskTypeUpdateFieldsRequest, opts ...grpc.CallOption) (*TaskTypeInfo, error)
	Delete(ctx context.Context, in *TaskTypeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *TaskTypeRequest, opts ...grpc.CallOption) (*TaskTypeInfo, error)
	List(ctx context.Context, in *TaskTypeSearchQuery, opts ...grpc.CallOption) (*TaskTypesInfo, error)
	Stat(ctx context.Context, in *TaskTypeStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type taskTypeClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskTypeClient(cc grpc.ClientConnInterface) TaskTypeClient {
	return &taskTypeClient{cc}
}

func (c *taskTypeClient) Create(ctx context.Context, in *TaskTypeCreateRequest, opts ...grpc.CallOption) (*TaskTypeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskTypeInfo)
	err := c.cc.Invoke(ctx, TaskType_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTypeClient) Update(ctx context.Context, in *TaskTypeUpdateRequest, opts ...grpc.CallOption) (*TaskTypeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskTypeInfo)
	err := c.cc.Invoke(ctx, TaskType_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTypeClient) UpdateFields(ctx context.Context, in *TaskTypeUpdateFieldsRequest, opts ...grpc.CallOption) (*TaskTypeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskTypeInfo)
	err := c.cc.Invoke(ctx, TaskType_UpdateFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTypeClient) Delete(ctx context.Context, in *TaskTypeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, TaskType_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTypeClient) Get(ctx context.Context, in *TaskTypeRequest, opts ...grpc.CallOption) (*TaskTypeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskTypeInfo)
	err := c.cc.Invoke(ctx, TaskType_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTypeClient) List(ctx context.Context, in *TaskTypeSearchQuery, opts ...grpc.CallOption) (*TaskTypesInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskTypesInfo)
	err := c.cc.Invoke(ctx, TaskType_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTypeClient) Stat(ctx context.Context, in *TaskTypeStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, TaskType_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskTypeServer is the server API for TaskType service.
// All implementations must embed UnimplementedTaskTypeServer
// for forward compatibility.
type TaskTypeServer interface {
	Create(context.Context, *TaskTypeCreateRequest) (*TaskTypeInfo, error)
	Update(context.Context, *TaskTypeUpdateRequest) (*TaskTypeInfo, error)
	UpdateFields(context.Context, *TaskTypeUpdateFieldsRequest) (*TaskTypeInfo, error)
	Delete(context.Context, *TaskTypeRequest) (*empty.Empty, error)
	Get(context.Context, *TaskTypeRequest) (*TaskTypeInfo, error)
	List(context.Context, *TaskTypeSearchQuery) (*TaskTypesInfo, error)
	Stat(context.Context, *TaskTypeStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedTaskTypeServer()
}

// UnimplementedTaskTypeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskTypeServer struct{}

func (UnimplementedTaskTypeServer) Create(context.Context, *TaskTypeCreateRequest) (*TaskTypeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTaskTypeServer) Update(context.Context, *TaskTypeUpdateRequest) (*TaskTypeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTaskTypeServer) UpdateFields(context.Context, *TaskTypeUpdateFieldsRequest) (*TaskTypeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFields not implemented")
}
func (UnimplementedTaskTypeServer) Delete(context.Context, *TaskTypeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTaskTypeServer) Get(context.Context, *TaskTypeRequest) (*TaskTypeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTaskTypeServer) List(context.Context, *TaskTypeSearchQuery) (*TaskTypesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTaskTypeServer) Stat(context.Context, *TaskTypeStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedTaskTypeServer) mustEmbedUnimplementedTaskTypeServer() {}
func (UnimplementedTaskTypeServer) testEmbeddedByValue()                  {}

// UnsafeTaskTypeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskTypeServer will
// result in compilation errors.
type UnsafeTaskTypeServer interface {
	mustEmbedUnimplementedTaskTypeServer()
}

func RegisterTaskTypeServer(s grpc.ServiceRegistrar, srv TaskTypeServer) {
	// If the following call pancis, it indicates UnimplementedTaskTypeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskType_ServiceDesc, srv)
}

func _TaskType_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskTypeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTypeServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskType_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTypeServer).Create(ctx, req.(*TaskTypeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskType_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskTypeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTypeServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskType_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTypeServer).Update(ctx, req.(*TaskTypeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskType_UpdateFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskTypeUpdateFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTypeServer).UpdateFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskType_UpdateFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTypeServer).UpdateFields(ctx, req.(*TaskTypeUpdateFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskType_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTypeServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskType_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTypeServer).Delete(ctx, req.(*TaskTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskType_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTypeServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskType_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTypeServer).Get(ctx, req.(*TaskTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskType_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskTypeSearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTypeServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskType_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTypeServer).List(ctx, req.(*TaskTypeSearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskType_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskTypeStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTypeServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskType_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTypeServer).Stat(ctx, req.(*TaskTypeStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskType_ServiceDesc is the grpc.ServiceDesc for TaskType service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskType_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.opsflow.v1.TaskType",
	HandlerType: (*TaskTypeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _TaskType_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _TaskType_Update_Handler,
		},
		{
			MethodName: "update_fields",
			Handler:    _TaskType_UpdateFields_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _TaskType_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _TaskType_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _TaskType_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _TaskType_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/opsflow/v1/task_type.proto",
}
