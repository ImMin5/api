// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.6.1
// source: spaceone/api/opsflow/v1/task_category.proto

package v1

import (
	v2 "github.com/cloudforet-io/api/dist/go/spaceone/api/core/v2"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskField_SelectionType int32

const (
	TaskField_SELECTION_NONE TaskField_SelectionType = 0
	TaskField_SINGLE         TaskField_SelectionType = 1
	TaskField_MULTI          TaskField_SelectionType = 2
)

// Enum value maps for TaskField_SelectionType.
var (
	TaskField_SelectionType_name = map[int32]string{
		0: "SELECTION_NONE",
		1: "SINGLE",
		2: "MULTI",
	}
	TaskField_SelectionType_value = map[string]int32{
		"SELECTION_NONE": 0,
		"SINGLE":         1,
		"MULTI":          2,
	}
)

func (x TaskField_SelectionType) Enum() *TaskField_SelectionType {
	p := new(TaskField_SelectionType)
	*p = x
	return p
}

func (x TaskField_SelectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskField_SelectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_opsflow_v1_task_category_proto_enumTypes[0].Descriptor()
}

func (TaskField_SelectionType) Type() protoreflect.EnumType {
	return &file_spaceone_api_opsflow_v1_task_category_proto_enumTypes[0]
}

func (x TaskField_SelectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskField_SelectionType.Descriptor instead.
func (TaskField_SelectionType) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_opsflow_v1_task_category_proto_rawDescGZIP(), []int{2, 0}
}

type StatusOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusId  string `protobuf:"bytes,1,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Color     string `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	IsDefault bool   `protobuf:"varint,4,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
}

func (x *StatusOption) Reset() {
	*x = StatusOption{}
	mi := &file_spaceone_api_opsflow_v1_task_category_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusOption) ProtoMessage() {}

func (x *StatusOption) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_opsflow_v1_task_category_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusOption.ProtoReflect.Descriptor instead.
func (*StatusOption) Descriptor() ([]byte, []int) {
	return file_spaceone_api_opsflow_v1_task_category_proto_rawDescGZIP(), []int{0}
}

func (x *StatusOption) GetStatusId() string {
	if x != nil {
		return x.StatusId
	}
	return ""
}

func (x *StatusOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StatusOption) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *StatusOption) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type StatusOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TODO        []*StatusOption `protobuf:"bytes,1,rep,name=TODO,proto3" json:"TODO,omitempty"`
	IN_PROGRESS []*StatusOption `protobuf:"bytes,2,rep,name=IN_PROGRESS,json=INPROGRESS,proto3" json:"IN_PROGRESS,omitempty"`
	COMPLETED   []*StatusOption `protobuf:"bytes,3,rep,name=COMPLETED,proto3" json:"COMPLETED,omitempty"`
}

func (x *StatusOptions) Reset() {
	*x = StatusOptions{}
	mi := &file_spaceone_api_opsflow_v1_task_category_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusOptions) ProtoMessage() {}

func (x *StatusOptions) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_opsflow_v1_task_category_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusOptions.ProtoReflect.Descriptor instead.
func (*StatusOptions) Descriptor() ([]byte, []int) {
	return file_spaceone_api_opsflow_v1_task_category_proto_rawDescGZIP(), []int{1}
}

func (x *StatusOptions) GetTODO() []*StatusOption {
	if x != nil {
		return x.TODO
	}
	return nil
}

func (x *StatusOptions) GetIN_PROGRESS() []*StatusOption {
	if x != nil {
		return x.IN_PROGRESS
	}
	return nil
}

func (x *StatusOptions) GetCOMPLETED() []*StatusOption {
	if x != nil {
		return x.COMPLETED
	}
	return nil
}

type TaskField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldId       string                  `protobuf:"bytes,1,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	Name          string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	FieldType     string                  `protobuf:"bytes,4,opt,name=field_type,json=fieldType,proto3" json:"field_type,omitempty"`
	Options       *_struct.Struct         `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	SelectionType TaskField_SelectionType `protobuf:"varint,6,opt,name=selection_type,json=selectionType,proto3,enum=spaceone.api.opsflow.v1.TaskField_SelectionType" json:"selection_type,omitempty"`
	IsRequired    bool                    `protobuf:"varint,7,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	IsPrimary     bool                    `protobuf:"varint,8,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
}

func (x *TaskField) Reset() {
	*x = TaskField{}
	mi := &file_spaceone_api_opsflow_v1_task_category_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskField) ProtoMessage() {}

func (x *TaskField) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_opsflow_v1_task_category_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskField.ProtoReflect.Descriptor instead.
func (*TaskField) Descriptor() ([]byte, []int) {
	return file_spaceone_api_opsflow_v1_task_category_proto_rawDescGZIP(), []int{2}
}

func (x *TaskField) GetFieldId() string {
	if x != nil {
		return x.FieldId
	}
	return ""
}

func (x *TaskField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskField) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskField) GetFieldType() string {
	if x != nil {
		return x.FieldType
	}
	return ""
}

func (x *TaskField) GetOptions() *_struct.Struct {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *TaskField) GetSelectionType() TaskField_SelectionType {
	if x != nil {
		return x.SelectionType
	}
	return TaskField_SELECTION_NONE
}

func (x *TaskField) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *TaskField) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

type TaskCategoryCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	Description   string         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	StatusOptions *StatusOptions `protobuf:"bytes,3,opt,name=status_options,json=statusOptions,proto3" json:"status_options,omitempty"`
	// +optional
	Fields []*TaskField `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	// +optional
	Tags      *_struct.Struct `protobuf:"bytes,11,opt,name=tags,proto3" json:"tags,omitempty"`
	PackageId string          `protobuf:"bytes,21,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
}

func (x *TaskCategoryCreateRequest) Reset() {
	*x = TaskCategoryCreateRequest{}
	mi := &file_spaceone_api_opsflow_v1_task_category_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskCategoryCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCategoryCreateRequest) ProtoMessage() {}

func (x *TaskCategoryCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_opsflow_v1_task_category_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCategoryCreateRequest.ProtoReflect.Descriptor instead.
func (*TaskCategoryCreateRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_opsflow_v1_task_category_proto_rawDescGZIP(), []int{3}
}

func (x *TaskCategoryCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskCategoryCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskCategoryCreateRequest) GetStatusOptions() *StatusOptions {
	if x != nil {
		return x.StatusOptions
	}
	return nil
}

func (x *TaskCategoryCreateRequest) GetFields() []*TaskField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *TaskCategoryCreateRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TaskCategoryCreateRequest) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

type TaskCategoryUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId string `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// +optional
	StatusOptions *StatusOptions `protobuf:"bytes,4,opt,name=status_options,json=statusOptions,proto3" json:"status_options,omitempty"`
	// +optional
	Fields []*TaskField `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	// +optional
	Force bool `protobuf:"varint,6,opt,name=force,proto3" json:"force,omitempty"`
	// +optional
	Tags *_struct.Struct `protobuf:"bytes,11,opt,name=tags,proto3" json:"tags,omitempty"`
	// +optional
	PackageId string `protobuf:"bytes,21,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
}

func (x *TaskCategoryUpdateRequest) Reset() {
	*x = TaskCategoryUpdateRequest{}
	mi := &file_spaceone_api_opsflow_v1_task_category_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskCategoryUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCategoryUpdateRequest) ProtoMessage() {}

func (x *TaskCategoryUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_opsflow_v1_task_category_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCategoryUpdateRequest.ProtoReflect.Descriptor instead.
func (*TaskCategoryUpdateRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_opsflow_v1_task_category_proto_rawDescGZIP(), []int{4}
}

func (x *TaskCategoryUpdateRequest) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *TaskCategoryUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskCategoryUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskCategoryUpdateRequest) GetStatusOptions() *StatusOptions {
	if x != nil {
		return x.StatusOptions
	}
	return nil
}

func (x *TaskCategoryUpdateRequest) GetFields() []*TaskField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *TaskCategoryUpdateRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *TaskCategoryUpdateRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TaskCategoryUpdateRequest) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

type TaskCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId string `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *TaskCategoryRequest) Reset() {
	*x = TaskCategoryRequest{}
	mi := &file_spaceone_api_opsflow_v1_task_category_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCategoryRequest) ProtoMessage() {}

func (x *TaskCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_opsflow_v1_task_category_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCategoryRequest.ProtoReflect.Descriptor instead.
func (*TaskCategoryRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_opsflow_v1_task_category_proto_rawDescGZIP(), []int{5}
}

func (x *TaskCategoryRequest) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

type TaskCategorySearchQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +optional
	Query *v2.Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// +optional
	CategoryId string `protobuf:"bytes,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TaskCategorySearchQuery) Reset() {
	*x = TaskCategorySearchQuery{}
	mi := &file_spaceone_api_opsflow_v1_task_category_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskCategorySearchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCategorySearchQuery) ProtoMessage() {}

func (x *TaskCategorySearchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_opsflow_v1_task_category_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCategorySearchQuery.ProtoReflect.Descriptor instead.
func (*TaskCategorySearchQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_opsflow_v1_task_category_proto_rawDescGZIP(), []int{6}
}

func (x *TaskCategorySearchQuery) GetQuery() *v2.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *TaskCategorySearchQuery) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *TaskCategorySearchQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TaskCategoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId    string          `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Name          string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string          `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StatusOptions *StatusOptions  `protobuf:"bytes,4,opt,name=status_options,json=statusOptions,proto3" json:"status_options,omitempty"`
	Fields        []*TaskField    `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	Tags          *_struct.Struct `protobuf:"bytes,11,opt,name=tags,proto3" json:"tags,omitempty"`
	DomainId      string          `protobuf:"bytes,21,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	PackageId     string          `protobuf:"bytes,22,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	CreatedAt     string          `protobuf:"bytes,31,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     string          `protobuf:"bytes,32,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *TaskCategoryInfo) Reset() {
	*x = TaskCategoryInfo{}
	mi := &file_spaceone_api_opsflow_v1_task_category_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskCategoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCategoryInfo) ProtoMessage() {}

func (x *TaskCategoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_opsflow_v1_task_category_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCategoryInfo.ProtoReflect.Descriptor instead.
func (*TaskCategoryInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_opsflow_v1_task_category_proto_rawDescGZIP(), []int{7}
}

func (x *TaskCategoryInfo) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *TaskCategoryInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskCategoryInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskCategoryInfo) GetStatusOptions() *StatusOptions {
	if x != nil {
		return x.StatusOptions
	}
	return nil
}

func (x *TaskCategoryInfo) GetFields() []*TaskField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *TaskCategoryInfo) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TaskCategoryInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *TaskCategoryInfo) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *TaskCategoryInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TaskCategoryInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type TaskCategoriesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results    []*TaskCategoryInfo `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TotalCount int32               `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *TaskCategoriesInfo) Reset() {
	*x = TaskCategoriesInfo{}
	mi := &file_spaceone_api_opsflow_v1_task_category_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskCategoriesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCategoriesInfo) ProtoMessage() {}

func (x *TaskCategoriesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_opsflow_v1_task_category_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCategoriesInfo.ProtoReflect.Descriptor instead.
func (*TaskCategoriesInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_opsflow_v1_task_category_proto_rawDescGZIP(), []int{8}
}

func (x *TaskCategoriesInfo) GetResults() []*TaskCategoryInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TaskCategoriesInfo) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type TaskCategoryStatQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *v2.StatisticsQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *TaskCategoryStatQuery) Reset() {
	*x = TaskCategoryStatQuery{}
	mi := &file_spaceone_api_opsflow_v1_task_category_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskCategoryStatQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCategoryStatQuery) ProtoMessage() {}

func (x *TaskCategoryStatQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_opsflow_v1_task_category_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCategoryStatQuery.ProtoReflect.Descriptor instead.
func (*TaskCategoryStatQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_opsflow_v1_task_category_proto_rawDescGZIP(), []int{9}
}

func (x *TaskCategoryStatQuery) GetQuery() *v2.StatisticsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

var File_spaceone_api_opsflow_v1_task_category_proto protoreflect.FileDescriptor

var file_spaceone_api_opsflow_v1_task_category_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x70, 0x73, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x74, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x54, 0x4f, 0x44,
	0x4f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x54, 0x4f, 0x44, 0x4f, 0x12, 0x46, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x49, 0x4e, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x12, 0x43, 0x0a, 0x09,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f,
	0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x22, 0x83, 0x03, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x31, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x57, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x70, 0x73, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x3a, 0x0a, 0x0d, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x10, 0x02, 0x22, 0xa8, 0x02, 0x0a, 0x19, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6f, 0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x70, 0x73, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x22, 0xdf, 0x02, 0x0a, 0x19, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f,
	0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a,
	0x17, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x9b, 0x03, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6f, 0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x70, 0x73, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x7a,
	0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x15, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x32, 0xd3, 0x06, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x94, 0x01, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x70, 0x73, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6f, 0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x6f, 0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6f, 0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f,
	0x6f, 0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2d,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x7b, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6f, 0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x6f, 0x70, 0x73,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2d, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x88, 0x01, 0x0a,
	0x03, 0x67, 0x65, 0x74, 0x12, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6f, 0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6f, 0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x28, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x6f, 0x70, 0x73, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x12, 0x90, 0x01, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x30, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6f, 0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x1a, 0x2b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6f, 0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x6f, 0x70, 0x73,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2d, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x04, 0x73, 0x74,
	0x61, 0x74, 0x12, 0x2e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6f, 0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x29, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x6f, 0x70, 0x73, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x72, 0x65, 0x74, 0x2d,
	0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x73, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spaceone_api_opsflow_v1_task_category_proto_rawDescOnce sync.Once
	file_spaceone_api_opsflow_v1_task_category_proto_rawDescData = file_spaceone_api_opsflow_v1_task_category_proto_rawDesc
)

func file_spaceone_api_opsflow_v1_task_category_proto_rawDescGZIP() []byte {
	file_spaceone_api_opsflow_v1_task_category_proto_rawDescOnce.Do(func() {
		file_spaceone_api_opsflow_v1_task_category_proto_rawDescData = protoimpl.X.CompressGZIP(file_spaceone_api_opsflow_v1_task_category_proto_rawDescData)
	})
	return file_spaceone_api_opsflow_v1_task_category_proto_rawDescData
}

var file_spaceone_api_opsflow_v1_task_category_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_spaceone_api_opsflow_v1_task_category_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_spaceone_api_opsflow_v1_task_category_proto_goTypes = []any{
	(TaskField_SelectionType)(0),      // 0: spaceone.api.opsflow.v1.TaskField.SelectionType
	(*StatusOption)(nil),              // 1: spaceone.api.opsflow.v1.StatusOption
	(*StatusOptions)(nil),             // 2: spaceone.api.opsflow.v1.StatusOptions
	(*TaskField)(nil),                 // 3: spaceone.api.opsflow.v1.TaskField
	(*TaskCategoryCreateRequest)(nil), // 4: spaceone.api.opsflow.v1.TaskCategoryCreateRequest
	(*TaskCategoryUpdateRequest)(nil), // 5: spaceone.api.opsflow.v1.TaskCategoryUpdateRequest
	(*TaskCategoryRequest)(nil),       // 6: spaceone.api.opsflow.v1.TaskCategoryRequest
	(*TaskCategorySearchQuery)(nil),   // 7: spaceone.api.opsflow.v1.TaskCategorySearchQuery
	(*TaskCategoryInfo)(nil),          // 8: spaceone.api.opsflow.v1.TaskCategoryInfo
	(*TaskCategoriesInfo)(nil),        // 9: spaceone.api.opsflow.v1.TaskCategoriesInfo
	(*TaskCategoryStatQuery)(nil),     // 10: spaceone.api.opsflow.v1.TaskCategoryStatQuery
	(*_struct.Struct)(nil),            // 11: google.protobuf.Struct
	(*v2.Query)(nil),                  // 12: spaceone.api.core.v2.Query
	(*v2.StatisticsQuery)(nil),        // 13: spaceone.api.core.v2.StatisticsQuery
	(*empty.Empty)(nil),               // 14: google.protobuf.Empty
}
var file_spaceone_api_opsflow_v1_task_category_proto_depIdxs = []int32{
	1,  // 0: spaceone.api.opsflow.v1.StatusOptions.TODO:type_name -> spaceone.api.opsflow.v1.StatusOption
	1,  // 1: spaceone.api.opsflow.v1.StatusOptions.IN_PROGRESS:type_name -> spaceone.api.opsflow.v1.StatusOption
	1,  // 2: spaceone.api.opsflow.v1.StatusOptions.COMPLETED:type_name -> spaceone.api.opsflow.v1.StatusOption
	11, // 3: spaceone.api.opsflow.v1.TaskField.options:type_name -> google.protobuf.Struct
	0,  // 4: spaceone.api.opsflow.v1.TaskField.selection_type:type_name -> spaceone.api.opsflow.v1.TaskField.SelectionType
	2,  // 5: spaceone.api.opsflow.v1.TaskCategoryCreateRequest.status_options:type_name -> spaceone.api.opsflow.v1.StatusOptions
	3,  // 6: spaceone.api.opsflow.v1.TaskCategoryCreateRequest.fields:type_name -> spaceone.api.opsflow.v1.TaskField
	11, // 7: spaceone.api.opsflow.v1.TaskCategoryCreateRequest.tags:type_name -> google.protobuf.Struct
	2,  // 8: spaceone.api.opsflow.v1.TaskCategoryUpdateRequest.status_options:type_name -> spaceone.api.opsflow.v1.StatusOptions
	3,  // 9: spaceone.api.opsflow.v1.TaskCategoryUpdateRequest.fields:type_name -> spaceone.api.opsflow.v1.TaskField
	11, // 10: spaceone.api.opsflow.v1.TaskCategoryUpdateRequest.tags:type_name -> google.protobuf.Struct
	12, // 11: spaceone.api.opsflow.v1.TaskCategorySearchQuery.query:type_name -> spaceone.api.core.v2.Query
	2,  // 12: spaceone.api.opsflow.v1.TaskCategoryInfo.status_options:type_name -> spaceone.api.opsflow.v1.StatusOptions
	3,  // 13: spaceone.api.opsflow.v1.TaskCategoryInfo.fields:type_name -> spaceone.api.opsflow.v1.TaskField
	11, // 14: spaceone.api.opsflow.v1.TaskCategoryInfo.tags:type_name -> google.protobuf.Struct
	8,  // 15: spaceone.api.opsflow.v1.TaskCategoriesInfo.results:type_name -> spaceone.api.opsflow.v1.TaskCategoryInfo
	13, // 16: spaceone.api.opsflow.v1.TaskCategoryStatQuery.query:type_name -> spaceone.api.core.v2.StatisticsQuery
	4,  // 17: spaceone.api.opsflow.v1.TaskCategory.create:input_type -> spaceone.api.opsflow.v1.TaskCategoryCreateRequest
	5,  // 18: spaceone.api.opsflow.v1.TaskCategory.update:input_type -> spaceone.api.opsflow.v1.TaskCategoryUpdateRequest
	6,  // 19: spaceone.api.opsflow.v1.TaskCategory.delete:input_type -> spaceone.api.opsflow.v1.TaskCategoryRequest
	6,  // 20: spaceone.api.opsflow.v1.TaskCategory.get:input_type -> spaceone.api.opsflow.v1.TaskCategoryRequest
	7,  // 21: spaceone.api.opsflow.v1.TaskCategory.list:input_type -> spaceone.api.opsflow.v1.TaskCategorySearchQuery
	10, // 22: spaceone.api.opsflow.v1.TaskCategory.stat:input_type -> spaceone.api.opsflow.v1.TaskCategoryStatQuery
	8,  // 23: spaceone.api.opsflow.v1.TaskCategory.create:output_type -> spaceone.api.opsflow.v1.TaskCategoryInfo
	8,  // 24: spaceone.api.opsflow.v1.TaskCategory.update:output_type -> spaceone.api.opsflow.v1.TaskCategoryInfo
	14, // 25: spaceone.api.opsflow.v1.TaskCategory.delete:output_type -> google.protobuf.Empty
	8,  // 26: spaceone.api.opsflow.v1.TaskCategory.get:output_type -> spaceone.api.opsflow.v1.TaskCategoryInfo
	9,  // 27: spaceone.api.opsflow.v1.TaskCategory.list:output_type -> spaceone.api.opsflow.v1.TaskCategoriesInfo
	11, // 28: spaceone.api.opsflow.v1.TaskCategory.stat:output_type -> google.protobuf.Struct
	23, // [23:29] is the sub-list for method output_type
	17, // [17:23] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_spaceone_api_opsflow_v1_task_category_proto_init() }
func file_spaceone_api_opsflow_v1_task_category_proto_init() {
	if File_spaceone_api_opsflow_v1_task_category_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spaceone_api_opsflow_v1_task_category_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spaceone_api_opsflow_v1_task_category_proto_goTypes,
		DependencyIndexes: file_spaceone_api_opsflow_v1_task_category_proto_depIdxs,
		EnumInfos:         file_spaceone_api_opsflow_v1_task_category_proto_enumTypes,
		MessageInfos:      file_spaceone_api_opsflow_v1_task_category_proto_msgTypes,
	}.Build()
	File_spaceone_api_opsflow_v1_task_category_proto = out.File
	file_spaceone_api_opsflow_v1_task_category_proto_rawDesc = nil
	file_spaceone_api_opsflow_v1_task_category_proto_goTypes = nil
	file_spaceone_api_opsflow_v1_task_category_proto_depIdxs = nil
}
