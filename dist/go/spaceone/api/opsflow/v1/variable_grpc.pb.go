// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/opsflow/v1/variable.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Variable_Create_FullMethodName = "/spaceone.api.opsflow.v1.Variable/create"
	Variable_Update_FullMethodName = "/spaceone.api.opsflow.v1.Variable/update"
	Variable_Delete_FullMethodName = "/spaceone.api.opsflow.v1.Variable/delete"
	Variable_Get_FullMethodName    = "/spaceone.api.opsflow.v1.Variable/get"
	Variable_List_FullMethodName   = "/spaceone.api.opsflow.v1.Variable/list"
	Variable_Stat_FullMethodName   = "/spaceone.api.opsflow.v1.Variable/stat"
)

// VariableClient is the client API for Variable service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VariableClient interface {
	Create(ctx context.Context, in *VariableCreateRequest, opts ...grpc.CallOption) (*VariableInfo, error)
	Update(ctx context.Context, in *VariableUpdateRequest, opts ...grpc.CallOption) (*VariableInfo, error)
	Delete(ctx context.Context, in *VariableRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *VariableRequest, opts ...grpc.CallOption) (*VariableInfo, error)
	List(ctx context.Context, in *VariableSearchQuery, opts ...grpc.CallOption) (*VariablesInfo, error)
	Stat(ctx context.Context, in *VariableStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type variableClient struct {
	cc grpc.ClientConnInterface
}

func NewVariableClient(cc grpc.ClientConnInterface) VariableClient {
	return &variableClient{cc}
}

func (c *variableClient) Create(ctx context.Context, in *VariableCreateRequest, opts ...grpc.CallOption) (*VariableInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VariableInfo)
	err := c.cc.Invoke(ctx, Variable_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableClient) Update(ctx context.Context, in *VariableUpdateRequest, opts ...grpc.CallOption) (*VariableInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VariableInfo)
	err := c.cc.Invoke(ctx, Variable_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableClient) Delete(ctx context.Context, in *VariableRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Variable_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableClient) Get(ctx context.Context, in *VariableRequest, opts ...grpc.CallOption) (*VariableInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VariableInfo)
	err := c.cc.Invoke(ctx, Variable_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableClient) List(ctx context.Context, in *VariableSearchQuery, opts ...grpc.CallOption) (*VariablesInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VariablesInfo)
	err := c.cc.Invoke(ctx, Variable_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableClient) Stat(ctx context.Context, in *VariableStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Variable_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VariableServer is the server API for Variable service.
// All implementations must embed UnimplementedVariableServer
// for forward compatibility.
type VariableServer interface {
	Create(context.Context, *VariableCreateRequest) (*VariableInfo, error)
	Update(context.Context, *VariableUpdateRequest) (*VariableInfo, error)
	Delete(context.Context, *VariableRequest) (*empty.Empty, error)
	Get(context.Context, *VariableRequest) (*VariableInfo, error)
	List(context.Context, *VariableSearchQuery) (*VariablesInfo, error)
	Stat(context.Context, *VariableStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedVariableServer()
}

// UnimplementedVariableServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVariableServer struct{}

func (UnimplementedVariableServer) Create(context.Context, *VariableCreateRequest) (*VariableInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedVariableServer) Update(context.Context, *VariableUpdateRequest) (*VariableInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedVariableServer) Delete(context.Context, *VariableRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedVariableServer) Get(context.Context, *VariableRequest) (*VariableInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedVariableServer) List(context.Context, *VariableSearchQuery) (*VariablesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedVariableServer) Stat(context.Context, *VariableStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedVariableServer) mustEmbedUnimplementedVariableServer() {}
func (UnimplementedVariableServer) testEmbeddedByValue()                  {}

// UnsafeVariableServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VariableServer will
// result in compilation errors.
type UnsafeVariableServer interface {
	mustEmbedUnimplementedVariableServer()
}

func RegisterVariableServer(s grpc.ServiceRegistrar, srv VariableServer) {
	// If the following call pancis, it indicates UnimplementedVariableServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Variable_ServiceDesc, srv)
}

func _Variable_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VariableCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variable_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServer).Create(ctx, req.(*VariableCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variable_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VariableUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variable_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServer).Update(ctx, req.(*VariableUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variable_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variable_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServer).Delete(ctx, req.(*VariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variable_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variable_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServer).Get(ctx, req.(*VariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variable_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VariableSearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variable_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServer).List(ctx, req.(*VariableSearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variable_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VariableStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variable_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServer).Stat(ctx, req.(*VariableStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Variable_ServiceDesc is the grpc.ServiceDesc for Variable service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Variable_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.opsflow.v1.Variable",
	HandlerType: (*VariableServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Variable_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _Variable_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Variable_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Variable_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Variable_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _Variable_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/opsflow/v1/variable.proto",
}
