// DomainConfig API which configure environments for domain

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: spaceone/api/config/v1/workspace_config.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkspaceConfig_Create_FullMethodName = "/spaceone.api.config.v1.WorkspaceConfig/create"
	WorkspaceConfig_Update_FullMethodName = "/spaceone.api.config.v1.WorkspaceConfig/update"
	WorkspaceConfig_Set_FullMethodName    = "/spaceone.api.config.v1.WorkspaceConfig/set"
	WorkspaceConfig_Delete_FullMethodName = "/spaceone.api.config.v1.WorkspaceConfig/delete"
	WorkspaceConfig_Get_FullMethodName    = "/spaceone.api.config.v1.WorkspaceConfig/get"
	WorkspaceConfig_List_FullMethodName   = "/spaceone.api.config.v1.WorkspaceConfig/list"
	WorkspaceConfig_Stat_FullMethodName   = "/spaceone.api.config.v1.WorkspaceConfig/stat"
)

// WorkspaceConfigClient is the client API for WorkspaceConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspaceConfigClient interface {
	Create(ctx context.Context, in *CreateWorkspaceConfigRequest, opts ...grpc.CallOption) (*WorkspaceConfigInfo, error)
	Update(ctx context.Context, in *CreateWorkspaceConfigRequest, opts ...grpc.CallOption) (*WorkspaceConfigInfo, error)
	Set(ctx context.Context, in *CreateWorkspaceConfigRequest, opts ...grpc.CallOption) (*WorkspaceConfigInfo, error)
	Delete(ctx context.Context, in *WorkspaceConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *WorkspaceConfigRequest, opts ...grpc.CallOption) (*WorkspaceConfigInfo, error)
	List(ctx context.Context, in *WorkspaceConfigSearchQuery, opts ...grpc.CallOption) (*WorkspaceConfigsInfo, error)
	Stat(ctx context.Context, in *WorkspaceConfigStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type workspaceConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceConfigClient(cc grpc.ClientConnInterface) WorkspaceConfigClient {
	return &workspaceConfigClient{cc}
}

func (c *workspaceConfigClient) Create(ctx context.Context, in *CreateWorkspaceConfigRequest, opts ...grpc.CallOption) (*WorkspaceConfigInfo, error) {
	out := new(WorkspaceConfigInfo)
	err := c.cc.Invoke(ctx, WorkspaceConfig_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceConfigClient) Update(ctx context.Context, in *CreateWorkspaceConfigRequest, opts ...grpc.CallOption) (*WorkspaceConfigInfo, error) {
	out := new(WorkspaceConfigInfo)
	err := c.cc.Invoke(ctx, WorkspaceConfig_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceConfigClient) Set(ctx context.Context, in *CreateWorkspaceConfigRequest, opts ...grpc.CallOption) (*WorkspaceConfigInfo, error) {
	out := new(WorkspaceConfigInfo)
	err := c.cc.Invoke(ctx, WorkspaceConfig_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceConfigClient) Delete(ctx context.Context, in *WorkspaceConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, WorkspaceConfig_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceConfigClient) Get(ctx context.Context, in *WorkspaceConfigRequest, opts ...grpc.CallOption) (*WorkspaceConfigInfo, error) {
	out := new(WorkspaceConfigInfo)
	err := c.cc.Invoke(ctx, WorkspaceConfig_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceConfigClient) List(ctx context.Context, in *WorkspaceConfigSearchQuery, opts ...grpc.CallOption) (*WorkspaceConfigsInfo, error) {
	out := new(WorkspaceConfigsInfo)
	err := c.cc.Invoke(ctx, WorkspaceConfig_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceConfigClient) Stat(ctx context.Context, in *WorkspaceConfigStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, WorkspaceConfig_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspaceConfigServer is the server API for WorkspaceConfig service.
// All implementations must embed UnimplementedWorkspaceConfigServer
// for forward compatibility
type WorkspaceConfigServer interface {
	Create(context.Context, *CreateWorkspaceConfigRequest) (*WorkspaceConfigInfo, error)
	Update(context.Context, *CreateWorkspaceConfigRequest) (*WorkspaceConfigInfo, error)
	Set(context.Context, *CreateWorkspaceConfigRequest) (*WorkspaceConfigInfo, error)
	Delete(context.Context, *WorkspaceConfigRequest) (*empty.Empty, error)
	Get(context.Context, *WorkspaceConfigRequest) (*WorkspaceConfigInfo, error)
	List(context.Context, *WorkspaceConfigSearchQuery) (*WorkspaceConfigsInfo, error)
	Stat(context.Context, *WorkspaceConfigStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedWorkspaceConfigServer()
}

// UnimplementedWorkspaceConfigServer must be embedded to have forward compatible implementations.
type UnimplementedWorkspaceConfigServer struct {
}

func (UnimplementedWorkspaceConfigServer) Create(context.Context, *CreateWorkspaceConfigRequest) (*WorkspaceConfigInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWorkspaceConfigServer) Update(context.Context, *CreateWorkspaceConfigRequest) (*WorkspaceConfigInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWorkspaceConfigServer) Set(context.Context, *CreateWorkspaceConfigRequest) (*WorkspaceConfigInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedWorkspaceConfigServer) Delete(context.Context, *WorkspaceConfigRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWorkspaceConfigServer) Get(context.Context, *WorkspaceConfigRequest) (*WorkspaceConfigInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWorkspaceConfigServer) List(context.Context, *WorkspaceConfigSearchQuery) (*WorkspaceConfigsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWorkspaceConfigServer) Stat(context.Context, *WorkspaceConfigStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedWorkspaceConfigServer) mustEmbedUnimplementedWorkspaceConfigServer() {}

// UnsafeWorkspaceConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspaceConfigServer will
// result in compilation errors.
type UnsafeWorkspaceConfigServer interface {
	mustEmbedUnimplementedWorkspaceConfigServer()
}

func RegisterWorkspaceConfigServer(s grpc.ServiceRegistrar, srv WorkspaceConfigServer) {
	s.RegisterService(&WorkspaceConfig_ServiceDesc, srv)
}

func _WorkspaceConfig_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkspaceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceConfigServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceConfig_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceConfigServer).Create(ctx, req.(*CreateWorkspaceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceConfig_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkspaceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceConfigServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceConfig_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceConfigServer).Update(ctx, req.(*CreateWorkspaceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceConfig_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkspaceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceConfigServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceConfig_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceConfigServer).Set(ctx, req.(*CreateWorkspaceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceConfig_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceConfigServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceConfig_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceConfigServer).Delete(ctx, req.(*WorkspaceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceConfig_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceConfigServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceConfig_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceConfigServer).Get(ctx, req.(*WorkspaceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceConfig_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceConfigSearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceConfigServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceConfig_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceConfigServer).List(ctx, req.(*WorkspaceConfigSearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceConfig_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceConfigStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceConfigServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceConfig_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceConfigServer).Stat(ctx, req.(*WorkspaceConfigStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkspaceConfig_ServiceDesc is the grpc.ServiceDesc for WorkspaceConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkspaceConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.config.v1.WorkspaceConfig",
	HandlerType: (*WorkspaceConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _WorkspaceConfig_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _WorkspaceConfig_Update_Handler,
		},
		{
			MethodName: "set",
			Handler:    _WorkspaceConfig_Set_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _WorkspaceConfig_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _WorkspaceConfig_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _WorkspaceConfig_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _WorkspaceConfig_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/config/v1/workspace_config.proto",
}
