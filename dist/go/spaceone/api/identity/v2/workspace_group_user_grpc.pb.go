// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/identity/v2/workspace_group_user.proto

package v2

import (
	context "context"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkspaceGroupUser_Add_FullMethodName        = "/spaceone.api.identity.v2.WorkspaceGroupUser/add"
	WorkspaceGroupUser_Remove_FullMethodName     = "/spaceone.api.identity.v2.WorkspaceGroupUser/remove"
	WorkspaceGroupUser_UpdateRole_FullMethodName = "/spaceone.api.identity.v2.WorkspaceGroupUser/update_role"
	WorkspaceGroupUser_Find_FullMethodName       = "/spaceone.api.identity.v2.WorkspaceGroupUser/find"
	WorkspaceGroupUser_Get_FullMethodName        = "/spaceone.api.identity.v2.WorkspaceGroupUser/get"
	WorkspaceGroupUser_List_FullMethodName       = "/spaceone.api.identity.v2.WorkspaceGroupUser/list"
	WorkspaceGroupUser_Stat_FullMethodName       = "/spaceone.api.identity.v2.WorkspaceGroupUser/stat"
)

// WorkspaceGroupUserClient is the client API for WorkspaceGroupUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspaceGroupUserClient interface {
	Add(ctx context.Context, in *WorkspaceGroupUsersRequest, opts ...grpc.CallOption) (*WorkspaceGroupInfo, error)
	Remove(ctx context.Context, in *WorkspaceGroupUsersRequest, opts ...grpc.CallOption) (*WorkspaceGroupInfo, error)
	UpdateRole(ctx context.Context, in *WorkspaceGroupUserUpdateRoleRequest, opts ...grpc.CallOption) (*WorkspaceGroupInfo, error)
	Find(ctx context.Context, in *WorkspaceGroupUserFindRequest, opts ...grpc.CallOption) (*WorkspaceGroupUsersSummaryInfo, error)
	Get(ctx context.Context, in *WorkspaceGroupUserRequest, opts ...grpc.CallOption) (*WorkspaceGroupInfo, error)
	List(ctx context.Context, in *WorkspaceGroupUserSearchQuery, opts ...grpc.CallOption) (*WorkspaceGroupsInfo, error)
	Stat(ctx context.Context, in *WorkspaceGroupUserStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type workspaceGroupUserClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceGroupUserClient(cc grpc.ClientConnInterface) WorkspaceGroupUserClient {
	return &workspaceGroupUserClient{cc}
}

func (c *workspaceGroupUserClient) Add(ctx context.Context, in *WorkspaceGroupUsersRequest, opts ...grpc.CallOption) (*WorkspaceGroupInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkspaceGroupInfo)
	err := c.cc.Invoke(ctx, WorkspaceGroupUser_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceGroupUserClient) Remove(ctx context.Context, in *WorkspaceGroupUsersRequest, opts ...grpc.CallOption) (*WorkspaceGroupInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkspaceGroupInfo)
	err := c.cc.Invoke(ctx, WorkspaceGroupUser_Remove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceGroupUserClient) UpdateRole(ctx context.Context, in *WorkspaceGroupUserUpdateRoleRequest, opts ...grpc.CallOption) (*WorkspaceGroupInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkspaceGroupInfo)
	err := c.cc.Invoke(ctx, WorkspaceGroupUser_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceGroupUserClient) Find(ctx context.Context, in *WorkspaceGroupUserFindRequest, opts ...grpc.CallOption) (*WorkspaceGroupUsersSummaryInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkspaceGroupUsersSummaryInfo)
	err := c.cc.Invoke(ctx, WorkspaceGroupUser_Find_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceGroupUserClient) Get(ctx context.Context, in *WorkspaceGroupUserRequest, opts ...grpc.CallOption) (*WorkspaceGroupInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkspaceGroupInfo)
	err := c.cc.Invoke(ctx, WorkspaceGroupUser_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceGroupUserClient) List(ctx context.Context, in *WorkspaceGroupUserSearchQuery, opts ...grpc.CallOption) (*WorkspaceGroupsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkspaceGroupsInfo)
	err := c.cc.Invoke(ctx, WorkspaceGroupUser_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceGroupUserClient) Stat(ctx context.Context, in *WorkspaceGroupUserStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, WorkspaceGroupUser_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspaceGroupUserServer is the server API for WorkspaceGroupUser service.
// All implementations must embed UnimplementedWorkspaceGroupUserServer
// for forward compatibility.
type WorkspaceGroupUserServer interface {
	Add(context.Context, *WorkspaceGroupUsersRequest) (*WorkspaceGroupInfo, error)
	Remove(context.Context, *WorkspaceGroupUsersRequest) (*WorkspaceGroupInfo, error)
	UpdateRole(context.Context, *WorkspaceGroupUserUpdateRoleRequest) (*WorkspaceGroupInfo, error)
	Find(context.Context, *WorkspaceGroupUserFindRequest) (*WorkspaceGroupUsersSummaryInfo, error)
	Get(context.Context, *WorkspaceGroupUserRequest) (*WorkspaceGroupInfo, error)
	List(context.Context, *WorkspaceGroupUserSearchQuery) (*WorkspaceGroupsInfo, error)
	Stat(context.Context, *WorkspaceGroupUserStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedWorkspaceGroupUserServer()
}

// UnimplementedWorkspaceGroupUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkspaceGroupUserServer struct{}

func (UnimplementedWorkspaceGroupUserServer) Add(context.Context, *WorkspaceGroupUsersRequest) (*WorkspaceGroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedWorkspaceGroupUserServer) Remove(context.Context, *WorkspaceGroupUsersRequest) (*WorkspaceGroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedWorkspaceGroupUserServer) UpdateRole(context.Context, *WorkspaceGroupUserUpdateRoleRequest) (*WorkspaceGroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedWorkspaceGroupUserServer) Find(context.Context, *WorkspaceGroupUserFindRequest) (*WorkspaceGroupUsersSummaryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedWorkspaceGroupUserServer) Get(context.Context, *WorkspaceGroupUserRequest) (*WorkspaceGroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWorkspaceGroupUserServer) List(context.Context, *WorkspaceGroupUserSearchQuery) (*WorkspaceGroupsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWorkspaceGroupUserServer) Stat(context.Context, *WorkspaceGroupUserStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedWorkspaceGroupUserServer) mustEmbedUnimplementedWorkspaceGroupUserServer() {}
func (UnimplementedWorkspaceGroupUserServer) testEmbeddedByValue()                            {}

// UnsafeWorkspaceGroupUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspaceGroupUserServer will
// result in compilation errors.
type UnsafeWorkspaceGroupUserServer interface {
	mustEmbedUnimplementedWorkspaceGroupUserServer()
}

func RegisterWorkspaceGroupUserServer(s grpc.ServiceRegistrar, srv WorkspaceGroupUserServer) {
	// If the following call pancis, it indicates UnimplementedWorkspaceGroupUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkspaceGroupUser_ServiceDesc, srv)
}

func _WorkspaceGroupUser_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceGroupUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceGroupUserServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceGroupUser_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceGroupUserServer).Add(ctx, req.(*WorkspaceGroupUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceGroupUser_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceGroupUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceGroupUserServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceGroupUser_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceGroupUserServer).Remove(ctx, req.(*WorkspaceGroupUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceGroupUser_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceGroupUserUpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceGroupUserServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceGroupUser_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceGroupUserServer).UpdateRole(ctx, req.(*WorkspaceGroupUserUpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceGroupUser_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceGroupUserFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceGroupUserServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceGroupUser_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceGroupUserServer).Find(ctx, req.(*WorkspaceGroupUserFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceGroupUser_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceGroupUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceGroupUserServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceGroupUser_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceGroupUserServer).Get(ctx, req.(*WorkspaceGroupUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceGroupUser_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceGroupUserSearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceGroupUserServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceGroupUser_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceGroupUserServer).List(ctx, req.(*WorkspaceGroupUserSearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceGroupUser_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceGroupUserStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceGroupUserServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceGroupUser_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceGroupUserServer).Stat(ctx, req.(*WorkspaceGroupUserStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkspaceGroupUser_ServiceDesc is the grpc.ServiceDesc for WorkspaceGroupUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkspaceGroupUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.identity.v2.WorkspaceGroupUser",
	HandlerType: (*WorkspaceGroupUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _WorkspaceGroupUser_Add_Handler,
		},
		{
			MethodName: "remove",
			Handler:    _WorkspaceGroupUser_Remove_Handler,
		},
		{
			MethodName: "update_role",
			Handler:    _WorkspaceGroupUser_UpdateRole_Handler,
		},
		{
			MethodName: "find",
			Handler:    _WorkspaceGroupUser_Find_Handler,
		},
		{
			MethodName: "get",
			Handler:    _WorkspaceGroupUser_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _WorkspaceGroupUser_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _WorkspaceGroupUser_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/identity/v2/workspace_group_user.proto",
}
