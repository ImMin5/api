// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/identity/v2/project.proto

package v2

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Project_Create_FullMethodName             = "/spaceone.api.identity.v2.Project/create"
	Project_Update_FullMethodName             = "/spaceone.api.identity.v2.Project/update"
	Project_UpdateProjectType_FullMethodName  = "/spaceone.api.identity.v2.Project/update_project_type"
	Project_ChangeProjectGroup_FullMethodName = "/spaceone.api.identity.v2.Project/change_project_group"
	Project_Delete_FullMethodName             = "/spaceone.api.identity.v2.Project/delete"
	Project_AddUsers_FullMethodName           = "/spaceone.api.identity.v2.Project/add_users"
	Project_RemoveUsers_FullMethodName        = "/spaceone.api.identity.v2.Project/remove_users"
	Project_Get_FullMethodName                = "/spaceone.api.identity.v2.Project/get"
	Project_List_FullMethodName               = "/spaceone.api.identity.v2.Project/list"
	Project_Stat_FullMethodName               = "/spaceone.api.identity.v2.Project/stat"
)

// ProjectClient is the client API for Project service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectClient interface {
	Create(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*ProjectInfo, error)
	Update(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*ProjectInfo, error)
	UpdateProjectType(ctx context.Context, in *UpdateProjectTypeRequest, opts ...grpc.CallOption) (*ProjectInfo, error)
	ChangeProjectGroup(ctx context.Context, in *ChangeProjectGroupRequest, opts ...grpc.CallOption) (*ProjectInfo, error)
	Delete(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddUsers(ctx context.Context, in *UsersProjectRequest, opts ...grpc.CallOption) (*ProjectInfo, error)
	RemoveUsers(ctx context.Context, in *UsersProjectRequest, opts ...grpc.CallOption) (*ProjectInfo, error)
	Get(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectInfo, error)
	List(ctx context.Context, in *ProjectSearchQuery, opts ...grpc.CallOption) (*ProjectsInfo, error)
	Stat(ctx context.Context, in *ProjectStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type projectClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectClient(cc grpc.ClientConnInterface) ProjectClient {
	return &projectClient{cc}
}

func (c *projectClient) Create(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*ProjectInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectInfo)
	err := c.cc.Invoke(ctx, Project_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) Update(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*ProjectInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectInfo)
	err := c.cc.Invoke(ctx, Project_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) UpdateProjectType(ctx context.Context, in *UpdateProjectTypeRequest, opts ...grpc.CallOption) (*ProjectInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectInfo)
	err := c.cc.Invoke(ctx, Project_UpdateProjectType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) ChangeProjectGroup(ctx context.Context, in *ChangeProjectGroupRequest, opts ...grpc.CallOption) (*ProjectInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectInfo)
	err := c.cc.Invoke(ctx, Project_ChangeProjectGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) Delete(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Project_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) AddUsers(ctx context.Context, in *UsersProjectRequest, opts ...grpc.CallOption) (*ProjectInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectInfo)
	err := c.cc.Invoke(ctx, Project_AddUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) RemoveUsers(ctx context.Context, in *UsersProjectRequest, opts ...grpc.CallOption) (*ProjectInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectInfo)
	err := c.cc.Invoke(ctx, Project_RemoveUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) Get(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectInfo)
	err := c.cc.Invoke(ctx, Project_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) List(ctx context.Context, in *ProjectSearchQuery, opts ...grpc.CallOption) (*ProjectsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectsInfo)
	err := c.cc.Invoke(ctx, Project_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) Stat(ctx context.Context, in *ProjectStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Project_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServer is the server API for Project service.
// All implementations must embed UnimplementedProjectServer
// for forward compatibility.
type ProjectServer interface {
	Create(context.Context, *CreateProjectRequest) (*ProjectInfo, error)
	Update(context.Context, *UpdateProjectRequest) (*ProjectInfo, error)
	UpdateProjectType(context.Context, *UpdateProjectTypeRequest) (*ProjectInfo, error)
	ChangeProjectGroup(context.Context, *ChangeProjectGroupRequest) (*ProjectInfo, error)
	Delete(context.Context, *ProjectRequest) (*empty.Empty, error)
	AddUsers(context.Context, *UsersProjectRequest) (*ProjectInfo, error)
	RemoveUsers(context.Context, *UsersProjectRequest) (*ProjectInfo, error)
	Get(context.Context, *ProjectRequest) (*ProjectInfo, error)
	List(context.Context, *ProjectSearchQuery) (*ProjectsInfo, error)
	Stat(context.Context, *ProjectStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedProjectServer()
}

// UnimplementedProjectServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProjectServer struct{}

func (UnimplementedProjectServer) Create(context.Context, *CreateProjectRequest) (*ProjectInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProjectServer) Update(context.Context, *UpdateProjectRequest) (*ProjectInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProjectServer) UpdateProjectType(context.Context, *UpdateProjectTypeRequest) (*ProjectInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectType not implemented")
}
func (UnimplementedProjectServer) ChangeProjectGroup(context.Context, *ChangeProjectGroupRequest) (*ProjectInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeProjectGroup not implemented")
}
func (UnimplementedProjectServer) Delete(context.Context, *ProjectRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProjectServer) AddUsers(context.Context, *UsersProjectRequest) (*ProjectInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUsers not implemented")
}
func (UnimplementedProjectServer) RemoveUsers(context.Context, *UsersProjectRequest) (*ProjectInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUsers not implemented")
}
func (UnimplementedProjectServer) Get(context.Context, *ProjectRequest) (*ProjectInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProjectServer) List(context.Context, *ProjectSearchQuery) (*ProjectsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProjectServer) Stat(context.Context, *ProjectStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedProjectServer) mustEmbedUnimplementedProjectServer() {}
func (UnimplementedProjectServer) testEmbeddedByValue()                 {}

// UnsafeProjectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServer will
// result in compilation errors.
type UnsafeProjectServer interface {
	mustEmbedUnimplementedProjectServer()
}

func RegisterProjectServer(s grpc.ServiceRegistrar, srv ProjectServer) {
	// If the following call pancis, it indicates UnimplementedProjectServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Project_ServiceDesc, srv)
}

func _Project_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Project_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).Create(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Project_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).Update(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_UpdateProjectType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).UpdateProjectType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Project_UpdateProjectType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).UpdateProjectType(ctx, req.(*UpdateProjectTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_ChangeProjectGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeProjectGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).ChangeProjectGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Project_ChangeProjectGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).ChangeProjectGroup(ctx, req.(*ChangeProjectGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Project_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).Delete(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_AddUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).AddUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Project_AddUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).AddUsers(ctx, req.(*UsersProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_RemoveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).RemoveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Project_RemoveUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).RemoveUsers(ctx, req.(*UsersProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Project_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).Get(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectSearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Project_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).List(ctx, req.(*ProjectSearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Project_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).Stat(ctx, req.(*ProjectStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Project_ServiceDesc is the grpc.ServiceDesc for Project service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Project_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.identity.v2.Project",
	HandlerType: (*ProjectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Project_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _Project_Update_Handler,
		},
		{
			MethodName: "update_project_type",
			Handler:    _Project_UpdateProjectType_Handler,
		},
		{
			MethodName: "change_project_group",
			Handler:    _Project_ChangeProjectGroup_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Project_Delete_Handler,
		},
		{
			MethodName: "add_users",
			Handler:    _Project_AddUsers_Handler,
		},
		{
			MethodName: "remove_users",
			Handler:    _Project_RemoveUsers_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Project_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Project_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _Project_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/identity/v2/project.proto",
}
