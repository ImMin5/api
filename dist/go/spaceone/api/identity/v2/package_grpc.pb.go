// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/identity/v2/package.proto

package v2

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Package_Create_FullMethodName      = "/spaceone.api.identity.v2.Package/create"
	Package_Update_FullMethodName      = "/spaceone.api.identity.v2.Package/update"
	Package_Delete_FullMethodName      = "/spaceone.api.identity.v2.Package/delete"
	Package_SetDefault_FullMethodName  = "/spaceone.api.identity.v2.Package/set_default"
	Package_ChangeOrder_FullMethodName = "/spaceone.api.identity.v2.Package/change_order"
	Package_Get_FullMethodName         = "/spaceone.api.identity.v2.Package/get"
	Package_List_FullMethodName        = "/spaceone.api.identity.v2.Package/list"
	Package_Stat_FullMethodName        = "/spaceone.api.identity.v2.Package/stat"
)

// PackageClient is the client API for Package service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackageClient interface {
	Create(ctx context.Context, in *CreatePackageRequest, opts ...grpc.CallOption) (*PackageInfo, error)
	Update(ctx context.Context, in *UpdatePackageRequest, opts ...grpc.CallOption) (*PackageInfo, error)
	Delete(ctx context.Context, in *PackageRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SetDefault(ctx context.Context, in *PackageRequest, opts ...grpc.CallOption) (*PackageInfo, error)
	ChangeOrder(ctx context.Context, in *ChangePackageOrderRequest, opts ...grpc.CallOption) (*PackageInfo, error)
	Get(ctx context.Context, in *PackageRequest, opts ...grpc.CallOption) (*PackageInfo, error)
	List(ctx context.Context, in *PackageSearchQuery, opts ...grpc.CallOption) (*PackagesInfo, error)
	Stat(ctx context.Context, in *PackageStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type packageClient struct {
	cc grpc.ClientConnInterface
}

func NewPackageClient(cc grpc.ClientConnInterface) PackageClient {
	return &packageClient{cc}
}

func (c *packageClient) Create(ctx context.Context, in *CreatePackageRequest, opts ...grpc.CallOption) (*PackageInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PackageInfo)
	err := c.cc.Invoke(ctx, Package_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageClient) Update(ctx context.Context, in *UpdatePackageRequest, opts ...grpc.CallOption) (*PackageInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PackageInfo)
	err := c.cc.Invoke(ctx, Package_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageClient) Delete(ctx context.Context, in *PackageRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Package_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageClient) SetDefault(ctx context.Context, in *PackageRequest, opts ...grpc.CallOption) (*PackageInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PackageInfo)
	err := c.cc.Invoke(ctx, Package_SetDefault_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageClient) ChangeOrder(ctx context.Context, in *ChangePackageOrderRequest, opts ...grpc.CallOption) (*PackageInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PackageInfo)
	err := c.cc.Invoke(ctx, Package_ChangeOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageClient) Get(ctx context.Context, in *PackageRequest, opts ...grpc.CallOption) (*PackageInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PackageInfo)
	err := c.cc.Invoke(ctx, Package_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageClient) List(ctx context.Context, in *PackageSearchQuery, opts ...grpc.CallOption) (*PackagesInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PackagesInfo)
	err := c.cc.Invoke(ctx, Package_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageClient) Stat(ctx context.Context, in *PackageStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Package_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackageServer is the server API for Package service.
// All implementations must embed UnimplementedPackageServer
// for forward compatibility.
type PackageServer interface {
	Create(context.Context, *CreatePackageRequest) (*PackageInfo, error)
	Update(context.Context, *UpdatePackageRequest) (*PackageInfo, error)
	Delete(context.Context, *PackageRequest) (*empty.Empty, error)
	SetDefault(context.Context, *PackageRequest) (*PackageInfo, error)
	ChangeOrder(context.Context, *ChangePackageOrderRequest) (*PackageInfo, error)
	Get(context.Context, *PackageRequest) (*PackageInfo, error)
	List(context.Context, *PackageSearchQuery) (*PackagesInfo, error)
	Stat(context.Context, *PackageStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedPackageServer()
}

// UnimplementedPackageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPackageServer struct{}

func (UnimplementedPackageServer) Create(context.Context, *CreatePackageRequest) (*PackageInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPackageServer) Update(context.Context, *UpdatePackageRequest) (*PackageInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPackageServer) Delete(context.Context, *PackageRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPackageServer) SetDefault(context.Context, *PackageRequest) (*PackageInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefault not implemented")
}
func (UnimplementedPackageServer) ChangeOrder(context.Context, *ChangePackageOrderRequest) (*PackageInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeOrder not implemented")
}
func (UnimplementedPackageServer) Get(context.Context, *PackageRequest) (*PackageInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPackageServer) List(context.Context, *PackageSearchQuery) (*PackagesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPackageServer) Stat(context.Context, *PackageStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedPackageServer) mustEmbedUnimplementedPackageServer() {}
func (UnimplementedPackageServer) testEmbeddedByValue()                 {}

// UnsafePackageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackageServer will
// result in compilation errors.
type UnsafePackageServer interface {
	mustEmbedUnimplementedPackageServer()
}

func RegisterPackageServer(s grpc.ServiceRegistrar, srv PackageServer) {
	// If the following call pancis, it indicates UnimplementedPackageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Package_ServiceDesc, srv)
}

func _Package_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Package_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServer).Create(ctx, req.(*CreatePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Package_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Package_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServer).Update(ctx, req.(*UpdatePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Package_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Package_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServer).Delete(ctx, req.(*PackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Package_SetDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServer).SetDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Package_SetDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServer).SetDefault(ctx, req.(*PackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Package_ChangeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePackageOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServer).ChangeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Package_ChangeOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServer).ChangeOrder(ctx, req.(*ChangePackageOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Package_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Package_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServer).Get(ctx, req.(*PackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Package_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageSearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Package_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServer).List(ctx, req.(*PackageSearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Package_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Package_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServer).Stat(ctx, req.(*PackageStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Package_ServiceDesc is the grpc.ServiceDesc for Package service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Package_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.identity.v2.Package",
	HandlerType: (*PackageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Package_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _Package_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Package_Delete_Handler,
		},
		{
			MethodName: "set_default",
			Handler:    _Package_SetDefault_Handler,
		},
		{
			MethodName: "change_order",
			Handler:    _Package_ChangeOrder_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Package_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Package_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _Package_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/identity/v2/package.proto",
}
