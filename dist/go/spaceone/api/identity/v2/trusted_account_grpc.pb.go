// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: spaceone/api/identity/v2/trusted_account.proto

package v2

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TrustedServiceAccount_Create_FullMethodName = "/spaceone.api.identity.v2.TrustedServiceAccount/create"
	TrustedServiceAccount_Update_FullMethodName = "/spaceone.api.identity.v2.TrustedServiceAccount/update"
	TrustedServiceAccount_Delete_FullMethodName = "/spaceone.api.identity.v2.TrustedServiceAccount/delete"
	TrustedServiceAccount_Get_FullMethodName    = "/spaceone.api.identity.v2.TrustedServiceAccount/get"
	TrustedServiceAccount_List_FullMethodName   = "/spaceone.api.identity.v2.TrustedServiceAccount/list"
	TrustedServiceAccount_Stat_FullMethodName   = "/spaceone.api.identity.v2.TrustedServiceAccount/stat"
)

// TrustedServiceAccountClient is the client API for TrustedServiceAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrustedServiceAccountClient interface {
	Create(ctx context.Context, in *CreateTrustedServiceAccountRequest, opts ...grpc.CallOption) (*TrustedServiceAccountInfo, error)
	Update(ctx context.Context, in *UpdateTrustedServiceAccountRequest, opts ...grpc.CallOption) (*TrustedServiceAccountInfo, error)
	Delete(ctx context.Context, in *TrustedServiceAccountRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *TrustedServiceAccountRequest, opts ...grpc.CallOption) (*TrustedServiceAccountInfo, error)
	List(ctx context.Context, in *TrustedServiceAccountSearchQuery, opts ...grpc.CallOption) (*TrustedServiceAccountsInfo, error)
	Stat(ctx context.Context, in *TrustedServiceAccountStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type trustedServiceAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewTrustedServiceAccountClient(cc grpc.ClientConnInterface) TrustedServiceAccountClient {
	return &trustedServiceAccountClient{cc}
}

func (c *trustedServiceAccountClient) Create(ctx context.Context, in *CreateTrustedServiceAccountRequest, opts ...grpc.CallOption) (*TrustedServiceAccountInfo, error) {
	out := new(TrustedServiceAccountInfo)
	err := c.cc.Invoke(ctx, TrustedServiceAccount_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustedServiceAccountClient) Update(ctx context.Context, in *UpdateTrustedServiceAccountRequest, opts ...grpc.CallOption) (*TrustedServiceAccountInfo, error) {
	out := new(TrustedServiceAccountInfo)
	err := c.cc.Invoke(ctx, TrustedServiceAccount_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustedServiceAccountClient) Delete(ctx context.Context, in *TrustedServiceAccountRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, TrustedServiceAccount_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustedServiceAccountClient) Get(ctx context.Context, in *TrustedServiceAccountRequest, opts ...grpc.CallOption) (*TrustedServiceAccountInfo, error) {
	out := new(TrustedServiceAccountInfo)
	err := c.cc.Invoke(ctx, TrustedServiceAccount_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustedServiceAccountClient) List(ctx context.Context, in *TrustedServiceAccountSearchQuery, opts ...grpc.CallOption) (*TrustedServiceAccountsInfo, error) {
	out := new(TrustedServiceAccountsInfo)
	err := c.cc.Invoke(ctx, TrustedServiceAccount_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustedServiceAccountClient) Stat(ctx context.Context, in *TrustedServiceAccountStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, TrustedServiceAccount_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrustedServiceAccountServer is the server API for TrustedServiceAccount service.
// All implementations must embed UnimplementedTrustedServiceAccountServer
// for forward compatibility
type TrustedServiceAccountServer interface {
	Create(context.Context, *CreateTrustedServiceAccountRequest) (*TrustedServiceAccountInfo, error)
	Update(context.Context, *UpdateTrustedServiceAccountRequest) (*TrustedServiceAccountInfo, error)
	Delete(context.Context, *TrustedServiceAccountRequest) (*empty.Empty, error)
	Get(context.Context, *TrustedServiceAccountRequest) (*TrustedServiceAccountInfo, error)
	List(context.Context, *TrustedServiceAccountSearchQuery) (*TrustedServiceAccountsInfo, error)
	Stat(context.Context, *TrustedServiceAccountStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedTrustedServiceAccountServer()
}

// UnimplementedTrustedServiceAccountServer must be embedded to have forward compatible implementations.
type UnimplementedTrustedServiceAccountServer struct {
}

func (UnimplementedTrustedServiceAccountServer) Create(context.Context, *CreateTrustedServiceAccountRequest) (*TrustedServiceAccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTrustedServiceAccountServer) Update(context.Context, *UpdateTrustedServiceAccountRequest) (*TrustedServiceAccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTrustedServiceAccountServer) Delete(context.Context, *TrustedServiceAccountRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTrustedServiceAccountServer) Get(context.Context, *TrustedServiceAccountRequest) (*TrustedServiceAccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTrustedServiceAccountServer) List(context.Context, *TrustedServiceAccountSearchQuery) (*TrustedServiceAccountsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTrustedServiceAccountServer) Stat(context.Context, *TrustedServiceAccountStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedTrustedServiceAccountServer) mustEmbedUnimplementedTrustedServiceAccountServer() {}

// UnsafeTrustedServiceAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrustedServiceAccountServer will
// result in compilation errors.
type UnsafeTrustedServiceAccountServer interface {
	mustEmbedUnimplementedTrustedServiceAccountServer()
}

func RegisterTrustedServiceAccountServer(s grpc.ServiceRegistrar, srv TrustedServiceAccountServer) {
	s.RegisterService(&TrustedServiceAccount_ServiceDesc, srv)
}

func _TrustedServiceAccount_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrustedServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedServiceAccountServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustedServiceAccount_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedServiceAccountServer).Create(ctx, req.(*CreateTrustedServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustedServiceAccount_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrustedServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedServiceAccountServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustedServiceAccount_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedServiceAccountServer).Update(ctx, req.(*UpdateTrustedServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustedServiceAccount_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrustedServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedServiceAccountServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustedServiceAccount_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedServiceAccountServer).Delete(ctx, req.(*TrustedServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustedServiceAccount_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrustedServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedServiceAccountServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustedServiceAccount_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedServiceAccountServer).Get(ctx, req.(*TrustedServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustedServiceAccount_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrustedServiceAccountSearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedServiceAccountServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustedServiceAccount_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedServiceAccountServer).List(ctx, req.(*TrustedServiceAccountSearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustedServiceAccount_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrustedServiceAccountStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustedServiceAccountServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustedServiceAccount_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustedServiceAccountServer).Stat(ctx, req.(*TrustedServiceAccountStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// TrustedServiceAccount_ServiceDesc is the grpc.ServiceDesc for TrustedServiceAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrustedServiceAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.identity.v2.TrustedServiceAccount",
	HandlerType: (*TrustedServiceAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _TrustedServiceAccount_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _TrustedServiceAccount_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _TrustedServiceAccount_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _TrustedServiceAccount_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _TrustedServiceAccount_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _TrustedServiceAccount_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/identity/v2/trusted_account.proto",
}
