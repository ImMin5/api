// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/identity/v2/user_profile.proto

package v2

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserProfile_Update_FullMethodName             = "/spaceone.api.identity.v2.UserProfile/update"
	UserProfile_UpdatePassword_FullMethodName     = "/spaceone.api.identity.v2.UserProfile/update_password"
	UserProfile_VerifyEmail_FullMethodName        = "/spaceone.api.identity.v2.UserProfile/verify_email"
	UserProfile_ConfirmEmail_FullMethodName       = "/spaceone.api.identity.v2.UserProfile/confirm_email"
	UserProfile_ResetPassword_FullMethodName      = "/spaceone.api.identity.v2.UserProfile/reset_password"
	UserProfile_EnableMfa_FullMethodName          = "/spaceone.api.identity.v2.UserProfile/enable_mfa"
	UserProfile_DisableMfa_FullMethodName         = "/spaceone.api.identity.v2.UserProfile/disable_mfa"
	UserProfile_ConfirmMfa_FullMethodName         = "/spaceone.api.identity.v2.UserProfile/confirm_mfa"
	UserProfile_Get_FullMethodName                = "/spaceone.api.identity.v2.UserProfile/get"
	UserProfile_GetWorkspaces_FullMethodName      = "/spaceone.api.identity.v2.UserProfile/get_workspaces"
	UserProfile_GetWorkspaceGroups_FullMethodName = "/spaceone.api.identity.v2.UserProfile/get_workspace_groups"
)

// UserProfileClient is the client API for UserProfile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserProfileClient interface {
	Update(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UserInfo, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordUserProfileRequest, opts ...grpc.CallOption) (*UserInfo, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ConfirmEmail(ctx context.Context, in *ConfirmEmailRequest, opts ...grpc.CallOption) (*UserInfo, error)
	// +noauth
	ResetPassword(ctx context.Context, in *UserPasswordResetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Enable MFA for user. If this api is called, send email to user.
	EnableMfa(ctx context.Context, in *EnableMFARequest, opts ...grpc.CallOption) (*UserInfo, error)
	// Disable MFA for user. If this api is called, send email to user.
	DisableMfa(ctx context.Context, in *DisableMFARequest, opts ...grpc.CallOption) (*UserInfo, error)
	// Confirm MFA for user by given verify_code which is sent by your authentication method.
	ConfirmMfa(ctx context.Context, in *ConfirmMFARequest, opts ...grpc.CallOption) (*UserInfo, error)
	Get(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserInfo, error)
	GetWorkspaces(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*MyWorkspacesInfo, error)
	GetWorkspaceGroups(ctx context.Context, in *WorkspaceGroupUserProfileRequest, opts ...grpc.CallOption) (*MyWorkspaceGroupsInfo, error)
}

type userProfileClient struct {
	cc grpc.ClientConnInterface
}

func NewUserProfileClient(cc grpc.ClientConnInterface) UserProfileClient {
	return &userProfileClient{cc}
}

func (c *userProfileClient) Update(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, UserProfile_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileClient) UpdatePassword(ctx context.Context, in *UpdatePasswordUserProfileRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, UserProfile_UpdatePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, UserProfile_VerifyEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileClient) ConfirmEmail(ctx context.Context, in *ConfirmEmailRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, UserProfile_ConfirmEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileClient) ResetPassword(ctx context.Context, in *UserPasswordResetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, UserProfile_ResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileClient) EnableMfa(ctx context.Context, in *EnableMFARequest, opts ...grpc.CallOption) (*UserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, UserProfile_EnableMfa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileClient) DisableMfa(ctx context.Context, in *DisableMFARequest, opts ...grpc.CallOption) (*UserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, UserProfile_DisableMfa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileClient) ConfirmMfa(ctx context.Context, in *ConfirmMFARequest, opts ...grpc.CallOption) (*UserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, UserProfile_ConfirmMfa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileClient) Get(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, UserProfile_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileClient) GetWorkspaces(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*MyWorkspacesInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MyWorkspacesInfo)
	err := c.cc.Invoke(ctx, UserProfile_GetWorkspaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProfileClient) GetWorkspaceGroups(ctx context.Context, in *WorkspaceGroupUserProfileRequest, opts ...grpc.CallOption) (*MyWorkspaceGroupsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MyWorkspaceGroupsInfo)
	err := c.cc.Invoke(ctx, UserProfile_GetWorkspaceGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserProfileServer is the server API for UserProfile service.
// All implementations must embed UnimplementedUserProfileServer
// for forward compatibility.
type UserProfileServer interface {
	Update(context.Context, *UpdateUserProfileRequest) (*UserInfo, error)
	UpdatePassword(context.Context, *UpdatePasswordUserProfileRequest) (*UserInfo, error)
	VerifyEmail(context.Context, *VerifyEmailRequest) (*empty.Empty, error)
	ConfirmEmail(context.Context, *ConfirmEmailRequest) (*UserInfo, error)
	// +noauth
	ResetPassword(context.Context, *UserPasswordResetRequest) (*empty.Empty, error)
	// Enable MFA for user. If this api is called, send email to user.
	EnableMfa(context.Context, *EnableMFARequest) (*UserInfo, error)
	// Disable MFA for user. If this api is called, send email to user.
	DisableMfa(context.Context, *DisableMFARequest) (*UserInfo, error)
	// Confirm MFA for user by given verify_code which is sent by your authentication method.
	ConfirmMfa(context.Context, *ConfirmMFARequest) (*UserInfo, error)
	Get(context.Context, *UserProfileRequest) (*UserInfo, error)
	GetWorkspaces(context.Context, *UserProfileRequest) (*MyWorkspacesInfo, error)
	GetWorkspaceGroups(context.Context, *WorkspaceGroupUserProfileRequest) (*MyWorkspaceGroupsInfo, error)
	mustEmbedUnimplementedUserProfileServer()
}

// UnimplementedUserProfileServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserProfileServer struct{}

func (UnimplementedUserProfileServer) Update(context.Context, *UpdateUserProfileRequest) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserProfileServer) UpdatePassword(context.Context, *UpdatePasswordUserProfileRequest) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedUserProfileServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedUserProfileServer) ConfirmEmail(context.Context, *ConfirmEmailRequest) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmEmail not implemented")
}
func (UnimplementedUserProfileServer) ResetPassword(context.Context, *UserPasswordResetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedUserProfileServer) EnableMfa(context.Context, *EnableMFARequest) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableMfa not implemented")
}
func (UnimplementedUserProfileServer) DisableMfa(context.Context, *DisableMFARequest) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableMfa not implemented")
}
func (UnimplementedUserProfileServer) ConfirmMfa(context.Context, *ConfirmMFARequest) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmMfa not implemented")
}
func (UnimplementedUserProfileServer) Get(context.Context, *UserProfileRequest) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserProfileServer) GetWorkspaces(context.Context, *UserProfileRequest) (*MyWorkspacesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaces not implemented")
}
func (UnimplementedUserProfileServer) GetWorkspaceGroups(context.Context, *WorkspaceGroupUserProfileRequest) (*MyWorkspaceGroupsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceGroups not implemented")
}
func (UnimplementedUserProfileServer) mustEmbedUnimplementedUserProfileServer() {}
func (UnimplementedUserProfileServer) testEmbeddedByValue()                     {}

// UnsafeUserProfileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserProfileServer will
// result in compilation errors.
type UnsafeUserProfileServer interface {
	mustEmbedUnimplementedUserProfileServer()
}

func RegisterUserProfileServer(s grpc.ServiceRegistrar, srv UserProfileServer) {
	// If the following call pancis, it indicates UnimplementedUserProfileServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserProfile_ServiceDesc, srv)
}

func _UserProfile_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProfile_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).Update(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfile_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProfile_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).UpdatePassword(ctx, req.(*UpdatePasswordUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfile_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProfile_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfile_ConfirmEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).ConfirmEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProfile_ConfirmEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).ConfirmEmail(ctx, req.(*ConfirmEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfile_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProfile_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).ResetPassword(ctx, req.(*UserPasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfile_EnableMfa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableMFARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).EnableMfa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProfile_EnableMfa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).EnableMfa(ctx, req.(*EnableMFARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfile_DisableMfa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableMFARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).DisableMfa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProfile_DisableMfa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).DisableMfa(ctx, req.(*DisableMFARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfile_ConfirmMfa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmMFARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).ConfirmMfa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProfile_ConfirmMfa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).ConfirmMfa(ctx, req.(*ConfirmMFARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfile_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProfile_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).Get(ctx, req.(*UserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfile_GetWorkspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).GetWorkspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProfile_GetWorkspaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).GetWorkspaces(ctx, req.(*UserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProfile_GetWorkspaceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceGroupUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProfileServer).GetWorkspaceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProfile_GetWorkspaceGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProfileServer).GetWorkspaceGroups(ctx, req.(*WorkspaceGroupUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserProfile_ServiceDesc is the grpc.ServiceDesc for UserProfile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserProfile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.identity.v2.UserProfile",
	HandlerType: (*UserProfileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "update",
			Handler:    _UserProfile_Update_Handler,
		},
		{
			MethodName: "update_password",
			Handler:    _UserProfile_UpdatePassword_Handler,
		},
		{
			MethodName: "verify_email",
			Handler:    _UserProfile_VerifyEmail_Handler,
		},
		{
			MethodName: "confirm_email",
			Handler:    _UserProfile_ConfirmEmail_Handler,
		},
		{
			MethodName: "reset_password",
			Handler:    _UserProfile_ResetPassword_Handler,
		},
		{
			MethodName: "enable_mfa",
			Handler:    _UserProfile_EnableMfa_Handler,
		},
		{
			MethodName: "disable_mfa",
			Handler:    _UserProfile_DisableMfa_Handler,
		},
		{
			MethodName: "confirm_mfa",
			Handler:    _UserProfile_ConfirmMfa_Handler,
		},
		{
			MethodName: "get",
			Handler:    _UserProfile_Get_Handler,
		},
		{
			MethodName: "get_workspaces",
			Handler:    _UserProfile_GetWorkspaces_Handler,
		},
		{
			MethodName: "get_workspace_groups",
			Handler:    _UserProfile_GetWorkspaceGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/identity/v2/user_profile.proto",
}
