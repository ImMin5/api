// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: spaceone/api/identity/v2/workspace_user.proto

package v2

import (
	context "context"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkspaceUser_Create_FullMethodName = "/spaceone.api.identity.v2.WorkspaceUser/create"
	WorkspaceUser_Get_FullMethodName    = "/spaceone.api.identity.v2.WorkspaceUser/get"
	WorkspaceUser_List_FullMethodName   = "/spaceone.api.identity.v2.WorkspaceUser/list"
	WorkspaceUser_Stat_FullMethodName   = "/spaceone.api.identity.v2.WorkspaceUser/stat"
)

// WorkspaceUserClient is the client API for WorkspaceUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspaceUserClient interface {
	Create(ctx context.Context, in *CreateWorkspaceUserRequest, opts ...grpc.CallOption) (*WorkspaceUserInfo, error)
	Get(ctx context.Context, in *WorkspaceUserRequest, opts ...grpc.CallOption) (*WorkspaceUserInfo, error)
	List(ctx context.Context, in *WorkspaceUserSearchQuery, opts ...grpc.CallOption) (*WorkspaceUsersInfo, error)
	Stat(ctx context.Context, in *WorkspaceUserStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type workspaceUserClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceUserClient(cc grpc.ClientConnInterface) WorkspaceUserClient {
	return &workspaceUserClient{cc}
}

func (c *workspaceUserClient) Create(ctx context.Context, in *CreateWorkspaceUserRequest, opts ...grpc.CallOption) (*WorkspaceUserInfo, error) {
	out := new(WorkspaceUserInfo)
	err := c.cc.Invoke(ctx, WorkspaceUser_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceUserClient) Get(ctx context.Context, in *WorkspaceUserRequest, opts ...grpc.CallOption) (*WorkspaceUserInfo, error) {
	out := new(WorkspaceUserInfo)
	err := c.cc.Invoke(ctx, WorkspaceUser_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceUserClient) List(ctx context.Context, in *WorkspaceUserSearchQuery, opts ...grpc.CallOption) (*WorkspaceUsersInfo, error) {
	out := new(WorkspaceUsersInfo)
	err := c.cc.Invoke(ctx, WorkspaceUser_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceUserClient) Stat(ctx context.Context, in *WorkspaceUserStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, WorkspaceUser_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspaceUserServer is the server API for WorkspaceUser service.
// All implementations must embed UnimplementedWorkspaceUserServer
// for forward compatibility
type WorkspaceUserServer interface {
	Create(context.Context, *CreateWorkspaceUserRequest) (*WorkspaceUserInfo, error)
	Get(context.Context, *WorkspaceUserRequest) (*WorkspaceUserInfo, error)
	List(context.Context, *WorkspaceUserSearchQuery) (*WorkspaceUsersInfo, error)
	Stat(context.Context, *WorkspaceUserStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedWorkspaceUserServer()
}

// UnimplementedWorkspaceUserServer must be embedded to have forward compatible implementations.
type UnimplementedWorkspaceUserServer struct {
}

func (UnimplementedWorkspaceUserServer) Create(context.Context, *CreateWorkspaceUserRequest) (*WorkspaceUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWorkspaceUserServer) Get(context.Context, *WorkspaceUserRequest) (*WorkspaceUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWorkspaceUserServer) List(context.Context, *WorkspaceUserSearchQuery) (*WorkspaceUsersInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWorkspaceUserServer) Stat(context.Context, *WorkspaceUserStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedWorkspaceUserServer) mustEmbedUnimplementedWorkspaceUserServer() {}

// UnsafeWorkspaceUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspaceUserServer will
// result in compilation errors.
type UnsafeWorkspaceUserServer interface {
	mustEmbedUnimplementedWorkspaceUserServer()
}

func RegisterWorkspaceUserServer(s grpc.ServiceRegistrar, srv WorkspaceUserServer) {
	s.RegisterService(&WorkspaceUser_ServiceDesc, srv)
}

func _WorkspaceUser_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkspaceUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceUserServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceUser_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceUserServer).Create(ctx, req.(*CreateWorkspaceUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceUser_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceUserServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceUser_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceUserServer).Get(ctx, req.(*WorkspaceUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceUser_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceUserSearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceUserServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceUser_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceUserServer).List(ctx, req.(*WorkspaceUserSearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceUser_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceUserStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceUserServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkspaceUser_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceUserServer).Stat(ctx, req.(*WorkspaceUserStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkspaceUser_ServiceDesc is the grpc.ServiceDesc for WorkspaceUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkspaceUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.identity.v2.WorkspaceUser",
	HandlerType: (*WorkspaceUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _WorkspaceUser_Create_Handler,
		},
		{
			MethodName: "get",
			Handler:    _WorkspaceUser_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _WorkspaceUser_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _WorkspaceUser_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/identity/v2/workspace_user.proto",
}
