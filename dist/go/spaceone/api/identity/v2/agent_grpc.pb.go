// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: spaceone/api/identity/v2/agent.proto

package v2

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Agent_Create_FullMethodName     = "/spaceone.api.identity.v2.Agent/create"
	Agent_Enable_FullMethodName     = "/spaceone.api.identity.v2.Agent/enable"
	Agent_Disable_FullMethodName    = "/spaceone.api.identity.v2.Agent/disable"
	Agent_Regenerate_FullMethodName = "/spaceone.api.identity.v2.Agent/regenerate"
	Agent_Delete_FullMethodName     = "/spaceone.api.identity.v2.Agent/delete"
	Agent_Get_FullMethodName        = "/spaceone.api.identity.v2.Agent/get"
	Agent_List_FullMethodName       = "/spaceone.api.identity.v2.Agent/list"
)

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	Create(ctx context.Context, in *CreateAgentRequest, opts ...grpc.CallOption) (*AgentInfo, error)
	Enable(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentInfo, error)
	Disable(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentInfo, error)
	Regenerate(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentInfo, error)
	Delete(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentInfo, error)
	List(ctx context.Context, in *AgentSearchQuery, opts ...grpc.CallOption) (*AgentsInfo, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) Create(ctx context.Context, in *CreateAgentRequest, opts ...grpc.CallOption) (*AgentInfo, error) {
	out := new(AgentInfo)
	err := c.cc.Invoke(ctx, Agent_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Enable(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentInfo, error) {
	out := new(AgentInfo)
	err := c.cc.Invoke(ctx, Agent_Enable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Disable(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentInfo, error) {
	out := new(AgentInfo)
	err := c.cc.Invoke(ctx, Agent_Disable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Regenerate(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentInfo, error) {
	out := new(AgentInfo)
	err := c.cc.Invoke(ctx, Agent_Regenerate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Delete(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Agent_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Get(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentInfo, error) {
	out := new(AgentInfo)
	err := c.cc.Invoke(ctx, Agent_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) List(ctx context.Context, in *AgentSearchQuery, opts ...grpc.CallOption) (*AgentsInfo, error) {
	out := new(AgentsInfo)
	err := c.cc.Invoke(ctx, Agent_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	Create(context.Context, *CreateAgentRequest) (*AgentInfo, error)
	Enable(context.Context, *AgentRequest) (*AgentInfo, error)
	Disable(context.Context, *AgentRequest) (*AgentInfo, error)
	Regenerate(context.Context, *AgentRequest) (*AgentInfo, error)
	Delete(context.Context, *AgentRequest) (*empty.Empty, error)
	Get(context.Context, *AgentRequest) (*AgentInfo, error)
	List(context.Context, *AgentSearchQuery) (*AgentsInfo, error)
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) Create(context.Context, *CreateAgentRequest) (*AgentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAgentServer) Enable(context.Context, *AgentRequest) (*AgentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedAgentServer) Disable(context.Context, *AgentRequest) (*AgentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedAgentServer) Regenerate(context.Context, *AgentRequest) (*AgentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Regenerate not implemented")
}
func (UnimplementedAgentServer) Delete(context.Context, *AgentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAgentServer) Get(context.Context, *AgentRequest) (*AgentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAgentServer) List(context.Context, *AgentSearchQuery) (*AgentsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Create(ctx, req.(*CreateAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_Enable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Enable(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Disable(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Regenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Regenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_Regenerate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Regenerate(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Delete(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Get(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentSearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).List(ctx, req.(*AgentSearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.identity.v2.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Agent_Create_Handler,
		},
		{
			MethodName: "enable",
			Handler:    _Agent_Enable_Handler,
		},
		{
			MethodName: "disable",
			Handler:    _Agent_Disable_Handler,
		},
		{
			MethodName: "regenerate",
			Handler:    _Agent_Regenerate_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Agent_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Agent_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Agent_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/identity/v2/agent.proto",
}
