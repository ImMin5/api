// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.6.1
// source: spaceone/api/identity/plugin/account_collector.proto

package plugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AccountCollector_Init_FullMethodName = "/spaceone.api.identity.plugin.AccountCollector/init"
	AccountCollector_Sync_FullMethodName = "/spaceone.api.identity.plugin.AccountCollector/sync"
)

// AccountCollectorClient is the client API for AccountCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountCollectorClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*PluginInfo, error)
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*AccountsInfo, error)
}

type accountCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountCollectorClient(cc grpc.ClientConnInterface) AccountCollectorClient {
	return &accountCollectorClient{cc}
}

func (c *accountCollectorClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*PluginInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PluginInfo)
	err := c.cc.Invoke(ctx, AccountCollector_Init_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountCollectorClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*AccountsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountsInfo)
	err := c.cc.Invoke(ctx, AccountCollector_Sync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountCollectorServer is the server API for AccountCollector service.
// All implementations must embed UnimplementedAccountCollectorServer
// for forward compatibility
type AccountCollectorServer interface {
	Init(context.Context, *InitRequest) (*PluginInfo, error)
	Sync(context.Context, *SyncRequest) (*AccountsInfo, error)
	mustEmbedUnimplementedAccountCollectorServer()
}

// UnimplementedAccountCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedAccountCollectorServer struct {
}

func (UnimplementedAccountCollectorServer) Init(context.Context, *InitRequest) (*PluginInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedAccountCollectorServer) Sync(context.Context, *SyncRequest) (*AccountsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedAccountCollectorServer) mustEmbedUnimplementedAccountCollectorServer() {}

// UnsafeAccountCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountCollectorServer will
// result in compilation errors.
type UnsafeAccountCollectorServer interface {
	mustEmbedUnimplementedAccountCollectorServer()
}

func RegisterAccountCollectorServer(s grpc.ServiceRegistrar, srv AccountCollectorServer) {
	s.RegisterService(&AccountCollector_ServiceDesc, srv)
}

func _AccountCollector_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountCollectorServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountCollector_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountCollectorServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountCollector_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountCollectorServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountCollector_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountCollectorServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountCollector_ServiceDesc is the grpc.ServiceDesc for AccountCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.identity.plugin.AccountCollector",
	HandlerType: (*AccountCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "init",
			Handler:    _AccountCollector_Init_Handler,
		},
		{
			MethodName: "sync",
			Handler:    _AccountCollector_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/identity/plugin/account_collector.proto",
}
