// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.6.1
// source: spaceone/api/cost_analysis/plugin/cost.proto

package plugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Cost_GetLinkedAccounts_FullMethodName = "/spaceone.api.cost_analysis.plugin.Cost/get_linked_accounts"
	Cost_GetData_FullMethodName           = "/spaceone.api.cost_analysis.plugin.Cost/get_data"
)

// CostClient is the client API for Cost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CostClient interface {
	GetLinkedAccounts(ctx context.Context, in *GetLinkedAccountsRequest, opts ...grpc.CallOption) (*AccountsInfo, error)
	GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (Cost_GetDataClient, error)
}

type costClient struct {
	cc grpc.ClientConnInterface
}

func NewCostClient(cc grpc.ClientConnInterface) CostClient {
	return &costClient{cc}
}

func (c *costClient) GetLinkedAccounts(ctx context.Context, in *GetLinkedAccountsRequest, opts ...grpc.CallOption) (*AccountsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountsInfo)
	err := c.cc.Invoke(ctx, Cost_GetLinkedAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (Cost_GetDataClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cost_ServiceDesc.Streams[0], Cost_GetData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &costGetDataClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cost_GetDataClient interface {
	Recv() (*CostsInfo, error)
	grpc.ClientStream
}

type costGetDataClient struct {
	grpc.ClientStream
}

func (x *costGetDataClient) Recv() (*CostsInfo, error) {
	m := new(CostsInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CostServer is the server API for Cost service.
// All implementations must embed UnimplementedCostServer
// for forward compatibility
type CostServer interface {
	GetLinkedAccounts(context.Context, *GetLinkedAccountsRequest) (*AccountsInfo, error)
	GetData(*GetDataRequest, Cost_GetDataServer) error
	mustEmbedUnimplementedCostServer()
}

// UnimplementedCostServer must be embedded to have forward compatible implementations.
type UnimplementedCostServer struct {
}

func (UnimplementedCostServer) GetLinkedAccounts(context.Context, *GetLinkedAccountsRequest) (*AccountsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkedAccounts not implemented")
}
func (UnimplementedCostServer) GetData(*GetDataRequest, Cost_GetDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedCostServer) mustEmbedUnimplementedCostServer() {}

// UnsafeCostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CostServer will
// result in compilation errors.
type UnsafeCostServer interface {
	mustEmbedUnimplementedCostServer()
}

func RegisterCostServer(s grpc.ServiceRegistrar, srv CostServer) {
	s.RegisterService(&Cost_ServiceDesc, srv)
}

func _Cost_GetLinkedAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkedAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetLinkedAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cost_GetLinkedAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetLinkedAccounts(ctx, req.(*GetLinkedAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_GetData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CostServer).GetData(m, &costGetDataServer{ServerStream: stream})
}

type Cost_GetDataServer interface {
	Send(*CostsInfo) error
	grpc.ServerStream
}

type costGetDataServer struct {
	grpc.ServerStream
}

func (x *costGetDataServer) Send(m *CostsInfo) error {
	return x.ServerStream.SendMsg(m)
}

// Cost_ServiceDesc is the grpc.ServiceDesc for Cost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.cost_analysis.plugin.Cost",
	HandlerType: (*CostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_linked_accounts",
			Handler:    _Cost_GetLinkedAccounts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "get_data",
			Handler:       _Cost_GetData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spaceone/api/cost_analysis/plugin/cost.proto",
}
