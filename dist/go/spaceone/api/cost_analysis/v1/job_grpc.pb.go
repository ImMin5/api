//
//desc: A Job is an act of collecting external cost data through plugins. The data to collect is defined in a plugin.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: spaceone/api/cost_analysis/v1/job.proto

package v1

import (
	context "context"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Job_Cancel_FullMethodName = "/spaceone.api.cost_analysis.v1.Job/cancel"
	Job_Get_FullMethodName    = "/spaceone.api.cost_analysis.v1.Job/get"
	Job_List_FullMethodName   = "/spaceone.api.cost_analysis.v1.Job/list"
	Job_Stat_FullMethodName   = "/spaceone.api.cost_analysis.v1.Job/stat"
)

// JobClient is the client API for Job service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobClient interface {
	// desc: Cancels a specific Job. You can manually cease a Job in run with this method.
	// request_example: >-
	// {
	// "job_id": "job-07994c7c9021"
	// }
	// response_example: >-
	// {
	// "job_id": "job-07994c7c9021",
	// "status": "CANCELED",
	// "options": {
	// "no_preload_cache": false,
	// "start": "2021-01-01T00:00:00Z"
	// },
	// "total_tasks": 2,
	// "remained_tasks": 2,
	// "data_source_id": "ds-fcba92ca73b1",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-04-02T09:17:44.031Z",
	// "updated_at": "2022-04-02T09:19:47.715Z",
	// "finished_at": "2022-04-02T09:19:47.715Z",
	// "changed": [
	// {
	// "start": "2021-01-01T00:00:00.000Z"
	// }
	// ]
	// }
	Cancel(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobInfo, error)
	// desc: Gets a specific Job. Prints detailed information about the Job, including the plugin used, operation time, and `status`.
	// request_example: >-
	// {
	// "job_id": "job-85cf2c385252"
	// }
	// response_example: >-
	// {
	// "job_id": "job-85cf2c385252",
	// "status": "SUCCESS",
	// "options": {
	// "no_preload_cache": false,
	// "start": null
	// },
	// "total_tasks": 1,
	// "data_source_id": "ds-c96609f5afeb",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-07-17T16:00:08.254Z",
	// "updated_at": "2022-07-17T16:01:30.637Z",
	// "finished_at": "2022-07-17T16:01:30.637Z",
	// "changed": [
	// {
	// "start": "2022-07-01T00:00:00.000Z"
	// }
	// ]
	// }
	Get(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*JobInfo, error)
	// desc: Gets a list of all Jobs. You can use a query to get a filtered list of Jobs.
	// request_example: >-
	// {
	// "query": {}
	// }
	// response_example: >-
	// {
	// "results": [
	// {
	// "job_id": "job-85cf2c385252",
	// "status": "SUCCESS",
	// "options": {
	// "start": null,
	// "no_preload_cache": false
	// },
	// "total_tasks": 1,
	// "data_source_id": "ds-c96609f5afeb",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-07-17T16:00:08.254Z",
	// "updated_at": "2022-07-17T16:01:30.637Z",
	// "finished_at": "2022-07-17T16:01:30.637Z",
	// "changed": [
	// {
	// "start": "2022-07-01T00:00:00.000Z"
	// }
	// ]
	// },
	// {
	// "job_id": "job-6b6765f757a9",
	// "status": "SUCCESS",
	// "options": {
	// "start": null,
	// "no_preload_cache": false
	// },
	// "total_tasks": 2,
	// "data_source_id": "ds-fcba92ca73b1",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-07-17T16:00:05.077Z",
	// "updated_at": "2022-07-17T16:01:28.206Z",
	// "finished_at": "2022-07-17T16:01:28.206Z",
	// "changed": [
	// {
	// "start": "2022-07-01T00:00:00.000Z"
	// }
	// ]
	// }
	// ],
	// "total_count": 372
	// }
	List(ctx context.Context, in *JobQuery, opts ...grpc.CallOption) (*JobsInfo, error)
	Stat(ctx context.Context, in *JobStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type jobClient struct {
	cc grpc.ClientConnInterface
}

func NewJobClient(cc grpc.ClientConnInterface) JobClient {
	return &jobClient{cc}
}

func (c *jobClient) Cancel(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := c.cc.Invoke(ctx, Job_Cancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) Get(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := c.cc.Invoke(ctx, Job_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) List(ctx context.Context, in *JobQuery, opts ...grpc.CallOption) (*JobsInfo, error) {
	out := new(JobsInfo)
	err := c.cc.Invoke(ctx, Job_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) Stat(ctx context.Context, in *JobStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Job_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobServer is the server API for Job service.
// All implementations must embed UnimplementedJobServer
// for forward compatibility
type JobServer interface {
	// desc: Cancels a specific Job. You can manually cease a Job in run with this method.
	// request_example: >-
	// {
	// "job_id": "job-07994c7c9021"
	// }
	// response_example: >-
	// {
	// "job_id": "job-07994c7c9021",
	// "status": "CANCELED",
	// "options": {
	// "no_preload_cache": false,
	// "start": "2021-01-01T00:00:00Z"
	// },
	// "total_tasks": 2,
	// "remained_tasks": 2,
	// "data_source_id": "ds-fcba92ca73b1",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-04-02T09:17:44.031Z",
	// "updated_at": "2022-04-02T09:19:47.715Z",
	// "finished_at": "2022-04-02T09:19:47.715Z",
	// "changed": [
	// {
	// "start": "2021-01-01T00:00:00.000Z"
	// }
	// ]
	// }
	Cancel(context.Context, *JobRequest) (*JobInfo, error)
	// desc: Gets a specific Job. Prints detailed information about the Job, including the plugin used, operation time, and `status`.
	// request_example: >-
	// {
	// "job_id": "job-85cf2c385252"
	// }
	// response_example: >-
	// {
	// "job_id": "job-85cf2c385252",
	// "status": "SUCCESS",
	// "options": {
	// "no_preload_cache": false,
	// "start": null
	// },
	// "total_tasks": 1,
	// "data_source_id": "ds-c96609f5afeb",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-07-17T16:00:08.254Z",
	// "updated_at": "2022-07-17T16:01:30.637Z",
	// "finished_at": "2022-07-17T16:01:30.637Z",
	// "changed": [
	// {
	// "start": "2022-07-01T00:00:00.000Z"
	// }
	// ]
	// }
	Get(context.Context, *GetJobRequest) (*JobInfo, error)
	// desc: Gets a list of all Jobs. You can use a query to get a filtered list of Jobs.
	// request_example: >-
	// {
	// "query": {}
	// }
	// response_example: >-
	// {
	// "results": [
	// {
	// "job_id": "job-85cf2c385252",
	// "status": "SUCCESS",
	// "options": {
	// "start": null,
	// "no_preload_cache": false
	// },
	// "total_tasks": 1,
	// "data_source_id": "ds-c96609f5afeb",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-07-17T16:00:08.254Z",
	// "updated_at": "2022-07-17T16:01:30.637Z",
	// "finished_at": "2022-07-17T16:01:30.637Z",
	// "changed": [
	// {
	// "start": "2022-07-01T00:00:00.000Z"
	// }
	// ]
	// },
	// {
	// "job_id": "job-6b6765f757a9",
	// "status": "SUCCESS",
	// "options": {
	// "start": null,
	// "no_preload_cache": false
	// },
	// "total_tasks": 2,
	// "data_source_id": "ds-fcba92ca73b1",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-07-17T16:00:05.077Z",
	// "updated_at": "2022-07-17T16:01:28.206Z",
	// "finished_at": "2022-07-17T16:01:28.206Z",
	// "changed": [
	// {
	// "start": "2022-07-01T00:00:00.000Z"
	// }
	// ]
	// }
	// ],
	// "total_count": 372
	// }
	List(context.Context, *JobQuery) (*JobsInfo, error)
	Stat(context.Context, *JobStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedJobServer()
}

// UnimplementedJobServer must be embedded to have forward compatible implementations.
type UnimplementedJobServer struct {
}

func (UnimplementedJobServer) Cancel(context.Context, *JobRequest) (*JobInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedJobServer) Get(context.Context, *GetJobRequest) (*JobInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedJobServer) List(context.Context, *JobQuery) (*JobsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedJobServer) Stat(context.Context, *JobStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedJobServer) mustEmbedUnimplementedJobServer() {}

// UnsafeJobServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobServer will
// result in compilation errors.
type UnsafeJobServer interface {
	mustEmbedUnimplementedJobServer()
}

func RegisterJobServer(s grpc.ServiceRegistrar, srv JobServer) {
	s.RegisterService(&Job_ServiceDesc, srv)
}

func _Job_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Job_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).Cancel(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Job_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).Get(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Job_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).List(ctx, req.(*JobQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Job_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).Stat(ctx, req.(*JobStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Job_ServiceDesc is the grpc.ServiceDesc for Job service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Job_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.cost_analysis.v1.Job",
	HandlerType: (*JobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "cancel",
			Handler:    _Job_Cancel_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Job_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Job_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _Job_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/cost_analysis/v1/job.proto",
}
