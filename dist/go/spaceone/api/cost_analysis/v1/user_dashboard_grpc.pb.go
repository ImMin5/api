//
//desc: A UserDashboard is a cost data dashboard customized with a combination of widgets a User want.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: spaceone/api/cost_analysis/v1/user_dashboard.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserDashboard_Create_FullMethodName = "/spaceone.api.cost_analysis.v1.UserDashboard/create"
	UserDashboard_Update_FullMethodName = "/spaceone.api.cost_analysis.v1.UserDashboard/update"
	UserDashboard_Delete_FullMethodName = "/spaceone.api.cost_analysis.v1.UserDashboard/delete"
	UserDashboard_Get_FullMethodName    = "/spaceone.api.cost_analysis.v1.UserDashboard/get"
	UserDashboard_List_FullMethodName   = "/spaceone.api.cost_analysis.v1.UserDashboard/list"
	UserDashboard_Stat_FullMethodName   = "/spaceone.api.cost_analysis.v1.UserDashboard/stat"
)

// UserDashboardClient is the client API for UserDashboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDashboardClient interface {
	// desc: Creates a new UserDashboard. Users can use the dashboard in `private`. In addition to the widgets provided by Cloudforet by default, Users can use widgets through the CustomWidget resource to create a UserDashboard that suits their needs.
	// request_example: >-
	// {
	// "name": "Untitled Dashboard",
	// "custom_layouts": [
	// [
	// {
	// "name": "AWS Data-Transfer Cost Trend",
	// "widget_id": "linegraph-lg-02",
	// "options": {
	// "layout": 100.0,
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_COST_TREND_DESC",
	// "chart_type": "LINE",
	// "chart_img": "AWS_Data-Transfer_Cost_Trend"
	// }
	// }
	// ],
	// [
	// {
	// "options": {
	// "chart_type": "MAP",
	// "chart_img": "AWS_Data-Transfer_By_Region",
	// "layout": 100.0,
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_BY_REGION_DESC"
	// },
	// "name": "AWS Data-Transfer by Region",
	// "widget_id": "map-lg-02"
	// }
	// ],
	// [
	// {
	// "options": {
	// "group_by": "project_id",
	// "layout": 100.0,
	// "chart_type": "STACKED_COLUMN",
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_CLOUDFRONT_COST_DESC",
	// "chart_img": "AWS_CloudFront_Cost"
	// },
	// "name": "AWS CloudFront Cost by Project",
	// "widget_id": "stackedcol-lg-03"
	// }
	// ]
	// ],
	// "default_filter": {},
	// "period_type": "AUTO"
	// }
	// response_example: >-
	// {
	// "user_dashboard_id": "user-dash-bf3f5f5ffa03",
	// "name": "Untitled Dashboard",
	// "custom_layouts": [
	// [
	// {
	// "options": {
	// "chart_type": "LINE",
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_COST_TREND_DESC",
	// "layout": 100.0,
	// "chart_img": "AWS_Data-Transfer_Cost_Trend"
	// },
	// "widget_id": "linegraph-lg-02",
	// "name": "AWS Data-Transfer Cost Trend"
	// }
	// ],
	// [
	// {
	// "name": "AWS Data-Transfer by Region",
	// "widget_id": "map-lg-02",
	// "options": {
	// "chart_img": "AWS_Data-Transfer_By_Region",
	// "chart_type": "MAP",
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_BY_REGION_DESC",
	// "layout": 100.0
	// }
	// }
	// ],
	// [
	// {
	// "widget_id": "stackedcol-lg-03",
	// "name": "AWS CloudFront Cost by Project",
	// "options": {
	// "layout": 100.0,
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_CLOUDFRONT_COST_DESC",
	// "chart_img": "AWS_CloudFront_Cost",
	// "group_by": "project_id",
	// "chart_type": "STACKED_COLUMN"
	// }
	// }
	// ]
	// ],
	// "default_filter": {},
	// "period_type": "AUTO",
	// "tags": {},
	// "user_id": "seolmin@mz.co.kr",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-07-19T05:58:52.065Z",
	// "updated_at": "2022-07-19T05:58:52.065Z"
	// }
	Create(ctx context.Context, in *CreateUserDashboardRequest, opts ...grpc.CallOption) (*UserDashboardInfo, error)
	// desc: Updates a specific UserDashboard. You can make changes in widgets, including default widgets and CustomWidegets.
	// request_example: >-
	// {
	// "user_dashboard_id": "user-dash-bf3f5f5ffa03",
	// "name": "Untitled Dashboard2",
	// "custom_layouts": [
	// [{
	// "options": {
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_COST_TREND_DESC",
	// "chart_type": "LINE", "chart_img": "AWS_Data-Transfer_Cost_Trend", "layout": 100.0},
	// "name": "AWS Data-Transfer Cost Trend",
	// "widget_id": "linegraph-lg-02"}],
	// [{
	// "name": "AWS Data-Transfer by Region",
	// "options": {
	// "chart_type": "MAP",
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_BY_REGION_DESC",
	// "layout": 100.0,
	// "chart_img": "AWS_Data-Transfer_By_Region"},
	// "widget_id": "map-lg-02"}],
	// [{
	// "name": "AWS CloudFront Cost by Project",
	// "widget_id": "stackedcol-lg-03",
	// "options": {
	// "layout": 100.0,
	// "chart_img": "AWS_CloudFront_Cost",
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_CLOUDFRONT_COST_DESC",
	// "chart_type": "STACKED_COLUMN",
	// "group_by": "project_id"}
	// }]
	// ]
	// }
	// response_example: >-
	// {
	// "user_dashboard_id": "user-dash-bf3f5f5ffa03",
	// "name": "Untitled Dashboard2",
	// "custom_layouts": [
	// [
	// {
	// "options": {
	// "chart_type": "LINE",
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_COST_TREND_DESC",
	// "layout": 100.0,
	// "chart_img": "AWS_Data-Transfer_Cost_Trend"
	// },
	// "widget_id": "linegraph-lg-02",
	// "name": "AWS Data-Transfer Cost Trend"
	// }
	// ],
	// [
	// {
	// "name": "AWS Data-Transfer by Region",
	// "widget_id": "map-lg-02",
	// "options": {
	// "chart_img": "AWS_Data-Transfer_By_Region",
	// "chart_type": "MAP",
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_BY_REGION_DESC",
	// "layout": 100.0
	// }
	// }
	// ],
	// [
	// {
	// "widget_id": "stackedcol-lg-03",
	// "name": "AWS CloudFront Cost by Project",
	// "options": {
	// "layout": 100.0,
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_CLOUDFRONT_COST_DESC",
	// "chart_img": "AWS_CloudFront_Cost",
	// "group_by": "project_id",
	// "chart_type": "STACKED_COLUMN"
	// }
	// }
	// ]
	// ],
	// "default_filter": {},
	// "period_type": "AUTO",
	// "tags": {},
	// "user_id": "seolmin@mz.co.kr",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-07-19T05:58:52.065Z",
	// "updated_at": "2022-07-19T05:58:52.065Z"
	// }
	Update(ctx context.Context, in *UpdateUserDashboardRequest, opts ...grpc.CallOption) (*UserDashboardInfo, error)
	// desc: Deletes a specific UserDashboard. You must specify the `user_dashboard_id` of the UserDashboard to delete.
	// request_example: >-
	// {
	// "user_dashboard_id": "user-dash-d1bd5d8cb6d7"
	// }
	Delete(ctx context.Context, in *UserDashboardRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// desc: Gets a specific UserDashboard. Prints detailed information about the UserDashboard, including widegts used.
	// request_example: >-
	// {
	// "user_dashboard_id": "user-dash-d1bd5d8cb6d7"
	// }
	// response_example: >-
	// {
	// "user_dashboard_id": "user-dash-d1bd5d8cb6d7",
	// "name": "11 Months Public Cloud Cost Summary",
	// "custom_layouts": [
	// [
	// {
	// "widget_id": "card-lg-01",
	// "options": {
	// "chart_type": "CARD",
	// "layout": 100.0
	// },
	// "name": "Budget Usage Summary"
	// }
	// ],
	// [
	// {
	// "options": {
	// "layout": 100.0,
	// "chart_type": "TABLE"
	// },
	// "name": "Project-wise Budget Usage Summary@@",
	// "widget_id": "table-lg-01"
	// }
	// ],
	// [
	// {
	// "name": "Cost Trend By Product",
	// "options": {
	// "chart_type": "STACKED_COLUMN",
	// "layout": 100.0,
	// "group_by": "product"
	// },
	// "widget_id": "stackedcol-lg-02"
	// }
	// ]
	// ],
	// "default_filter": {
	// "project_id": []
	// },
	// "period_type": "FIXED",
	// "period": {
	// "start": "2021-04-01",
	// "end": "2022-02-28"
	// },
	// "tags": {},
	// "user_id": "wanzargen@mz.co.kr",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-03-03T03:36:35.396Z",
	// "updated_at": "2022-03-03T03:36:35.396Z"
	// }
	Get(ctx context.Context, in *GetUserDashboardRequest, opts ...grpc.CallOption) (*UserDashboardInfo, error)
	// desc: Gets a list of all UserDashboards. You can use a query to get a filtered list of UserDashboards.
	// request_example: >-
	// {
	// "query": {}
	// }
	// response_example: >-
	// {
	// "results": [
	// {
	// "user_dashboard_id": "user-dash-d1bd5d8cb6d7",
	// "name": "11 Months Public Cloud Cost Summary",
	// "custom_layouts": [
	// [
	// {
	// "options": {
	// "layout": 100.0,
	// "chart_type": "CARD"
	// },
	// "widget_id": "card-lg-01",
	// "name": "Budget Usage Summary"
	// }
	// ],
	// [
	// {
	// "name": "Project-wise Budget Usage Summary@@",
	// "options": {
	// "chart_type": "TABLE",
	// "layout": 100.0
	// },
	// "widget_id": "table-lg-01"
	// }
	// ],
	// [
	// {
	// "widget_id": "stackedcol-lg-02",
	// "options": {
	// "layout": 100.0,
	// "group_by": "product",
	// "chart_type": "STACKED_COLUMN"
	// },
	// "name": "Cost Trend By Product"
	// }
	// ]
	// ],
	// "default_filter": {
	// "project_id": []
	// },
	// "period_type": "FIXED",
	// "period": {
	// "start": "2021-04-01",
	// "end": "2022-02-28"
	// },
	// "tags": {},
	// "user_id": "wanzargen@mz.co.kr",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-03-03T03:36:35.396Z",
	// "updated_at": "2022-03-03T03:36:35.396Z"
	// },
	// {
	// "user_dashboard_id": "user-dash-965b03793d5b",
	// "name": "AWS CloudFront Cost by Project",
	// "custom_layouts": [
	// [
	// {
	// "name": "AWS CloudFront Cost by Project",
	// "widget_id": "stackedcol-lg-03",
	// "options": {
	// "chart_type": "STACKED_COLUMN",
	// "layout": 100.0
	// }
	// }
	// ],
	// [
	// {
	// "widget_id": "stackedcol-lg-03",
	// "options": {
	// "layout": 100.0,
	// "chart_type": "STACKED_COLUMN",
	// "group_by": "service_account_id"
	// },
	// "name": "AWS CloudFront Cost by Service Account"
	// }
	// ],
	// [
	// {
	// "options": {
	// "layout": 100.0,
	// "chart_type": "LINE"
	// },
	// "name": "AWS Data-Transfer Cost Trend",
	// "widget_id": "linegraph-lg-02"
	// }
	// ]
	// ],
	// "default_filter": {},
	// "period_type": "FIXED",
	// "period": {
	// "start": "2021-05-01",
	// "end": "2022-04-30"
	// },
	// "tags": {},
	// "user_id": "wanzargen@mz.co.kr",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-04-07T01:13:28.494Z",
	// "updated_at": "2022-04-07T01:13:28.494Z"
	// }
	// ],
	// "total_count": 48
	// }
	List(ctx context.Context, in *UserDashboardQuery, opts ...grpc.CallOption) (*UserDashboardsInfo, error)
	Stat(ctx context.Context, in *UserDashboardStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type userDashboardClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDashboardClient(cc grpc.ClientConnInterface) UserDashboardClient {
	return &userDashboardClient{cc}
}

func (c *userDashboardClient) Create(ctx context.Context, in *CreateUserDashboardRequest, opts ...grpc.CallOption) (*UserDashboardInfo, error) {
	out := new(UserDashboardInfo)
	err := c.cc.Invoke(ctx, UserDashboard_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) Update(ctx context.Context, in *UpdateUserDashboardRequest, opts ...grpc.CallOption) (*UserDashboardInfo, error) {
	out := new(UserDashboardInfo)
	err := c.cc.Invoke(ctx, UserDashboard_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) Delete(ctx context.Context, in *UserDashboardRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, UserDashboard_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) Get(ctx context.Context, in *GetUserDashboardRequest, opts ...grpc.CallOption) (*UserDashboardInfo, error) {
	out := new(UserDashboardInfo)
	err := c.cc.Invoke(ctx, UserDashboard_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) List(ctx context.Context, in *UserDashboardQuery, opts ...grpc.CallOption) (*UserDashboardsInfo, error) {
	out := new(UserDashboardsInfo)
	err := c.cc.Invoke(ctx, UserDashboard_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDashboardClient) Stat(ctx context.Context, in *UserDashboardStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, UserDashboard_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDashboardServer is the server API for UserDashboard service.
// All implementations must embed UnimplementedUserDashboardServer
// for forward compatibility
type UserDashboardServer interface {
	// desc: Creates a new UserDashboard. Users can use the dashboard in `private`. In addition to the widgets provided by Cloudforet by default, Users can use widgets through the CustomWidget resource to create a UserDashboard that suits their needs.
	// request_example: >-
	// {
	// "name": "Untitled Dashboard",
	// "custom_layouts": [
	// [
	// {
	// "name": "AWS Data-Transfer Cost Trend",
	// "widget_id": "linegraph-lg-02",
	// "options": {
	// "layout": 100.0,
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_COST_TREND_DESC",
	// "chart_type": "LINE",
	// "chart_img": "AWS_Data-Transfer_Cost_Trend"
	// }
	// }
	// ],
	// [
	// {
	// "options": {
	// "chart_type": "MAP",
	// "chart_img": "AWS_Data-Transfer_By_Region",
	// "layout": 100.0,
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_BY_REGION_DESC"
	// },
	// "name": "AWS Data-Transfer by Region",
	// "widget_id": "map-lg-02"
	// }
	// ],
	// [
	// {
	// "options": {
	// "group_by": "project_id",
	// "layout": 100.0,
	// "chart_type": "STACKED_COLUMN",
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_CLOUDFRONT_COST_DESC",
	// "chart_img": "AWS_CloudFront_Cost"
	// },
	// "name": "AWS CloudFront Cost by Project",
	// "widget_id": "stackedcol-lg-03"
	// }
	// ]
	// ],
	// "default_filter": {},
	// "period_type": "AUTO"
	// }
	// response_example: >-
	// {
	// "user_dashboard_id": "user-dash-bf3f5f5ffa03",
	// "name": "Untitled Dashboard",
	// "custom_layouts": [
	// [
	// {
	// "options": {
	// "chart_type": "LINE",
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_COST_TREND_DESC",
	// "layout": 100.0,
	// "chart_img": "AWS_Data-Transfer_Cost_Trend"
	// },
	// "widget_id": "linegraph-lg-02",
	// "name": "AWS Data-Transfer Cost Trend"
	// }
	// ],
	// [
	// {
	// "name": "AWS Data-Transfer by Region",
	// "widget_id": "map-lg-02",
	// "options": {
	// "chart_img": "AWS_Data-Transfer_By_Region",
	// "chart_type": "MAP",
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_BY_REGION_DESC",
	// "layout": 100.0
	// }
	// }
	// ],
	// [
	// {
	// "widget_id": "stackedcol-lg-03",
	// "name": "AWS CloudFront Cost by Project",
	// "options": {
	// "layout": 100.0,
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_CLOUDFRONT_COST_DESC",
	// "chart_img": "AWS_CloudFront_Cost",
	// "group_by": "project_id",
	// "chart_type": "STACKED_COLUMN"
	// }
	// }
	// ]
	// ],
	// "default_filter": {},
	// "period_type": "AUTO",
	// "tags": {},
	// "user_id": "seolmin@mz.co.kr",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-07-19T05:58:52.065Z",
	// "updated_at": "2022-07-19T05:58:52.065Z"
	// }
	Create(context.Context, *CreateUserDashboardRequest) (*UserDashboardInfo, error)
	// desc: Updates a specific UserDashboard. You can make changes in widgets, including default widgets and CustomWidegets.
	// request_example: >-
	// {
	// "user_dashboard_id": "user-dash-bf3f5f5ffa03",
	// "name": "Untitled Dashboard2",
	// "custom_layouts": [
	// [{
	// "options": {
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_COST_TREND_DESC",
	// "chart_type": "LINE", "chart_img": "AWS_Data-Transfer_Cost_Trend", "layout": 100.0},
	// "name": "AWS Data-Transfer Cost Trend",
	// "widget_id": "linegraph-lg-02"}],
	// [{
	// "name": "AWS Data-Transfer by Region",
	// "options": {
	// "chart_type": "MAP",
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_BY_REGION_DESC",
	// "layout": 100.0,
	// "chart_img": "AWS_Data-Transfer_By_Region"},
	// "widget_id": "map-lg-02"}],
	// [{
	// "name": "AWS CloudFront Cost by Project",
	// "widget_id": "stackedcol-lg-03",
	// "options": {
	// "layout": 100.0,
	// "chart_img": "AWS_CloudFront_Cost",
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_CLOUDFRONT_COST_DESC",
	// "chart_type": "STACKED_COLUMN",
	// "group_by": "project_id"}
	// }]
	// ]
	// }
	// response_example: >-
	// {
	// "user_dashboard_id": "user-dash-bf3f5f5ffa03",
	// "name": "Untitled Dashboard2",
	// "custom_layouts": [
	// [
	// {
	// "options": {
	// "chart_type": "LINE",
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_COST_TREND_DESC",
	// "layout": 100.0,
	// "chart_img": "AWS_Data-Transfer_Cost_Trend"
	// },
	// "widget_id": "linegraph-lg-02",
	// "name": "AWS Data-Transfer Cost Trend"
	// }
	// ],
	// [
	// {
	// "name": "AWS Data-Transfer by Region",
	// "widget_id": "map-lg-02",
	// "options": {
	// "chart_img": "AWS_Data-Transfer_By_Region",
	// "chart_type": "MAP",
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_DATA_TRANSFER_BY_REGION_DESC",
	// "layout": 100.0
	// }
	// }
	// ],
	// [
	// {
	// "widget_id": "stackedcol-lg-03",
	// "name": "AWS CloudFront Cost by Project",
	// "options": {
	// "layout": 100.0,
	// "chart_desc_translation_id": "BILLING.COST_MANAGEMENT.DASHBOARD.CUSTOMIZE.ADD_WIDGET_MODAL.AWS_CLOUDFRONT_COST_DESC",
	// "chart_img": "AWS_CloudFront_Cost",
	// "group_by": "project_id",
	// "chart_type": "STACKED_COLUMN"
	// }
	// }
	// ]
	// ],
	// "default_filter": {},
	// "period_type": "AUTO",
	// "tags": {},
	// "user_id": "seolmin@mz.co.kr",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-07-19T05:58:52.065Z",
	// "updated_at": "2022-07-19T05:58:52.065Z"
	// }
	Update(context.Context, *UpdateUserDashboardRequest) (*UserDashboardInfo, error)
	// desc: Deletes a specific UserDashboard. You must specify the `user_dashboard_id` of the UserDashboard to delete.
	// request_example: >-
	// {
	// "user_dashboard_id": "user-dash-d1bd5d8cb6d7"
	// }
	Delete(context.Context, *UserDashboardRequest) (*empty.Empty, error)
	// desc: Gets a specific UserDashboard. Prints detailed information about the UserDashboard, including widegts used.
	// request_example: >-
	// {
	// "user_dashboard_id": "user-dash-d1bd5d8cb6d7"
	// }
	// response_example: >-
	// {
	// "user_dashboard_id": "user-dash-d1bd5d8cb6d7",
	// "name": "11 Months Public Cloud Cost Summary",
	// "custom_layouts": [
	// [
	// {
	// "widget_id": "card-lg-01",
	// "options": {
	// "chart_type": "CARD",
	// "layout": 100.0
	// },
	// "name": "Budget Usage Summary"
	// }
	// ],
	// [
	// {
	// "options": {
	// "layout": 100.0,
	// "chart_type": "TABLE"
	// },
	// "name": "Project-wise Budget Usage Summary@@",
	// "widget_id": "table-lg-01"
	// }
	// ],
	// [
	// {
	// "name": "Cost Trend By Product",
	// "options": {
	// "chart_type": "STACKED_COLUMN",
	// "layout": 100.0,
	// "group_by": "product"
	// },
	// "widget_id": "stackedcol-lg-02"
	// }
	// ]
	// ],
	// "default_filter": {
	// "project_id": []
	// },
	// "period_type": "FIXED",
	// "period": {
	// "start": "2021-04-01",
	// "end": "2022-02-28"
	// },
	// "tags": {},
	// "user_id": "wanzargen@mz.co.kr",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-03-03T03:36:35.396Z",
	// "updated_at": "2022-03-03T03:36:35.396Z"
	// }
	Get(context.Context, *GetUserDashboardRequest) (*UserDashboardInfo, error)
	// desc: Gets a list of all UserDashboards. You can use a query to get a filtered list of UserDashboards.
	// request_example: >-
	// {
	// "query": {}
	// }
	// response_example: >-
	// {
	// "results": [
	// {
	// "user_dashboard_id": "user-dash-d1bd5d8cb6d7",
	// "name": "11 Months Public Cloud Cost Summary",
	// "custom_layouts": [
	// [
	// {
	// "options": {
	// "layout": 100.0,
	// "chart_type": "CARD"
	// },
	// "widget_id": "card-lg-01",
	// "name": "Budget Usage Summary"
	// }
	// ],
	// [
	// {
	// "name": "Project-wise Budget Usage Summary@@",
	// "options": {
	// "chart_type": "TABLE",
	// "layout": 100.0
	// },
	// "widget_id": "table-lg-01"
	// }
	// ],
	// [
	// {
	// "widget_id": "stackedcol-lg-02",
	// "options": {
	// "layout": 100.0,
	// "group_by": "product",
	// "chart_type": "STACKED_COLUMN"
	// },
	// "name": "Cost Trend By Product"
	// }
	// ]
	// ],
	// "default_filter": {
	// "project_id": []
	// },
	// "period_type": "FIXED",
	// "period": {
	// "start": "2021-04-01",
	// "end": "2022-02-28"
	// },
	// "tags": {},
	// "user_id": "wanzargen@mz.co.kr",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-03-03T03:36:35.396Z",
	// "updated_at": "2022-03-03T03:36:35.396Z"
	// },
	// {
	// "user_dashboard_id": "user-dash-965b03793d5b",
	// "name": "AWS CloudFront Cost by Project",
	// "custom_layouts": [
	// [
	// {
	// "name": "AWS CloudFront Cost by Project",
	// "widget_id": "stackedcol-lg-03",
	// "options": {
	// "chart_type": "STACKED_COLUMN",
	// "layout": 100.0
	// }
	// }
	// ],
	// [
	// {
	// "widget_id": "stackedcol-lg-03",
	// "options": {
	// "layout": 100.0,
	// "chart_type": "STACKED_COLUMN",
	// "group_by": "service_account_id"
	// },
	// "name": "AWS CloudFront Cost by Service Account"
	// }
	// ],
	// [
	// {
	// "options": {
	// "layout": 100.0,
	// "chart_type": "LINE"
	// },
	// "name": "AWS Data-Transfer Cost Trend",
	// "widget_id": "linegraph-lg-02"
	// }
	// ]
	// ],
	// "default_filter": {},
	// "period_type": "FIXED",
	// "period": {
	// "start": "2021-05-01",
	// "end": "2022-04-30"
	// },
	// "tags": {},
	// "user_id": "wanzargen@mz.co.kr",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-04-07T01:13:28.494Z",
	// "updated_at": "2022-04-07T01:13:28.494Z"
	// }
	// ],
	// "total_count": 48
	// }
	List(context.Context, *UserDashboardQuery) (*UserDashboardsInfo, error)
	Stat(context.Context, *UserDashboardStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedUserDashboardServer()
}

// UnimplementedUserDashboardServer must be embedded to have forward compatible implementations.
type UnimplementedUserDashboardServer struct {
}

func (UnimplementedUserDashboardServer) Create(context.Context, *CreateUserDashboardRequest) (*UserDashboardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserDashboardServer) Update(context.Context, *UpdateUserDashboardRequest) (*UserDashboardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserDashboardServer) Delete(context.Context, *UserDashboardRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserDashboardServer) Get(context.Context, *GetUserDashboardRequest) (*UserDashboardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserDashboardServer) List(context.Context, *UserDashboardQuery) (*UserDashboardsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedUserDashboardServer) Stat(context.Context, *UserDashboardStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedUserDashboardServer) mustEmbedUnimplementedUserDashboardServer() {}

// UnsafeUserDashboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDashboardServer will
// result in compilation errors.
type UnsafeUserDashboardServer interface {
	mustEmbedUnimplementedUserDashboardServer()
}

func RegisterUserDashboardServer(s grpc.ServiceRegistrar, srv UserDashboardServer) {
	s.RegisterService(&UserDashboard_ServiceDesc, srv)
}

func _UserDashboard_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDashboard_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).Create(ctx, req.(*CreateUserDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDashboard_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).Update(ctx, req.(*UpdateUserDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDashboard_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).Delete(ctx, req.(*UserDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDashboard_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).Get(ctx, req.(*GetUserDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDashboardQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDashboard_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).List(ctx, req.(*UserDashboardQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDashboard_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDashboardStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDashboardServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDashboard_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDashboardServer).Stat(ctx, req.(*UserDashboardStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDashboard_ServiceDesc is the grpc.ServiceDesc for UserDashboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDashboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.cost_analysis.v1.UserDashboard",
	HandlerType: (*UserDashboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _UserDashboard_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _UserDashboard_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _UserDashboard_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _UserDashboard_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _UserDashboard_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _UserDashboard_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/cost_analysis/v1/user_dashboard.proto",
}
