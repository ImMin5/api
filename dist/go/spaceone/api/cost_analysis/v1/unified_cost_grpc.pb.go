// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/cost_analysis/v1/unified_cost.proto

package v1

import (
	context "context"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UnifiedCost_Get_FullMethodName     = "/spaceone.api.cost_analysis.v1.UnifiedCost/get"
	UnifiedCost_List_FullMethodName    = "/spaceone.api.cost_analysis.v1.UnifiedCost/list"
	UnifiedCost_Analyze_FullMethodName = "/spaceone.api.cost_analysis.v1.UnifiedCost/analyze"
	UnifiedCost_Stat_FullMethodName    = "/spaceone.api.cost_analysis.v1.UnifiedCost/stat"
)

// UnifiedCostClient is the client API for UnifiedCost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnifiedCostClient interface {
	Get(ctx context.Context, in *UnifiedCostRequest, opts ...grpc.CallOption) (*UnifiedCostInfo, error)
	List(ctx context.Context, in *UnifiedCostQuery, opts ...grpc.CallOption) (*UnifiedCostsInfo, error)
	Analyze(ctx context.Context, in *UnifiedCostAnalyzeQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
	Stat(ctx context.Context, in *UnifiedCostStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type unifiedCostClient struct {
	cc grpc.ClientConnInterface
}

func NewUnifiedCostClient(cc grpc.ClientConnInterface) UnifiedCostClient {
	return &unifiedCostClient{cc}
}

func (c *unifiedCostClient) Get(ctx context.Context, in *UnifiedCostRequest, opts ...grpc.CallOption) (*UnifiedCostInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnifiedCostInfo)
	err := c.cc.Invoke(ctx, UnifiedCost_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifiedCostClient) List(ctx context.Context, in *UnifiedCostQuery, opts ...grpc.CallOption) (*UnifiedCostsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnifiedCostsInfo)
	err := c.cc.Invoke(ctx, UnifiedCost_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifiedCostClient) Analyze(ctx context.Context, in *UnifiedCostAnalyzeQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, UnifiedCost_Analyze_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifiedCostClient) Stat(ctx context.Context, in *UnifiedCostStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, UnifiedCost_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnifiedCostServer is the server API for UnifiedCost service.
// All implementations must embed UnimplementedUnifiedCostServer
// for forward compatibility.
type UnifiedCostServer interface {
	Get(context.Context, *UnifiedCostRequest) (*UnifiedCostInfo, error)
	List(context.Context, *UnifiedCostQuery) (*UnifiedCostsInfo, error)
	Analyze(context.Context, *UnifiedCostAnalyzeQuery) (*_struct.Struct, error)
	Stat(context.Context, *UnifiedCostStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedUnifiedCostServer()
}

// UnimplementedUnifiedCostServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUnifiedCostServer struct{}

func (UnimplementedUnifiedCostServer) Get(context.Context, *UnifiedCostRequest) (*UnifiedCostInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUnifiedCostServer) List(context.Context, *UnifiedCostQuery) (*UnifiedCostsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedUnifiedCostServer) Analyze(context.Context, *UnifiedCostAnalyzeQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}
func (UnimplementedUnifiedCostServer) Stat(context.Context, *UnifiedCostStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedUnifiedCostServer) mustEmbedUnimplementedUnifiedCostServer() {}
func (UnimplementedUnifiedCostServer) testEmbeddedByValue()                     {}

// UnsafeUnifiedCostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnifiedCostServer will
// result in compilation errors.
type UnsafeUnifiedCostServer interface {
	mustEmbedUnimplementedUnifiedCostServer()
}

func RegisterUnifiedCostServer(s grpc.ServiceRegistrar, srv UnifiedCostServer) {
	// If the following call pancis, it indicates UnimplementedUnifiedCostServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UnifiedCost_ServiceDesc, srv)
}

func _UnifiedCost_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnifiedCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifiedCostServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnifiedCost_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifiedCostServer).Get(ctx, req.(*UnifiedCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnifiedCost_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnifiedCostQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifiedCostServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnifiedCost_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifiedCostServer).List(ctx, req.(*UnifiedCostQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnifiedCost_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnifiedCostAnalyzeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifiedCostServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnifiedCost_Analyze_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifiedCostServer).Analyze(ctx, req.(*UnifiedCostAnalyzeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnifiedCost_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnifiedCostStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifiedCostServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnifiedCost_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifiedCostServer).Stat(ctx, req.(*UnifiedCostStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// UnifiedCost_ServiceDesc is the grpc.ServiceDesc for UnifiedCost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnifiedCost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.cost_analysis.v1.UnifiedCost",
	HandlerType: (*UnifiedCostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _UnifiedCost_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _UnifiedCost_List_Handler,
		},
		{
			MethodName: "analyze",
			Handler:    _UnifiedCost_Analyze_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _UnifiedCost_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/cost_analysis/v1/unified_cost.proto",
}
