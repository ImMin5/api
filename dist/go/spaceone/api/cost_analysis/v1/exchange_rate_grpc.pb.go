//
//desc: An ExchangeRate is a resource defining the exchange rate of currencies. This resource can set a custom exchange rate for a specific domain, separately from the exchange rate of the default domain set in `config`.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: spaceone/api/cost_analysis/v1/exchange_rate.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExchangeRate_Set_FullMethodName     = "/spaceone.api.cost_analysis.v1.ExchangeRate/set"
	ExchangeRate_Reset_FullMethodName   = "/spaceone.api.cost_analysis.v1.ExchangeRate/reset"
	ExchangeRate_Enable_FullMethodName  = "/spaceone.api.cost_analysis.v1.ExchangeRate/enable"
	ExchangeRate_Disable_FullMethodName = "/spaceone.api.cost_analysis.v1.ExchangeRate/disable"
	ExchangeRate_Get_FullMethodName     = "/spaceone.api.cost_analysis.v1.ExchangeRate/get"
	ExchangeRate_List_FullMethodName    = "/spaceone.api.cost_analysis.v1.ExchangeRate/list"
)

// ExchangeRateClient is the client API for ExchangeRate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeRateClient interface {
	// desc: Overrides a value of a specific ExchangeRate. This method is used to change the ExchangeRate in a specific domain. You can set the `currency` and `rate` of the resource.
	// request_example: >-
	// {
	// "currency": "KRW",
	// "rate": 1300
	// }
	// response_example: >-
	// {
	// "currency": "KRW",
	// "rate": 1300.0,
	// "state": "ENABLED",
	// "is_default": true
	// }
	Set(ctx context.Context, in *SetExchangeRateRequest, opts ...grpc.CallOption) (*ExchangeRateInfo, error)
	// desc: Resets a value of a specific ExchangeRate and changes the ExchangeRate to the ExchangeRate of the `default` domain.
	// request_example: >-
	// {
	// "currency": "KRW"
	// }
	// response_example: >-
	// {
	// "currency": "KRW",
	// "rate": 1242.7,
	// "state": "ENABLED",
	// "is_default": true,
	// "domain_id": "domain-58010aa2e451"
	// }
	Reset(ctx context.Context, in *ExchangeRateRequest, opts ...grpc.CallOption) (*ExchangeRateInfo, error)
	// desc: ”
	// request_example: >-
	// {
	// }
	// response_example: >-
	// {
	//
	// }
	Enable(ctx context.Context, in *ExchangeRateRequest, opts ...grpc.CallOption) (*ExchangeRateInfo, error)
	// desc: ”
	// request_example: >-
	// {
	//
	// }
	// response_example: >-
	// {
	//
	// }
	Disable(ctx context.Context, in *ExchangeRateRequest, opts ...grpc.CallOption) (*ExchangeRateInfo, error)
	// desc: Gets a specific ExchangeRate. Prints detailed information about the ExchangeRate, including  `currency` and `rate`.
	// request_example: >-
	// {
	// "currency": "KRW"
	// }
	// response_example: >-
	// {
	// "currency": "KRW",
	// "rate": 1242.7,
	// "state": "ENABLED",
	// "is_default": true,
	// "domain_id": "domain-58010aa2e451"
	// }
	Get(ctx context.Context, in *ExchangeRateRequest, opts ...grpc.CallOption) (*ExchangeRateInfo, error)
	// desc: Gets a list of all ExchangeRates. You can use a query to get a filtered list of ExchangeRates.
	// request_example: >-
	// {
	// }
	// response_example: >-
	// {
	// "results": [
	// {
	// "currency": "JPY",
	// "rate": 129.8,
	// "state": "ENABLED",
	// "is_default": true,
	// "domain_id": "domain-58010aa2e451"
	// },
	// {
	// "currency": "KRW",
	// "rate": 1242.7,
	// "state": "ENABLED",
	// "is_default": true,
	// "domain_id": "domain-58010aa2e451"
	// }
	// ],
	// "total_count": 2
	// }
	List(ctx context.Context, in *ExchangeRateQuery, opts ...grpc.CallOption) (*ExchangeRatesInfo, error)
}

type exchangeRateClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeRateClient(cc grpc.ClientConnInterface) ExchangeRateClient {
	return &exchangeRateClient{cc}
}

func (c *exchangeRateClient) Set(ctx context.Context, in *SetExchangeRateRequest, opts ...grpc.CallOption) (*ExchangeRateInfo, error) {
	out := new(ExchangeRateInfo)
	err := c.cc.Invoke(ctx, ExchangeRate_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeRateClient) Reset(ctx context.Context, in *ExchangeRateRequest, opts ...grpc.CallOption) (*ExchangeRateInfo, error) {
	out := new(ExchangeRateInfo)
	err := c.cc.Invoke(ctx, ExchangeRate_Reset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeRateClient) Enable(ctx context.Context, in *ExchangeRateRequest, opts ...grpc.CallOption) (*ExchangeRateInfo, error) {
	out := new(ExchangeRateInfo)
	err := c.cc.Invoke(ctx, ExchangeRate_Enable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeRateClient) Disable(ctx context.Context, in *ExchangeRateRequest, opts ...grpc.CallOption) (*ExchangeRateInfo, error) {
	out := new(ExchangeRateInfo)
	err := c.cc.Invoke(ctx, ExchangeRate_Disable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeRateClient) Get(ctx context.Context, in *ExchangeRateRequest, opts ...grpc.CallOption) (*ExchangeRateInfo, error) {
	out := new(ExchangeRateInfo)
	err := c.cc.Invoke(ctx, ExchangeRate_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeRateClient) List(ctx context.Context, in *ExchangeRateQuery, opts ...grpc.CallOption) (*ExchangeRatesInfo, error) {
	out := new(ExchangeRatesInfo)
	err := c.cc.Invoke(ctx, ExchangeRate_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangeRateServer is the server API for ExchangeRate service.
// All implementations must embed UnimplementedExchangeRateServer
// for forward compatibility
type ExchangeRateServer interface {
	// desc: Overrides a value of a specific ExchangeRate. This method is used to change the ExchangeRate in a specific domain. You can set the `currency` and `rate` of the resource.
	// request_example: >-
	// {
	// "currency": "KRW",
	// "rate": 1300
	// }
	// response_example: >-
	// {
	// "currency": "KRW",
	// "rate": 1300.0,
	// "state": "ENABLED",
	// "is_default": true
	// }
	Set(context.Context, *SetExchangeRateRequest) (*ExchangeRateInfo, error)
	// desc: Resets a value of a specific ExchangeRate and changes the ExchangeRate to the ExchangeRate of the `default` domain.
	// request_example: >-
	// {
	// "currency": "KRW"
	// }
	// response_example: >-
	// {
	// "currency": "KRW",
	// "rate": 1242.7,
	// "state": "ENABLED",
	// "is_default": true,
	// "domain_id": "domain-58010aa2e451"
	// }
	Reset(context.Context, *ExchangeRateRequest) (*ExchangeRateInfo, error)
	// desc: ”
	// request_example: >-
	// {
	// }
	// response_example: >-
	// {
	//
	// }
	Enable(context.Context, *ExchangeRateRequest) (*ExchangeRateInfo, error)
	// desc: ”
	// request_example: >-
	// {
	//
	// }
	// response_example: >-
	// {
	//
	// }
	Disable(context.Context, *ExchangeRateRequest) (*ExchangeRateInfo, error)
	// desc: Gets a specific ExchangeRate. Prints detailed information about the ExchangeRate, including  `currency` and `rate`.
	// request_example: >-
	// {
	// "currency": "KRW"
	// }
	// response_example: >-
	// {
	// "currency": "KRW",
	// "rate": 1242.7,
	// "state": "ENABLED",
	// "is_default": true,
	// "domain_id": "domain-58010aa2e451"
	// }
	Get(context.Context, *ExchangeRateRequest) (*ExchangeRateInfo, error)
	// desc: Gets a list of all ExchangeRates. You can use a query to get a filtered list of ExchangeRates.
	// request_example: >-
	// {
	// }
	// response_example: >-
	// {
	// "results": [
	// {
	// "currency": "JPY",
	// "rate": 129.8,
	// "state": "ENABLED",
	// "is_default": true,
	// "domain_id": "domain-58010aa2e451"
	// },
	// {
	// "currency": "KRW",
	// "rate": 1242.7,
	// "state": "ENABLED",
	// "is_default": true,
	// "domain_id": "domain-58010aa2e451"
	// }
	// ],
	// "total_count": 2
	// }
	List(context.Context, *ExchangeRateQuery) (*ExchangeRatesInfo, error)
	mustEmbedUnimplementedExchangeRateServer()
}

// UnimplementedExchangeRateServer must be embedded to have forward compatible implementations.
type UnimplementedExchangeRateServer struct {
}

func (UnimplementedExchangeRateServer) Set(context.Context, *SetExchangeRateRequest) (*ExchangeRateInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedExchangeRateServer) Reset(context.Context, *ExchangeRateRequest) (*ExchangeRateInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedExchangeRateServer) Enable(context.Context, *ExchangeRateRequest) (*ExchangeRateInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedExchangeRateServer) Disable(context.Context, *ExchangeRateRequest) (*ExchangeRateInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedExchangeRateServer) Get(context.Context, *ExchangeRateRequest) (*ExchangeRateInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedExchangeRateServer) List(context.Context, *ExchangeRateQuery) (*ExchangeRatesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedExchangeRateServer) mustEmbedUnimplementedExchangeRateServer() {}

// UnsafeExchangeRateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeRateServer will
// result in compilation errors.
type UnsafeExchangeRateServer interface {
	mustEmbedUnimplementedExchangeRateServer()
}

func RegisterExchangeRateServer(s grpc.ServiceRegistrar, srv ExchangeRateServer) {
	s.RegisterService(&ExchangeRate_ServiceDesc, srv)
}

func _ExchangeRate_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeRateServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeRate_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeRateServer).Set(ctx, req.(*SetExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeRate_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeRateServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeRate_Reset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeRateServer).Reset(ctx, req.(*ExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeRate_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeRateServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeRate_Enable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeRateServer).Enable(ctx, req.(*ExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeRate_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeRateServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeRate_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeRateServer).Disable(ctx, req.(*ExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeRate_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeRateServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeRate_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeRateServer).Get(ctx, req.(*ExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeRate_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRateQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeRateServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeRate_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeRateServer).List(ctx, req.(*ExchangeRateQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// ExchangeRate_ServiceDesc is the grpc.ServiceDesc for ExchangeRate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExchangeRate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.cost_analysis.v1.ExchangeRate",
	HandlerType: (*ExchangeRateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "set",
			Handler:    _ExchangeRate_Set_Handler,
		},
		{
			MethodName: "reset",
			Handler:    _ExchangeRate_Reset_Handler,
		},
		{
			MethodName: "enable",
			Handler:    _ExchangeRate_Enable_Handler,
		},
		{
			MethodName: "disable",
			Handler:    _ExchangeRate_Disable_Handler,
		},
		{
			MethodName: "get",
			Handler:    _ExchangeRate_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _ExchangeRate_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/cost_analysis/v1/exchange_rate.proto",
}
