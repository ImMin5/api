// Unified Cost service is a service that provides unified cost based on the cost data from various DataSources registered in each domain.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.6.1
// source: spaceone/api/cost_analysis/v1/unified_cost.proto

package v1

import (
	v2 "github.com/cloudforet-io/api/dist/go/spaceone/api/core/v2"
	_ "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//	{
//	 "unified_cost_id": "unified-cost-11153fceca11"
//	}
type UnifiedCostRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UnifiedCostId string                 `protobuf:"bytes,1,opt,name=unified_cost_id,json=unifiedCostId,proto3" json:"unified_cost_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnifiedCostRequest) Reset() {
	*x = UnifiedCostRequest{}
	mi := &file_spaceone_api_cost_analysis_v1_unified_cost_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnifiedCostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedCostRequest) ProtoMessage() {}

func (x *UnifiedCostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_unified_cost_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedCostRequest.ProtoReflect.Descriptor instead.
func (*UnifiedCostRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_unified_cost_proto_rawDescGZIP(), []int{0}
}

func (x *UnifiedCostRequest) GetUnifiedCostId() string {
	if x != nil {
		return x.UnifiedCostId
	}
	return ""
}

//	{
//	 "query": {}
//	}
type UnifiedCostQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// +optional
	Query *v2.Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// +optional
	UnifiedCostId string `protobuf:"bytes,2,opt,name=unified_cost_id,json=unifiedCostId,proto3" json:"unified_cost_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnifiedCostQuery) Reset() {
	*x = UnifiedCostQuery{}
	mi := &file_spaceone_api_cost_analysis_v1_unified_cost_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnifiedCostQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedCostQuery) ProtoMessage() {}

func (x *UnifiedCostQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_unified_cost_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedCostQuery.ProtoReflect.Descriptor instead.
func (*UnifiedCostQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_unified_cost_proto_rawDescGZIP(), []int{1}
}

func (x *UnifiedCostQuery) GetQuery() *v2.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *UnifiedCostQuery) GetUnifiedCostId() string {
	if x != nil {
		return x.UnifiedCostId
	}
	return ""
}

//	{
//	 "query": {}
//	}
type UnifiedCostAnalyzeQuery struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Query         *v2.TimeSeriesAnalyzeQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	IsConfirmed   bool                       `protobuf:"varint,2,opt,name=is_confirmed,json=isConfirmed,proto3" json:"is_confirmed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnifiedCostAnalyzeQuery) Reset() {
	*x = UnifiedCostAnalyzeQuery{}
	mi := &file_spaceone_api_cost_analysis_v1_unified_cost_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnifiedCostAnalyzeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedCostAnalyzeQuery) ProtoMessage() {}

func (x *UnifiedCostAnalyzeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_unified_cost_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedCostAnalyzeQuery.ProtoReflect.Descriptor instead.
func (*UnifiedCostAnalyzeQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_unified_cost_proto_rawDescGZIP(), []int{2}
}

func (x *UnifiedCostAnalyzeQuery) GetQuery() *v2.TimeSeriesAnalyzeQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *UnifiedCostAnalyzeQuery) GetIsConfirmed() bool {
	if x != nil {
		return x.IsConfirmed
	}
	return false
}

//	{
//	 "unified_cost_id": "unified-cost-11153fceca11",
//	 "cost": {
//	   "KRW": 13000,
//	   "USD": 1,
//	   "JPY": 100
//	 },
//	 "billed_month": "2024-08",
//	 "billed_year": "2024",
//	 "exchange_date": "2024-08-14",
//	 "exchange_source": "Yahoo Finance!",
//	 "aggregation_date": "2024-08-15",
//	 "currency": "USD",
//	 "is_confirmed": true,
//	 "provider": "aws",
//	 "region_code": "AP2",
//	 "region_key": "aws.AP2",
//	 "product": "AmazonS3",
//	 "data_source_name": "AWS",
//	 "workspace_name": "SpaceONE",
//	 "data_source_id": "ds-1acca85666c1",
//	 "project_id": project-1acca85666c1,
//	 "workspace_id": "workspace-1acca85666c1",
//	 "domain_id": "domain-1acca85666c1",
//	 "created_at": "2024-09-30T08:00:03.945Z"
//	}
type UnifiedCostInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UnifiedCostId string                 `protobuf:"bytes,1,opt,name=unified_cost_id,json=unifiedCostId,proto3" json:"unified_cost_id,omitempty"`
	Cost          *_struct.Struct        `protobuf:"bytes,2,opt,name=cost,proto3" json:"cost,omitempty"`
	// ex). 2021-01
	BilledMonth string `protobuf:"bytes,3,opt,name=billed_month,json=billedMonth,proto3" json:"billed_month,omitempty"`
	// ex). 2021
	BilledYear string `protobuf:"bytes,4,opt,name=billed_year,json=billedYear,proto3" json:"billed_year,omitempty"`
	// ex). 2021-01-01
	AggregationDate string `protobuf:"bytes,5,opt,name=aggregation_date,json=aggregationDate,proto3" json:"aggregation_date,omitempty"`
	ExchangeDate    string `protobuf:"bytes,6,opt,name=exchange_date,json=exchangeDate,proto3" json:"exchange_date,omitempty"`
	// ex). Yahoo Finance
	ExchangeSource string `protobuf:"bytes,7,opt,name=exchange_source,json=exchangeSource,proto3" json:"exchange_source,omitempty"`
	// Original currency of cost
	Currency           string `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	IsConfirmed        bool   `protobuf:"varint,9,opt,name=is_confirmed,json=isConfirmed,proto3" json:"is_confirmed,omitempty"`
	Provider           string `protobuf:"bytes,10,opt,name=provider,proto3" json:"provider,omitempty"`
	RegionCode         string `protobuf:"bytes,11,opt,name=region_code,json=regionCode,proto3" json:"region_code,omitempty"`
	RegionKey          string `protobuf:"bytes,12,opt,name=region_key,json=regionKey,proto3" json:"region_key,omitempty"`
	Product            string `protobuf:"bytes,13,opt,name=product,proto3" json:"product,omitempty"`
	UsageType          string `protobuf:"bytes,14,opt,name=usage_type,json=usageType,proto3" json:"usage_type,omitempty"`
	UsageUnit          string `protobuf:"bytes,15,opt,name=usage_unit,json=usageUnit,proto3" json:"usage_unit,omitempty"`
	ServiceAccountName string `protobuf:"bytes,16,opt,name=service_account_name,json=serviceAccountName,proto3" json:"service_account_name,omitempty"`
	DataSourceName     string `protobuf:"bytes,17,opt,name=data_source_name,json=dataSourceName,proto3" json:"data_source_name,omitempty"`
	ProjectName        string `protobuf:"bytes,18,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	WorkspaceName      string `protobuf:"bytes,19,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
	DomainId           string `protobuf:"bytes,21,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WorkspaceId        string `protobuf:"bytes,22,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	ProjectId          string `protobuf:"bytes,23,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DataSourceId       string `protobuf:"bytes,26,opt,name=data_source_id,json=dataSourceId,proto3" json:"data_source_id,omitempty"`
	ServiceAccountId   string `protobuf:"bytes,27,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	CreatedAt          string `protobuf:"bytes,31,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UnifiedCostInfo) Reset() {
	*x = UnifiedCostInfo{}
	mi := &file_spaceone_api_cost_analysis_v1_unified_cost_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnifiedCostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedCostInfo) ProtoMessage() {}

func (x *UnifiedCostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_unified_cost_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedCostInfo.ProtoReflect.Descriptor instead.
func (*UnifiedCostInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_unified_cost_proto_rawDescGZIP(), []int{3}
}

func (x *UnifiedCostInfo) GetUnifiedCostId() string {
	if x != nil {
		return x.UnifiedCostId
	}
	return ""
}

func (x *UnifiedCostInfo) GetCost() *_struct.Struct {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *UnifiedCostInfo) GetBilledMonth() string {
	if x != nil {
		return x.BilledMonth
	}
	return ""
}

func (x *UnifiedCostInfo) GetBilledYear() string {
	if x != nil {
		return x.BilledYear
	}
	return ""
}

func (x *UnifiedCostInfo) GetAggregationDate() string {
	if x != nil {
		return x.AggregationDate
	}
	return ""
}

func (x *UnifiedCostInfo) GetExchangeDate() string {
	if x != nil {
		return x.ExchangeDate
	}
	return ""
}

func (x *UnifiedCostInfo) GetExchangeSource() string {
	if x != nil {
		return x.ExchangeSource
	}
	return ""
}

func (x *UnifiedCostInfo) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *UnifiedCostInfo) GetIsConfirmed() bool {
	if x != nil {
		return x.IsConfirmed
	}
	return false
}

func (x *UnifiedCostInfo) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *UnifiedCostInfo) GetRegionCode() string {
	if x != nil {
		return x.RegionCode
	}
	return ""
}

func (x *UnifiedCostInfo) GetRegionKey() string {
	if x != nil {
		return x.RegionKey
	}
	return ""
}

func (x *UnifiedCostInfo) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *UnifiedCostInfo) GetUsageType() string {
	if x != nil {
		return x.UsageType
	}
	return ""
}

func (x *UnifiedCostInfo) GetUsageUnit() string {
	if x != nil {
		return x.UsageUnit
	}
	return ""
}

func (x *UnifiedCostInfo) GetServiceAccountName() string {
	if x != nil {
		return x.ServiceAccountName
	}
	return ""
}

func (x *UnifiedCostInfo) GetDataSourceName() string {
	if x != nil {
		return x.DataSourceName
	}
	return ""
}

func (x *UnifiedCostInfo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *UnifiedCostInfo) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

func (x *UnifiedCostInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *UnifiedCostInfo) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *UnifiedCostInfo) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UnifiedCostInfo) GetDataSourceId() string {
	if x != nil {
		return x.DataSourceId
	}
	return ""
}

func (x *UnifiedCostInfo) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *UnifiedCostInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

//	{
//	 "results": [
//	 {
//	   "unified_cost_id": "unified-cost-11153fceca11",
//	   "cost": {
//	     "KRW": 13000,
//	     "USD": 1,
//	     "JPY": 100
//	   },
//	  "billed_month": "2024-08",
//	  "billed_year": "2024",
//	  "exchange_date": "2024-08-14",
//	  "exchange_source": "Yahoo Finance!",
//	  "aggregation_date": "2024-08-15",
//	  "currency": "USD",
//	  "is_confirmed": true,
//	  "provider": "aws",
//	  "region_code": "AP2",
//	  "region_key": "aws.AP2",
//	  "product": "AmazonS3",
//	  "data_source_name": "AWS",
//	  "workspace_name": "SpaceONE",
//	  "data_source_id": "ds-1acca85666c1",
//	  "project_id": project-1acca85666c1,
//	  "workspace_id": "workspace-1acca85666c1",
//	  "domain_id": "domain-1acca85666c1",
//	  "created_at": "2024-09-30T08:00:03.945Z"
//	   }
//	 ],
//	 "total_count": 1
//	}
type UnifiedCostsInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*UnifiedCostInfo     `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnifiedCostsInfo) Reset() {
	*x = UnifiedCostsInfo{}
	mi := &file_spaceone_api_cost_analysis_v1_unified_cost_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnifiedCostsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedCostsInfo) ProtoMessage() {}

func (x *UnifiedCostsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_unified_cost_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedCostsInfo.ProtoReflect.Descriptor instead.
func (*UnifiedCostsInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_unified_cost_proto_rawDescGZIP(), []int{4}
}

func (x *UnifiedCostsInfo) GetResults() []*UnifiedCostInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *UnifiedCostsInfo) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

//	{
//	 "query": {}
//	}
type UnifiedCostStatQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *v2.StatisticsQuery    `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnifiedCostStatQuery) Reset() {
	*x = UnifiedCostStatQuery{}
	mi := &file_spaceone_api_cost_analysis_v1_unified_cost_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnifiedCostStatQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnifiedCostStatQuery) ProtoMessage() {}

func (x *UnifiedCostStatQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_cost_analysis_v1_unified_cost_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnifiedCostStatQuery.ProtoReflect.Descriptor instead.
func (*UnifiedCostStatQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_cost_analysis_v1_unified_cost_proto_rawDescGZIP(), []int{5}
}

func (x *UnifiedCostStatQuery) GetQuery() *v2.StatisticsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

var File_spaceone_api_cost_analysis_v1_unified_cost_proto protoreflect.FileDescriptor

var file_spaceone_api_cost_analysis_v1_unified_cost_proto_rawDesc = string([]byte{
	0x0a, 0x30, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32,
	0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x12,
	0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x10, 0x55, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x17, 0x55, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x22, 0x8e, 0x07, 0x0a,
	0x0f, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x26, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x59, 0x65, 0x61, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x7d, 0x0a,
	0x10, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x48, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x53, 0x0a, 0x14,
	0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x32, 0xd9, 0x04, 0x0a, 0x0b, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x97, 0x01, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x2d, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x73,
	0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01,
	0x2a, 0x22, 0x23, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x63, 0x6f, 0x73,
	0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x8d, 0x01, 0x0a, 0x07, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x12, 0x36, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26,
	0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x12,
	0x33, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2d,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x2d, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x42, 0x44, 0x5a,
	0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x66, 0x6f, 0x72, 0x65, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69,
	0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_spaceone_api_cost_analysis_v1_unified_cost_proto_rawDescOnce sync.Once
	file_spaceone_api_cost_analysis_v1_unified_cost_proto_rawDescData []byte
)

func file_spaceone_api_cost_analysis_v1_unified_cost_proto_rawDescGZIP() []byte {
	file_spaceone_api_cost_analysis_v1_unified_cost_proto_rawDescOnce.Do(func() {
		file_spaceone_api_cost_analysis_v1_unified_cost_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spaceone_api_cost_analysis_v1_unified_cost_proto_rawDesc), len(file_spaceone_api_cost_analysis_v1_unified_cost_proto_rawDesc)))
	})
	return file_spaceone_api_cost_analysis_v1_unified_cost_proto_rawDescData
}

var file_spaceone_api_cost_analysis_v1_unified_cost_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_spaceone_api_cost_analysis_v1_unified_cost_proto_goTypes = []any{
	(*UnifiedCostRequest)(nil),        // 0: spaceone.api.cost_analysis.v1.UnifiedCostRequest
	(*UnifiedCostQuery)(nil),          // 1: spaceone.api.cost_analysis.v1.UnifiedCostQuery
	(*UnifiedCostAnalyzeQuery)(nil),   // 2: spaceone.api.cost_analysis.v1.UnifiedCostAnalyzeQuery
	(*UnifiedCostInfo)(nil),           // 3: spaceone.api.cost_analysis.v1.UnifiedCostInfo
	(*UnifiedCostsInfo)(nil),          // 4: spaceone.api.cost_analysis.v1.UnifiedCostsInfo
	(*UnifiedCostStatQuery)(nil),      // 5: spaceone.api.cost_analysis.v1.UnifiedCostStatQuery
	(*v2.Query)(nil),                  // 6: spaceone.api.core.v2.Query
	(*v2.TimeSeriesAnalyzeQuery)(nil), // 7: spaceone.api.core.v2.TimeSeriesAnalyzeQuery
	(*_struct.Struct)(nil),            // 8: google.protobuf.Struct
	(*v2.StatisticsQuery)(nil),        // 9: spaceone.api.core.v2.StatisticsQuery
}
var file_spaceone_api_cost_analysis_v1_unified_cost_proto_depIdxs = []int32{
	6, // 0: spaceone.api.cost_analysis.v1.UnifiedCostQuery.query:type_name -> spaceone.api.core.v2.Query
	7, // 1: spaceone.api.cost_analysis.v1.UnifiedCostAnalyzeQuery.query:type_name -> spaceone.api.core.v2.TimeSeriesAnalyzeQuery
	8, // 2: spaceone.api.cost_analysis.v1.UnifiedCostInfo.cost:type_name -> google.protobuf.Struct
	3, // 3: spaceone.api.cost_analysis.v1.UnifiedCostsInfo.results:type_name -> spaceone.api.cost_analysis.v1.UnifiedCostInfo
	9, // 4: spaceone.api.cost_analysis.v1.UnifiedCostStatQuery.query:type_name -> spaceone.api.core.v2.StatisticsQuery
	0, // 5: spaceone.api.cost_analysis.v1.UnifiedCost.get:input_type -> spaceone.api.cost_analysis.v1.UnifiedCostRequest
	1, // 6: spaceone.api.cost_analysis.v1.UnifiedCost.list:input_type -> spaceone.api.cost_analysis.v1.UnifiedCostQuery
	2, // 7: spaceone.api.cost_analysis.v1.UnifiedCost.analyze:input_type -> spaceone.api.cost_analysis.v1.UnifiedCostAnalyzeQuery
	5, // 8: spaceone.api.cost_analysis.v1.UnifiedCost.stat:input_type -> spaceone.api.cost_analysis.v1.UnifiedCostStatQuery
	3, // 9: spaceone.api.cost_analysis.v1.UnifiedCost.get:output_type -> spaceone.api.cost_analysis.v1.UnifiedCostInfo
	4, // 10: spaceone.api.cost_analysis.v1.UnifiedCost.list:output_type -> spaceone.api.cost_analysis.v1.UnifiedCostsInfo
	8, // 11: spaceone.api.cost_analysis.v1.UnifiedCost.analyze:output_type -> google.protobuf.Struct
	8, // 12: spaceone.api.cost_analysis.v1.UnifiedCost.stat:output_type -> google.protobuf.Struct
	9, // [9:13] is the sub-list for method output_type
	5, // [5:9] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_spaceone_api_cost_analysis_v1_unified_cost_proto_init() }
func file_spaceone_api_cost_analysis_v1_unified_cost_proto_init() {
	if File_spaceone_api_cost_analysis_v1_unified_cost_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spaceone_api_cost_analysis_v1_unified_cost_proto_rawDesc), len(file_spaceone_api_cost_analysis_v1_unified_cost_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spaceone_api_cost_analysis_v1_unified_cost_proto_goTypes,
		DependencyIndexes: file_spaceone_api_cost_analysis_v1_unified_cost_proto_depIdxs,
		MessageInfos:      file_spaceone_api_cost_analysis_v1_unified_cost_proto_msgTypes,
	}.Build()
	File_spaceone_api_cost_analysis_v1_unified_cost_proto = out.File
	file_spaceone_api_cost_analysis_v1_unified_cost_proto_goTypes = nil
	file_spaceone_api_cost_analysis_v1_unified_cost_proto_depIdxs = nil
}
