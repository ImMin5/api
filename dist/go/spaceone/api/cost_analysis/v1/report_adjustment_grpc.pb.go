// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/cost_analysis/v1/report_adjustment.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReportAdjustment_Create_FullMethodName      = "/spaceone.api.cost_analysis.v1.ReportAdjustment/create"
	ReportAdjustment_Update_FullMethodName      = "/spaceone.api.cost_analysis.v1.ReportAdjustment/update"
	ReportAdjustment_ChangeOrder_FullMethodName = "/spaceone.api.cost_analysis.v1.ReportAdjustment/change_order"
	ReportAdjustment_Delete_FullMethodName      = "/spaceone.api.cost_analysis.v1.ReportAdjustment/delete"
	ReportAdjustment_Get_FullMethodName         = "/spaceone.api.cost_analysis.v1.ReportAdjustment/get"
	ReportAdjustment_List_FullMethodName        = "/spaceone.api.cost_analysis.v1.ReportAdjustment/list"
)

// ReportAdjustmentClient is the client API for ReportAdjustment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportAdjustmentClient interface {
	Create(ctx context.Context, in *CreateReportAdjustmentRequest, opts ...grpc.CallOption) (*ReportAdjustmentInfo, error)
	Update(ctx context.Context, in *UpdateReportAdjustmentRequest, opts ...grpc.CallOption) (*ReportAdjustmentInfo, error)
	ChangeOrder(ctx context.Context, in *ChangeOrderReportAdjustmentRequest, opts ...grpc.CallOption) (*ReportAdjustmentInfo, error)
	Delete(ctx context.Context, in *ReportAdjustmentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *ReportAdjustmentRequest, opts ...grpc.CallOption) (*ReportAdjustmentInfo, error)
	List(ctx context.Context, in *ReportAdjustmentQuery, opts ...grpc.CallOption) (*ReportAdjustmentsInfo, error)
}

type reportAdjustmentClient struct {
	cc grpc.ClientConnInterface
}

func NewReportAdjustmentClient(cc grpc.ClientConnInterface) ReportAdjustmentClient {
	return &reportAdjustmentClient{cc}
}

func (c *reportAdjustmentClient) Create(ctx context.Context, in *CreateReportAdjustmentRequest, opts ...grpc.CallOption) (*ReportAdjustmentInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportAdjustmentInfo)
	err := c.cc.Invoke(ctx, ReportAdjustment_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAdjustmentClient) Update(ctx context.Context, in *UpdateReportAdjustmentRequest, opts ...grpc.CallOption) (*ReportAdjustmentInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportAdjustmentInfo)
	err := c.cc.Invoke(ctx, ReportAdjustment_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAdjustmentClient) ChangeOrder(ctx context.Context, in *ChangeOrderReportAdjustmentRequest, opts ...grpc.CallOption) (*ReportAdjustmentInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportAdjustmentInfo)
	err := c.cc.Invoke(ctx, ReportAdjustment_ChangeOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAdjustmentClient) Delete(ctx context.Context, in *ReportAdjustmentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ReportAdjustment_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAdjustmentClient) Get(ctx context.Context, in *ReportAdjustmentRequest, opts ...grpc.CallOption) (*ReportAdjustmentInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportAdjustmentInfo)
	err := c.cc.Invoke(ctx, ReportAdjustment_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAdjustmentClient) List(ctx context.Context, in *ReportAdjustmentQuery, opts ...grpc.CallOption) (*ReportAdjustmentsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportAdjustmentsInfo)
	err := c.cc.Invoke(ctx, ReportAdjustment_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportAdjustmentServer is the server API for ReportAdjustment service.
// All implementations must embed UnimplementedReportAdjustmentServer
// for forward compatibility.
type ReportAdjustmentServer interface {
	Create(context.Context, *CreateReportAdjustmentRequest) (*ReportAdjustmentInfo, error)
	Update(context.Context, *UpdateReportAdjustmentRequest) (*ReportAdjustmentInfo, error)
	ChangeOrder(context.Context, *ChangeOrderReportAdjustmentRequest) (*ReportAdjustmentInfo, error)
	Delete(context.Context, *ReportAdjustmentRequest) (*empty.Empty, error)
	Get(context.Context, *ReportAdjustmentRequest) (*ReportAdjustmentInfo, error)
	List(context.Context, *ReportAdjustmentQuery) (*ReportAdjustmentsInfo, error)
	mustEmbedUnimplementedReportAdjustmentServer()
}

// UnimplementedReportAdjustmentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReportAdjustmentServer struct{}

func (UnimplementedReportAdjustmentServer) Create(context.Context, *CreateReportAdjustmentRequest) (*ReportAdjustmentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedReportAdjustmentServer) Update(context.Context, *UpdateReportAdjustmentRequest) (*ReportAdjustmentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedReportAdjustmentServer) ChangeOrder(context.Context, *ChangeOrderReportAdjustmentRequest) (*ReportAdjustmentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeOrder not implemented")
}
func (UnimplementedReportAdjustmentServer) Delete(context.Context, *ReportAdjustmentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedReportAdjustmentServer) Get(context.Context, *ReportAdjustmentRequest) (*ReportAdjustmentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedReportAdjustmentServer) List(context.Context, *ReportAdjustmentQuery) (*ReportAdjustmentsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedReportAdjustmentServer) mustEmbedUnimplementedReportAdjustmentServer() {}
func (UnimplementedReportAdjustmentServer) testEmbeddedByValue()                          {}

// UnsafeReportAdjustmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportAdjustmentServer will
// result in compilation errors.
type UnsafeReportAdjustmentServer interface {
	mustEmbedUnimplementedReportAdjustmentServer()
}

func RegisterReportAdjustmentServer(s grpc.ServiceRegistrar, srv ReportAdjustmentServer) {
	// If the following call pancis, it indicates UnimplementedReportAdjustmentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReportAdjustment_ServiceDesc, srv)
}

func _ReportAdjustment_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReportAdjustmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAdjustmentServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportAdjustment_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAdjustmentServer).Create(ctx, req.(*CreateReportAdjustmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportAdjustment_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReportAdjustmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAdjustmentServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportAdjustment_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAdjustmentServer).Update(ctx, req.(*UpdateReportAdjustmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportAdjustment_ChangeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeOrderReportAdjustmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAdjustmentServer).ChangeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportAdjustment_ChangeOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAdjustmentServer).ChangeOrder(ctx, req.(*ChangeOrderReportAdjustmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportAdjustment_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportAdjustmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAdjustmentServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportAdjustment_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAdjustmentServer).Delete(ctx, req.(*ReportAdjustmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportAdjustment_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportAdjustmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAdjustmentServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportAdjustment_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAdjustmentServer).Get(ctx, req.(*ReportAdjustmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportAdjustment_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportAdjustmentQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAdjustmentServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportAdjustment_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAdjustmentServer).List(ctx, req.(*ReportAdjustmentQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportAdjustment_ServiceDesc is the grpc.ServiceDesc for ReportAdjustment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportAdjustment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.cost_analysis.v1.ReportAdjustment",
	HandlerType: (*ReportAdjustmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _ReportAdjustment_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _ReportAdjustment_Update_Handler,
		},
		{
			MethodName: "change_order",
			Handler:    _ReportAdjustment_ChangeOrder_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _ReportAdjustment_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _ReportAdjustment_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _ReportAdjustment_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/cost_analysis/v1/report_adjustment.proto",
}
