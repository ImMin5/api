// A DataSourceAccount is a resource that for routing cost data from a specific account to a workspace, project, service account.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: spaceone/api/cost_analysis/v1/data_source_account.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataSourceAccount_Update_FullMethodName = "/spaceone.api.cost_analysis.v1.DataSourceAccount/update"
	DataSourceAccount_Reset_FullMethodName  = "/spaceone.api.cost_analysis.v1.DataSourceAccount/reset"
	DataSourceAccount_Get_FullMethodName    = "/spaceone.api.cost_analysis.v1.DataSourceAccount/get"
	DataSourceAccount_List_FullMethodName   = "/spaceone.api.cost_analysis.v1.DataSourceAccount/list"
	DataSourceAccount_Stat_FullMethodName   = "/spaceone.api.cost_analysis.v1.DataSourceAccount/stat"
)

// DataSourceAccountClient is the client API for DataSourceAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataSourceAccountClient interface {
	// Update a DataSourceAccount with the specified DataSourceAccount ID related to the DataSource.
	Update(ctx context.Context, in *UpdateDataSourceAccountRequest, opts ...grpc.CallOption) (*DataSourceAccountInfo, error)
	Reset(ctx context.Context, in *ResetDataSourceAccountRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get a DataSourceAccount with the specified DataSourceAccount ID related to the DataSource.
	Get(ctx context.Context, in *DataSourceAccountRequest, opts ...grpc.CallOption) (*DataSourceAccountInfo, error)
	List(ctx context.Context, in *DataSourceAccountQuery, opts ...grpc.CallOption) (*DataSourceAccountsInfo, error)
	Stat(ctx context.Context, in *DataSourceAccountStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type dataSourceAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewDataSourceAccountClient(cc grpc.ClientConnInterface) DataSourceAccountClient {
	return &dataSourceAccountClient{cc}
}

func (c *dataSourceAccountClient) Update(ctx context.Context, in *UpdateDataSourceAccountRequest, opts ...grpc.CallOption) (*DataSourceAccountInfo, error) {
	out := new(DataSourceAccountInfo)
	err := c.cc.Invoke(ctx, DataSourceAccount_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceAccountClient) Reset(ctx context.Context, in *ResetDataSourceAccountRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, DataSourceAccount_Reset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceAccountClient) Get(ctx context.Context, in *DataSourceAccountRequest, opts ...grpc.CallOption) (*DataSourceAccountInfo, error) {
	out := new(DataSourceAccountInfo)
	err := c.cc.Invoke(ctx, DataSourceAccount_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceAccountClient) List(ctx context.Context, in *DataSourceAccountQuery, opts ...grpc.CallOption) (*DataSourceAccountsInfo, error) {
	out := new(DataSourceAccountsInfo)
	err := c.cc.Invoke(ctx, DataSourceAccount_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceAccountClient) Stat(ctx context.Context, in *DataSourceAccountStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, DataSourceAccount_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataSourceAccountServer is the server API for DataSourceAccount service.
// All implementations must embed UnimplementedDataSourceAccountServer
// for forward compatibility
type DataSourceAccountServer interface {
	// Update a DataSourceAccount with the specified DataSourceAccount ID related to the DataSource.
	Update(context.Context, *UpdateDataSourceAccountRequest) (*DataSourceAccountInfo, error)
	Reset(context.Context, *ResetDataSourceAccountRequest) (*empty.Empty, error)
	// Get a DataSourceAccount with the specified DataSourceAccount ID related to the DataSource.
	Get(context.Context, *DataSourceAccountRequest) (*DataSourceAccountInfo, error)
	List(context.Context, *DataSourceAccountQuery) (*DataSourceAccountsInfo, error)
	Stat(context.Context, *DataSourceAccountStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedDataSourceAccountServer()
}

// UnimplementedDataSourceAccountServer must be embedded to have forward compatible implementations.
type UnimplementedDataSourceAccountServer struct {
}

func (UnimplementedDataSourceAccountServer) Update(context.Context, *UpdateDataSourceAccountRequest) (*DataSourceAccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDataSourceAccountServer) Reset(context.Context, *ResetDataSourceAccountRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedDataSourceAccountServer) Get(context.Context, *DataSourceAccountRequest) (*DataSourceAccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDataSourceAccountServer) List(context.Context, *DataSourceAccountQuery) (*DataSourceAccountsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDataSourceAccountServer) Stat(context.Context, *DataSourceAccountStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedDataSourceAccountServer) mustEmbedUnimplementedDataSourceAccountServer() {}

// UnsafeDataSourceAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataSourceAccountServer will
// result in compilation errors.
type UnsafeDataSourceAccountServer interface {
	mustEmbedUnimplementedDataSourceAccountServer()
}

func RegisterDataSourceAccountServer(s grpc.ServiceRegistrar, srv DataSourceAccountServer) {
	s.RegisterService(&DataSourceAccount_ServiceDesc, srv)
}

func _DataSourceAccount_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataSourceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceAccountServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourceAccount_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceAccountServer).Update(ctx, req.(*UpdateDataSourceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceAccount_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetDataSourceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceAccountServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourceAccount_Reset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceAccountServer).Reset(ctx, req.(*ResetDataSourceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceAccount_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSourceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceAccountServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourceAccount_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceAccountServer).Get(ctx, req.(*DataSourceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceAccount_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSourceAccountQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceAccountServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourceAccount_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceAccountServer).List(ctx, req.(*DataSourceAccountQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceAccount_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSourceAccountStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceAccountServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourceAccount_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceAccountServer).Stat(ctx, req.(*DataSourceAccountStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// DataSourceAccount_ServiceDesc is the grpc.ServiceDesc for DataSourceAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataSourceAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.cost_analysis.v1.DataSourceAccount",
	HandlerType: (*DataSourceAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "update",
			Handler:    _DataSourceAccount_Update_Handler,
		},
		{
			MethodName: "reset",
			Handler:    _DataSourceAccount_Reset_Handler,
		},
		{
			MethodName: "get",
			Handler:    _DataSourceAccount_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _DataSourceAccount_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _DataSourceAccount_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/cost_analysis/v1/data_source_account.proto",
}
