// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/cost_analysis/v1/report_adjustment_policy.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReportAdjustmentPolicy_Create_FullMethodName       = "/spaceone.api.cost_analysis.v1.ReportAdjustmentPolicy/create"
	ReportAdjustmentPolicy_Update_FullMethodName       = "/spaceone.api.cost_analysis.v1.ReportAdjustmentPolicy/update"
	ReportAdjustmentPolicy_ChangeOrder_FullMethodName  = "/spaceone.api.cost_analysis.v1.ReportAdjustmentPolicy/change_order"
	ReportAdjustmentPolicy_Delete_FullMethodName       = "/spaceone.api.cost_analysis.v1.ReportAdjustmentPolicy/delete"
	ReportAdjustmentPolicy_SyncCurrency_FullMethodName = "/spaceone.api.cost_analysis.v1.ReportAdjustmentPolicy/sync_currency"
	ReportAdjustmentPolicy_Get_FullMethodName          = "/spaceone.api.cost_analysis.v1.ReportAdjustmentPolicy/get"
	ReportAdjustmentPolicy_List_FullMethodName         = "/spaceone.api.cost_analysis.v1.ReportAdjustmentPolicy/list"
)

// ReportAdjustmentPolicyClient is the client API for ReportAdjustmentPolicy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportAdjustmentPolicyClient interface {
	Create(ctx context.Context, in *CreateReportAdjustmentPolicyRequest, opts ...grpc.CallOption) (*ReportAdjustmentPolicyInfo, error)
	Update(ctx context.Context, in *UpdateReportAdjustmentPolicyRequest, opts ...grpc.CallOption) (*ReportAdjustmentPolicyInfo, error)
	ChangeOrder(ctx context.Context, in *ChangeOrderReportAdjustmentPolicyRequest, opts ...grpc.CallOption) (*ReportAdjustmentPolicyInfo, error)
	Delete(ctx context.Context, in *ReportAdjustmentPolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SyncCurrency(ctx context.Context, in *ReportAdjustmentPolicyRequest, opts ...grpc.CallOption) (*ReportAdjustmentPolicyInfo, error)
	Get(ctx context.Context, in *ReportAdjustmentPolicyRequest, opts ...grpc.CallOption) (*ReportAdjustmentPolicyInfo, error)
	List(ctx context.Context, in *ReportAdjustmentPolicyQuery, opts ...grpc.CallOption) (*ReportAdjustmentPolicesInfo, error)
}

type reportAdjustmentPolicyClient struct {
	cc grpc.ClientConnInterface
}

func NewReportAdjustmentPolicyClient(cc grpc.ClientConnInterface) ReportAdjustmentPolicyClient {
	return &reportAdjustmentPolicyClient{cc}
}

func (c *reportAdjustmentPolicyClient) Create(ctx context.Context, in *CreateReportAdjustmentPolicyRequest, opts ...grpc.CallOption) (*ReportAdjustmentPolicyInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportAdjustmentPolicyInfo)
	err := c.cc.Invoke(ctx, ReportAdjustmentPolicy_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAdjustmentPolicyClient) Update(ctx context.Context, in *UpdateReportAdjustmentPolicyRequest, opts ...grpc.CallOption) (*ReportAdjustmentPolicyInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportAdjustmentPolicyInfo)
	err := c.cc.Invoke(ctx, ReportAdjustmentPolicy_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAdjustmentPolicyClient) ChangeOrder(ctx context.Context, in *ChangeOrderReportAdjustmentPolicyRequest, opts ...grpc.CallOption) (*ReportAdjustmentPolicyInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportAdjustmentPolicyInfo)
	err := c.cc.Invoke(ctx, ReportAdjustmentPolicy_ChangeOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAdjustmentPolicyClient) Delete(ctx context.Context, in *ReportAdjustmentPolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ReportAdjustmentPolicy_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAdjustmentPolicyClient) SyncCurrency(ctx context.Context, in *ReportAdjustmentPolicyRequest, opts ...grpc.CallOption) (*ReportAdjustmentPolicyInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportAdjustmentPolicyInfo)
	err := c.cc.Invoke(ctx, ReportAdjustmentPolicy_SyncCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAdjustmentPolicyClient) Get(ctx context.Context, in *ReportAdjustmentPolicyRequest, opts ...grpc.CallOption) (*ReportAdjustmentPolicyInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportAdjustmentPolicyInfo)
	err := c.cc.Invoke(ctx, ReportAdjustmentPolicy_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportAdjustmentPolicyClient) List(ctx context.Context, in *ReportAdjustmentPolicyQuery, opts ...grpc.CallOption) (*ReportAdjustmentPolicesInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportAdjustmentPolicesInfo)
	err := c.cc.Invoke(ctx, ReportAdjustmentPolicy_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportAdjustmentPolicyServer is the server API for ReportAdjustmentPolicy service.
// All implementations must embed UnimplementedReportAdjustmentPolicyServer
// for forward compatibility.
type ReportAdjustmentPolicyServer interface {
	Create(context.Context, *CreateReportAdjustmentPolicyRequest) (*ReportAdjustmentPolicyInfo, error)
	Update(context.Context, *UpdateReportAdjustmentPolicyRequest) (*ReportAdjustmentPolicyInfo, error)
	ChangeOrder(context.Context, *ChangeOrderReportAdjustmentPolicyRequest) (*ReportAdjustmentPolicyInfo, error)
	Delete(context.Context, *ReportAdjustmentPolicyRequest) (*empty.Empty, error)
	SyncCurrency(context.Context, *ReportAdjustmentPolicyRequest) (*ReportAdjustmentPolicyInfo, error)
	Get(context.Context, *ReportAdjustmentPolicyRequest) (*ReportAdjustmentPolicyInfo, error)
	List(context.Context, *ReportAdjustmentPolicyQuery) (*ReportAdjustmentPolicesInfo, error)
	mustEmbedUnimplementedReportAdjustmentPolicyServer()
}

// UnimplementedReportAdjustmentPolicyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReportAdjustmentPolicyServer struct{}

func (UnimplementedReportAdjustmentPolicyServer) Create(context.Context, *CreateReportAdjustmentPolicyRequest) (*ReportAdjustmentPolicyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedReportAdjustmentPolicyServer) Update(context.Context, *UpdateReportAdjustmentPolicyRequest) (*ReportAdjustmentPolicyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedReportAdjustmentPolicyServer) ChangeOrder(context.Context, *ChangeOrderReportAdjustmentPolicyRequest) (*ReportAdjustmentPolicyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeOrder not implemented")
}
func (UnimplementedReportAdjustmentPolicyServer) Delete(context.Context, *ReportAdjustmentPolicyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedReportAdjustmentPolicyServer) SyncCurrency(context.Context, *ReportAdjustmentPolicyRequest) (*ReportAdjustmentPolicyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncCurrency not implemented")
}
func (UnimplementedReportAdjustmentPolicyServer) Get(context.Context, *ReportAdjustmentPolicyRequest) (*ReportAdjustmentPolicyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedReportAdjustmentPolicyServer) List(context.Context, *ReportAdjustmentPolicyQuery) (*ReportAdjustmentPolicesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedReportAdjustmentPolicyServer) mustEmbedUnimplementedReportAdjustmentPolicyServer() {
}
func (UnimplementedReportAdjustmentPolicyServer) testEmbeddedByValue() {}

// UnsafeReportAdjustmentPolicyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportAdjustmentPolicyServer will
// result in compilation errors.
type UnsafeReportAdjustmentPolicyServer interface {
	mustEmbedUnimplementedReportAdjustmentPolicyServer()
}

func RegisterReportAdjustmentPolicyServer(s grpc.ServiceRegistrar, srv ReportAdjustmentPolicyServer) {
	// If the following call pancis, it indicates UnimplementedReportAdjustmentPolicyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReportAdjustmentPolicy_ServiceDesc, srv)
}

func _ReportAdjustmentPolicy_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReportAdjustmentPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAdjustmentPolicyServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportAdjustmentPolicy_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAdjustmentPolicyServer).Create(ctx, req.(*CreateReportAdjustmentPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportAdjustmentPolicy_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReportAdjustmentPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAdjustmentPolicyServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportAdjustmentPolicy_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAdjustmentPolicyServer).Update(ctx, req.(*UpdateReportAdjustmentPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportAdjustmentPolicy_ChangeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeOrderReportAdjustmentPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAdjustmentPolicyServer).ChangeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportAdjustmentPolicy_ChangeOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAdjustmentPolicyServer).ChangeOrder(ctx, req.(*ChangeOrderReportAdjustmentPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportAdjustmentPolicy_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportAdjustmentPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAdjustmentPolicyServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportAdjustmentPolicy_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAdjustmentPolicyServer).Delete(ctx, req.(*ReportAdjustmentPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportAdjustmentPolicy_SyncCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportAdjustmentPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAdjustmentPolicyServer).SyncCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportAdjustmentPolicy_SyncCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAdjustmentPolicyServer).SyncCurrency(ctx, req.(*ReportAdjustmentPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportAdjustmentPolicy_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportAdjustmentPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAdjustmentPolicyServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportAdjustmentPolicy_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAdjustmentPolicyServer).Get(ctx, req.(*ReportAdjustmentPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportAdjustmentPolicy_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportAdjustmentPolicyQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportAdjustmentPolicyServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportAdjustmentPolicy_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportAdjustmentPolicyServer).List(ctx, req.(*ReportAdjustmentPolicyQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportAdjustmentPolicy_ServiceDesc is the grpc.ServiceDesc for ReportAdjustmentPolicy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportAdjustmentPolicy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.cost_analysis.v1.ReportAdjustmentPolicy",
	HandlerType: (*ReportAdjustmentPolicyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _ReportAdjustmentPolicy_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _ReportAdjustmentPolicy_Update_Handler,
		},
		{
			MethodName: "change_order",
			Handler:    _ReportAdjustmentPolicy_ChangeOrder_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _ReportAdjustmentPolicy_Delete_Handler,
		},
		{
			MethodName: "sync_currency",
			Handler:    _ReportAdjustmentPolicy_SyncCurrency_Handler,
		},
		{
			MethodName: "get",
			Handler:    _ReportAdjustmentPolicy_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _ReportAdjustmentPolicy_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/cost_analysis/v1/report_adjustment_policy.proto",
}
