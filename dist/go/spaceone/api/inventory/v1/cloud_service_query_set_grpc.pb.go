// A CloudServiceQuerySet is query set for storing statistics data of CloudService.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: spaceone/api/inventory/v1/cloud_service_query_set.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudServiceQuerySet_Create_FullMethodName  = "/spaceone.api.inventory.v1.CloudServiceQuerySet/create"
	CloudServiceQuerySet_Update_FullMethodName  = "/spaceone.api.inventory.v1.CloudServiceQuerySet/update"
	CloudServiceQuerySet_Delete_FullMethodName  = "/spaceone.api.inventory.v1.CloudServiceQuerySet/delete"
	CloudServiceQuerySet_Run_FullMethodName     = "/spaceone.api.inventory.v1.CloudServiceQuerySet/run"
	CloudServiceQuerySet_Test_FullMethodName    = "/spaceone.api.inventory.v1.CloudServiceQuerySet/test"
	CloudServiceQuerySet_Enable_FullMethodName  = "/spaceone.api.inventory.v1.CloudServiceQuerySet/enable"
	CloudServiceQuerySet_Disable_FullMethodName = "/spaceone.api.inventory.v1.CloudServiceQuerySet/disable"
	CloudServiceQuerySet_Get_FullMethodName     = "/spaceone.api.inventory.v1.CloudServiceQuerySet/get"
	CloudServiceQuerySet_List_FullMethodName    = "/spaceone.api.inventory.v1.CloudServiceQuerySet/list"
	CloudServiceQuerySet_Stat_FullMethodName    = "/spaceone.api.inventory.v1.CloudServiceQuerySet/stat"
)

// CloudServiceQuerySetClient is the client API for CloudServiceQuerySet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudServiceQuerySetClient interface {
	// Create a new query set. Periodic statistics data is created based on the query set.
	// `query` parameters refer to AnalyzeQuery.
	Create(ctx context.Context, in *CreateCloudServiceQuerySetRequest, opts ...grpc.CallOption) (*CloudServiceQuerySetInfo, error)
	// Update a specific query set. You can only update the query set of custom type.
	Update(ctx context.Context, in *UpdateCloudServiceQuerySetRequest, opts ...grpc.CallOption) (*CloudServiceQuerySetInfo, error)
	// Delete a specific query set.
	Delete(ctx context.Context, in *CloudServiceQuerySetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Run a specific query set and store the result in the statistics data.
	Run(ctx context.Context, in *CloudServiceQuerySetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Run a specific query set and store the result in the statistics data.
	Test(ctx context.Context, in *CloudServiceQuerySetRequest, opts ...grpc.CallOption) (*_struct.Struct, error)
	// Enable a specific query set.
	Enable(ctx context.Context, in *CloudServiceQuerySetRequest, opts ...grpc.CallOption) (*CloudServiceQuerySetInfo, error)
	// Disable a specific query set. query set is not executed when disabled.
	Disable(ctx context.Context, in *CloudServiceQuerySetRequest, opts ...grpc.CallOption) (*CloudServiceQuerySetInfo, error)
	// Get a specific query set.
	Get(ctx context.Context, in *GetCloudServiceQuerySetRequest, opts ...grpc.CallOption) (*CloudServiceQuerySetInfo, error)
	// Gets a list of all query sets.
	// You can use a query to get a filtered list of query sets.
	List(ctx context.Context, in *CloudServiceQuerySetQuery, opts ...grpc.CallOption) (*CloudServiceQuerySetsInfo, error)
	Stat(ctx context.Context, in *CloudServiceQuerySetStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type cloudServiceQuerySetClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudServiceQuerySetClient(cc grpc.ClientConnInterface) CloudServiceQuerySetClient {
	return &cloudServiceQuerySetClient{cc}
}

func (c *cloudServiceQuerySetClient) Create(ctx context.Context, in *CreateCloudServiceQuerySetRequest, opts ...grpc.CallOption) (*CloudServiceQuerySetInfo, error) {
	out := new(CloudServiceQuerySetInfo)
	err := c.cc.Invoke(ctx, CloudServiceQuerySet_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceQuerySetClient) Update(ctx context.Context, in *UpdateCloudServiceQuerySetRequest, opts ...grpc.CallOption) (*CloudServiceQuerySetInfo, error) {
	out := new(CloudServiceQuerySetInfo)
	err := c.cc.Invoke(ctx, CloudServiceQuerySet_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceQuerySetClient) Delete(ctx context.Context, in *CloudServiceQuerySetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CloudServiceQuerySet_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceQuerySetClient) Run(ctx context.Context, in *CloudServiceQuerySetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CloudServiceQuerySet_Run_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceQuerySetClient) Test(ctx context.Context, in *CloudServiceQuerySetRequest, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, CloudServiceQuerySet_Test_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceQuerySetClient) Enable(ctx context.Context, in *CloudServiceQuerySetRequest, opts ...grpc.CallOption) (*CloudServiceQuerySetInfo, error) {
	out := new(CloudServiceQuerySetInfo)
	err := c.cc.Invoke(ctx, CloudServiceQuerySet_Enable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceQuerySetClient) Disable(ctx context.Context, in *CloudServiceQuerySetRequest, opts ...grpc.CallOption) (*CloudServiceQuerySetInfo, error) {
	out := new(CloudServiceQuerySetInfo)
	err := c.cc.Invoke(ctx, CloudServiceQuerySet_Disable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceQuerySetClient) Get(ctx context.Context, in *GetCloudServiceQuerySetRequest, opts ...grpc.CallOption) (*CloudServiceQuerySetInfo, error) {
	out := new(CloudServiceQuerySetInfo)
	err := c.cc.Invoke(ctx, CloudServiceQuerySet_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceQuerySetClient) List(ctx context.Context, in *CloudServiceQuerySetQuery, opts ...grpc.CallOption) (*CloudServiceQuerySetsInfo, error) {
	out := new(CloudServiceQuerySetsInfo)
	err := c.cc.Invoke(ctx, CloudServiceQuerySet_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceQuerySetClient) Stat(ctx context.Context, in *CloudServiceQuerySetStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, CloudServiceQuerySet_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudServiceQuerySetServer is the server API for CloudServiceQuerySet service.
// All implementations must embed UnimplementedCloudServiceQuerySetServer
// for forward compatibility
type CloudServiceQuerySetServer interface {
	// Create a new query set. Periodic statistics data is created based on the query set.
	// `query` parameters refer to AnalyzeQuery.
	Create(context.Context, *CreateCloudServiceQuerySetRequest) (*CloudServiceQuerySetInfo, error)
	// Update a specific query set. You can only update the query set of custom type.
	Update(context.Context, *UpdateCloudServiceQuerySetRequest) (*CloudServiceQuerySetInfo, error)
	// Delete a specific query set.
	Delete(context.Context, *CloudServiceQuerySetRequest) (*empty.Empty, error)
	// Run a specific query set and store the result in the statistics data.
	Run(context.Context, *CloudServiceQuerySetRequest) (*empty.Empty, error)
	// Run a specific query set and store the result in the statistics data.
	Test(context.Context, *CloudServiceQuerySetRequest) (*_struct.Struct, error)
	// Enable a specific query set.
	Enable(context.Context, *CloudServiceQuerySetRequest) (*CloudServiceQuerySetInfo, error)
	// Disable a specific query set. query set is not executed when disabled.
	Disable(context.Context, *CloudServiceQuerySetRequest) (*CloudServiceQuerySetInfo, error)
	// Get a specific query set.
	Get(context.Context, *GetCloudServiceQuerySetRequest) (*CloudServiceQuerySetInfo, error)
	// Gets a list of all query sets.
	// You can use a query to get a filtered list of query sets.
	List(context.Context, *CloudServiceQuerySetQuery) (*CloudServiceQuerySetsInfo, error)
	Stat(context.Context, *CloudServiceQuerySetStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedCloudServiceQuerySetServer()
}

// UnimplementedCloudServiceQuerySetServer must be embedded to have forward compatible implementations.
type UnimplementedCloudServiceQuerySetServer struct {
}

func (UnimplementedCloudServiceQuerySetServer) Create(context.Context, *CreateCloudServiceQuerySetRequest) (*CloudServiceQuerySetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCloudServiceQuerySetServer) Update(context.Context, *UpdateCloudServiceQuerySetRequest) (*CloudServiceQuerySetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCloudServiceQuerySetServer) Delete(context.Context, *CloudServiceQuerySetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCloudServiceQuerySetServer) Run(context.Context, *CloudServiceQuerySetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedCloudServiceQuerySetServer) Test(context.Context, *CloudServiceQuerySetRequest) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedCloudServiceQuerySetServer) Enable(context.Context, *CloudServiceQuerySetRequest) (*CloudServiceQuerySetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedCloudServiceQuerySetServer) Disable(context.Context, *CloudServiceQuerySetRequest) (*CloudServiceQuerySetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedCloudServiceQuerySetServer) Get(context.Context, *GetCloudServiceQuerySetRequest) (*CloudServiceQuerySetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCloudServiceQuerySetServer) List(context.Context, *CloudServiceQuerySetQuery) (*CloudServiceQuerySetsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCloudServiceQuerySetServer) Stat(context.Context, *CloudServiceQuerySetStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedCloudServiceQuerySetServer) mustEmbedUnimplementedCloudServiceQuerySetServer() {}

// UnsafeCloudServiceQuerySetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudServiceQuerySetServer will
// result in compilation errors.
type UnsafeCloudServiceQuerySetServer interface {
	mustEmbedUnimplementedCloudServiceQuerySetServer()
}

func RegisterCloudServiceQuerySetServer(s grpc.ServiceRegistrar, srv CloudServiceQuerySetServer) {
	s.RegisterService(&CloudServiceQuerySet_ServiceDesc, srv)
}

func _CloudServiceQuerySet_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCloudServiceQuerySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceQuerySetServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceQuerySet_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceQuerySetServer).Create(ctx, req.(*CreateCloudServiceQuerySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceQuerySet_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCloudServiceQuerySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceQuerySetServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceQuerySet_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceQuerySetServer).Update(ctx, req.(*UpdateCloudServiceQuerySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceQuerySet_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudServiceQuerySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceQuerySetServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceQuerySet_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceQuerySetServer).Delete(ctx, req.(*CloudServiceQuerySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceQuerySet_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudServiceQuerySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceQuerySetServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceQuerySet_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceQuerySetServer).Run(ctx, req.(*CloudServiceQuerySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceQuerySet_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudServiceQuerySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceQuerySetServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceQuerySet_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceQuerySetServer).Test(ctx, req.(*CloudServiceQuerySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceQuerySet_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudServiceQuerySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceQuerySetServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceQuerySet_Enable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceQuerySetServer).Enable(ctx, req.(*CloudServiceQuerySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceQuerySet_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudServiceQuerySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceQuerySetServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceQuerySet_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceQuerySetServer).Disable(ctx, req.(*CloudServiceQuerySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceQuerySet_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudServiceQuerySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceQuerySetServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceQuerySet_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceQuerySetServer).Get(ctx, req.(*GetCloudServiceQuerySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceQuerySet_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudServiceQuerySetQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceQuerySetServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceQuerySet_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceQuerySetServer).List(ctx, req.(*CloudServiceQuerySetQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceQuerySet_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudServiceQuerySetStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceQuerySetServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceQuerySet_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceQuerySetServer).Stat(ctx, req.(*CloudServiceQuerySetStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudServiceQuerySet_ServiceDesc is the grpc.ServiceDesc for CloudServiceQuerySet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudServiceQuerySet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.inventory.v1.CloudServiceQuerySet",
	HandlerType: (*CloudServiceQuerySetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _CloudServiceQuerySet_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _CloudServiceQuerySet_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _CloudServiceQuerySet_Delete_Handler,
		},
		{
			MethodName: "run",
			Handler:    _CloudServiceQuerySet_Run_Handler,
		},
		{
			MethodName: "test",
			Handler:    _CloudServiceQuerySet_Test_Handler,
		},
		{
			MethodName: "enable",
			Handler:    _CloudServiceQuerySet_Enable_Handler,
		},
		{
			MethodName: "disable",
			Handler:    _CloudServiceQuerySet_Disable_Handler,
		},
		{
			MethodName: "get",
			Handler:    _CloudServiceQuerySet_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _CloudServiceQuerySet_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _CloudServiceQuerySet_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/inventory/v1/cloud_service_query_set.proto",
}
