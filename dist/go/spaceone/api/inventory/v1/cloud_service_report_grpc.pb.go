// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/inventory/v1/cloud_service_report.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CloudServiceReport_Create_FullMethodName = "/spaceone.api.inventory.v1.CloudServiceReport/create"
	CloudServiceReport_Update_FullMethodName = "/spaceone.api.inventory.v1.CloudServiceReport/update"
	CloudServiceReport_Delete_FullMethodName = "/spaceone.api.inventory.v1.CloudServiceReport/delete"
	CloudServiceReport_Send_FullMethodName   = "/spaceone.api.inventory.v1.CloudServiceReport/send"
	CloudServiceReport_Get_FullMethodName    = "/spaceone.api.inventory.v1.CloudServiceReport/get"
	CloudServiceReport_List_FullMethodName   = "/spaceone.api.inventory.v1.CloudServiceReport/list"
	CloudServiceReport_Stat_FullMethodName   = "/spaceone.api.inventory.v1.CloudServiceReport/stat"
)

// CloudServiceReportClient is the client API for CloudServiceReport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudServiceReportClient interface {
	Create(ctx context.Context, in *CreateCloudServiceReportRequest, opts ...grpc.CallOption) (*CloudServiceReportInfo, error)
	Update(ctx context.Context, in *UpdateCloudServiceReportRequest, opts ...grpc.CallOption) (*CloudServiceReportInfo, error)
	Delete(ctx context.Context, in *CloudServiceReportRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Send(ctx context.Context, in *CloudServiceReportRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *CloudServiceReportRequest, opts ...grpc.CallOption) (*CloudServiceReportInfo, error)
	List(ctx context.Context, in *CloudServiceReportQuery, opts ...grpc.CallOption) (*CloudServiceReportsInfo, error)
	Stat(ctx context.Context, in *CloudServiceReportStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type cloudServiceReportClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudServiceReportClient(cc grpc.ClientConnInterface) CloudServiceReportClient {
	return &cloudServiceReportClient{cc}
}

func (c *cloudServiceReportClient) Create(ctx context.Context, in *CreateCloudServiceReportRequest, opts ...grpc.CallOption) (*CloudServiceReportInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloudServiceReportInfo)
	err := c.cc.Invoke(ctx, CloudServiceReport_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceReportClient) Update(ctx context.Context, in *UpdateCloudServiceReportRequest, opts ...grpc.CallOption) (*CloudServiceReportInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloudServiceReportInfo)
	err := c.cc.Invoke(ctx, CloudServiceReport_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceReportClient) Delete(ctx context.Context, in *CloudServiceReportRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CloudServiceReport_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceReportClient) Send(ctx context.Context, in *CloudServiceReportRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CloudServiceReport_Send_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceReportClient) Get(ctx context.Context, in *CloudServiceReportRequest, opts ...grpc.CallOption) (*CloudServiceReportInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloudServiceReportInfo)
	err := c.cc.Invoke(ctx, CloudServiceReport_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceReportClient) List(ctx context.Context, in *CloudServiceReportQuery, opts ...grpc.CallOption) (*CloudServiceReportsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloudServiceReportsInfo)
	err := c.cc.Invoke(ctx, CloudServiceReport_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceReportClient) Stat(ctx context.Context, in *CloudServiceReportStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, CloudServiceReport_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudServiceReportServer is the server API for CloudServiceReport service.
// All implementations must embed UnimplementedCloudServiceReportServer
// for forward compatibility.
type CloudServiceReportServer interface {
	Create(context.Context, *CreateCloudServiceReportRequest) (*CloudServiceReportInfo, error)
	Update(context.Context, *UpdateCloudServiceReportRequest) (*CloudServiceReportInfo, error)
	Delete(context.Context, *CloudServiceReportRequest) (*empty.Empty, error)
	Send(context.Context, *CloudServiceReportRequest) (*empty.Empty, error)
	Get(context.Context, *CloudServiceReportRequest) (*CloudServiceReportInfo, error)
	List(context.Context, *CloudServiceReportQuery) (*CloudServiceReportsInfo, error)
	Stat(context.Context, *CloudServiceReportStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedCloudServiceReportServer()
}

// UnimplementedCloudServiceReportServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCloudServiceReportServer struct{}

func (UnimplementedCloudServiceReportServer) Create(context.Context, *CreateCloudServiceReportRequest) (*CloudServiceReportInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCloudServiceReportServer) Update(context.Context, *UpdateCloudServiceReportRequest) (*CloudServiceReportInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCloudServiceReportServer) Delete(context.Context, *CloudServiceReportRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCloudServiceReportServer) Send(context.Context, *CloudServiceReportRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedCloudServiceReportServer) Get(context.Context, *CloudServiceReportRequest) (*CloudServiceReportInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCloudServiceReportServer) List(context.Context, *CloudServiceReportQuery) (*CloudServiceReportsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCloudServiceReportServer) Stat(context.Context, *CloudServiceReportStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedCloudServiceReportServer) mustEmbedUnimplementedCloudServiceReportServer() {}
func (UnimplementedCloudServiceReportServer) testEmbeddedByValue()                            {}

// UnsafeCloudServiceReportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudServiceReportServer will
// result in compilation errors.
type UnsafeCloudServiceReportServer interface {
	mustEmbedUnimplementedCloudServiceReportServer()
}

func RegisterCloudServiceReportServer(s grpc.ServiceRegistrar, srv CloudServiceReportServer) {
	// If the following call pancis, it indicates UnimplementedCloudServiceReportServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CloudServiceReport_ServiceDesc, srv)
}

func _CloudServiceReport_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCloudServiceReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceReportServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceReport_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceReportServer).Create(ctx, req.(*CreateCloudServiceReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceReport_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCloudServiceReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceReportServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceReport_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceReportServer).Update(ctx, req.(*UpdateCloudServiceReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceReport_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudServiceReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceReportServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceReport_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceReportServer).Delete(ctx, req.(*CloudServiceReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceReport_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudServiceReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceReportServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceReport_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceReportServer).Send(ctx, req.(*CloudServiceReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceReport_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudServiceReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceReportServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceReport_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceReportServer).Get(ctx, req.(*CloudServiceReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceReport_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudServiceReportQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceReportServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceReport_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceReportServer).List(ctx, req.(*CloudServiceReportQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceReport_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudServiceReportStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceReportServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceReport_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceReportServer).Stat(ctx, req.(*CloudServiceReportStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudServiceReport_ServiceDesc is the grpc.ServiceDesc for CloudServiceReport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudServiceReport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.inventory.v1.CloudServiceReport",
	HandlerType: (*CloudServiceReportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _CloudServiceReport_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _CloudServiceReport_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _CloudServiceReport_Delete_Handler,
		},
		{
			MethodName: "send",
			Handler:    _CloudServiceReport_Send_Handler,
		},
		{
			MethodName: "get",
			Handler:    _CloudServiceReport_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _CloudServiceReport_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _CloudServiceReport_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/inventory/v1/cloud_service_report.proto",
}
