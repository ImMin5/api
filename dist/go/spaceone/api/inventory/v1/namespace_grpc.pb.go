// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/inventory/v1/namespace.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Namespace_Create_FullMethodName = "/spaceone.api.inventory.v1.Namespace/create"
	Namespace_Update_FullMethodName = "/spaceone.api.inventory.v1.Namespace/update"
	Namespace_Delete_FullMethodName = "/spaceone.api.inventory.v1.Namespace/delete"
	Namespace_Get_FullMethodName    = "/spaceone.api.inventory.v1.Namespace/get"
	Namespace_List_FullMethodName   = "/spaceone.api.inventory.v1.Namespace/list"
	Namespace_Stat_FullMethodName   = "/spaceone.api.inventory.v1.Namespace/stat"
)

// NamespaceClient is the client API for Namespace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamespaceClient interface {
	// Create a new namespace.
	Create(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*NamespaceInfo, error)
	// Update a specific namespace.
	Update(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*NamespaceInfo, error)
	// Delete a specific namespace.
	Delete(ctx context.Context, in *NamespaceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get a specific namespace.
	Get(ctx context.Context, in *NamespaceRequest, opts ...grpc.CallOption) (*NamespaceInfo, error)
	// List namespaces.
	List(ctx context.Context, in *NamespaceQuery, opts ...grpc.CallOption) (*NamespacesInfo, error)
	// Get statistics of namespaces.
	Stat(ctx context.Context, in *NamespaceStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type namespaceClient struct {
	cc grpc.ClientConnInterface
}

func NewNamespaceClient(cc grpc.ClientConnInterface) NamespaceClient {
	return &namespaceClient{cc}
}

func (c *namespaceClient) Create(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*NamespaceInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NamespaceInfo)
	err := c.cc.Invoke(ctx, Namespace_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) Update(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*NamespaceInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NamespaceInfo)
	err := c.cc.Invoke(ctx, Namespace_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) Delete(ctx context.Context, in *NamespaceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Namespace_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) Get(ctx context.Context, in *NamespaceRequest, opts ...grpc.CallOption) (*NamespaceInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NamespaceInfo)
	err := c.cc.Invoke(ctx, Namespace_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) List(ctx context.Context, in *NamespaceQuery, opts ...grpc.CallOption) (*NamespacesInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NamespacesInfo)
	err := c.cc.Invoke(ctx, Namespace_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) Stat(ctx context.Context, in *NamespaceStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Namespace_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespaceServer is the server API for Namespace service.
// All implementations must embed UnimplementedNamespaceServer
// for forward compatibility.
type NamespaceServer interface {
	// Create a new namespace.
	Create(context.Context, *CreateNamespaceRequest) (*NamespaceInfo, error)
	// Update a specific namespace.
	Update(context.Context, *UpdateNamespaceRequest) (*NamespaceInfo, error)
	// Delete a specific namespace.
	Delete(context.Context, *NamespaceRequest) (*empty.Empty, error)
	// Get a specific namespace.
	Get(context.Context, *NamespaceRequest) (*NamespaceInfo, error)
	// List namespaces.
	List(context.Context, *NamespaceQuery) (*NamespacesInfo, error)
	// Get statistics of namespaces.
	Stat(context.Context, *NamespaceStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedNamespaceServer()
}

// UnimplementedNamespaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNamespaceServer struct{}

func (UnimplementedNamespaceServer) Create(context.Context, *CreateNamespaceRequest) (*NamespaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNamespaceServer) Update(context.Context, *UpdateNamespaceRequest) (*NamespaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedNamespaceServer) Delete(context.Context, *NamespaceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNamespaceServer) Get(context.Context, *NamespaceRequest) (*NamespaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedNamespaceServer) List(context.Context, *NamespaceQuery) (*NamespacesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedNamespaceServer) Stat(context.Context, *NamespaceStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedNamespaceServer) mustEmbedUnimplementedNamespaceServer() {}
func (UnimplementedNamespaceServer) testEmbeddedByValue()                   {}

// UnsafeNamespaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamespaceServer will
// result in compilation errors.
type UnsafeNamespaceServer interface {
	mustEmbedUnimplementedNamespaceServer()
}

func RegisterNamespaceServer(s grpc.ServiceRegistrar, srv NamespaceServer) {
	// If the following call pancis, it indicates UnimplementedNamespaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Namespace_ServiceDesc, srv)
}

func _Namespace_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Namespace_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).Create(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Namespace_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).Update(ctx, req.(*UpdateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Namespace_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).Delete(ctx, req.(*NamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Namespace_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).Get(ctx, req.(*NamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Namespace_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).List(ctx, req.(*NamespaceQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Namespace_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).Stat(ctx, req.(*NamespaceStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Namespace_ServiceDesc is the grpc.ServiceDesc for Namespace service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Namespace_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.inventory.v1.Namespace",
	HandlerType: (*NamespaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Namespace_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _Namespace_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Namespace_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Namespace_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Namespace_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _Namespace_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/inventory/v1/namespace.proto",
}
