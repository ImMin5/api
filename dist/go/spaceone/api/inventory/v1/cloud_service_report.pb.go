// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.6.1
// source: spaceone/api/inventory/v1/cloud_service_report.proto

package v1

import (
	v1 "github.com/cloudforet-io/api/dist/go/spaceone/api/core/v1"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReportSchedule_ScheduleState int32

const (
	ReportSchedule_SCHEDULE_STATE_NONE ReportSchedule_ScheduleState = 0
	ReportSchedule_ENABLED             ReportSchedule_ScheduleState = 1
	ReportSchedule_DISABLED            ReportSchedule_ScheduleState = 2
)

// Enum value maps for ReportSchedule_ScheduleState.
var (
	ReportSchedule_ScheduleState_name = map[int32]string{
		0: "SCHEDULE_STATE_NONE",
		1: "ENABLED",
		2: "DISABLED",
	}
	ReportSchedule_ScheduleState_value = map[string]int32{
		"SCHEDULE_STATE_NONE": 0,
		"ENABLED":             1,
		"DISABLED":            2,
	}
)

func (x ReportSchedule_ScheduleState) Enum() *ReportSchedule_ScheduleState {
	p := new(ReportSchedule_ScheduleState)
	*p = x
	return p
}

func (x ReportSchedule_ScheduleState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportSchedule_ScheduleState) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_enumTypes[0].Descriptor()
}

func (ReportSchedule_ScheduleState) Type() protoreflect.EnumType {
	return &file_spaceone_api_inventory_v1_cloud_service_report_proto_enumTypes[0]
}

func (x ReportSchedule_ScheduleState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportSchedule_ScheduleState.Descriptor instead.
func (ReportSchedule_ScheduleState) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescGZIP(), []int{0, 0}
}

type ReportSchedule_DayOfWeek int32

const (
	ReportSchedule_DAY_OF_WEEK_NONE ReportSchedule_DayOfWeek = 0
	ReportSchedule_MON              ReportSchedule_DayOfWeek = 1
	ReportSchedule_TUE              ReportSchedule_DayOfWeek = 2
	ReportSchedule_WED              ReportSchedule_DayOfWeek = 3
	ReportSchedule_THU              ReportSchedule_DayOfWeek = 4
	ReportSchedule_FRI              ReportSchedule_DayOfWeek = 5
	ReportSchedule_SAT              ReportSchedule_DayOfWeek = 6
	ReportSchedule_SUN              ReportSchedule_DayOfWeek = 7
)

// Enum value maps for ReportSchedule_DayOfWeek.
var (
	ReportSchedule_DayOfWeek_name = map[int32]string{
		0: "DAY_OF_WEEK_NONE",
		1: "MON",
		2: "TUE",
		3: "WED",
		4: "THU",
		5: "FRI",
		6: "SAT",
		7: "SUN",
	}
	ReportSchedule_DayOfWeek_value = map[string]int32{
		"DAY_OF_WEEK_NONE": 0,
		"MON":              1,
		"TUE":              2,
		"WED":              3,
		"THU":              4,
		"FRI":              5,
		"SAT":              6,
		"SUN":              7,
	}
)

func (x ReportSchedule_DayOfWeek) Enum() *ReportSchedule_DayOfWeek {
	p := new(ReportSchedule_DayOfWeek)
	*p = x
	return p
}

func (x ReportSchedule_DayOfWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportSchedule_DayOfWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_enumTypes[1].Descriptor()
}

func (ReportSchedule_DayOfWeek) Type() protoreflect.EnumType {
	return &file_spaceone_api_inventory_v1_cloud_service_report_proto_enumTypes[1]
}

func (x ReportSchedule_DayOfWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportSchedule_DayOfWeek.Descriptor instead.
func (ReportSchedule_DayOfWeek) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescGZIP(), []int{0, 1}
}

type CreateCloudServiceReportRequest_FileFormat int32

const (
	CreateCloudServiceReportRequest_NONE_FILE_FORMAT CreateCloudServiceReportRequest_FileFormat = 0
	CreateCloudServiceReportRequest_EXCEL            CreateCloudServiceReportRequest_FileFormat = 1
	CreateCloudServiceReportRequest_CSV              CreateCloudServiceReportRequest_FileFormat = 2
)

// Enum value maps for CreateCloudServiceReportRequest_FileFormat.
var (
	CreateCloudServiceReportRequest_FileFormat_name = map[int32]string{
		0: "NONE_FILE_FORMAT",
		1: "EXCEL",
		2: "CSV",
	}
	CreateCloudServiceReportRequest_FileFormat_value = map[string]int32{
		"NONE_FILE_FORMAT": 0,
		"EXCEL":            1,
		"CSV":              2,
	}
)

func (x CreateCloudServiceReportRequest_FileFormat) Enum() *CreateCloudServiceReportRequest_FileFormat {
	p := new(CreateCloudServiceReportRequest_FileFormat)
	*p = x
	return p
}

func (x CreateCloudServiceReportRequest_FileFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateCloudServiceReportRequest_FileFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_enumTypes[2].Descriptor()
}

func (CreateCloudServiceReportRequest_FileFormat) Type() protoreflect.EnumType {
	return &file_spaceone_api_inventory_v1_cloud_service_report_proto_enumTypes[2]
}

func (x CreateCloudServiceReportRequest_FileFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateCloudServiceReportRequest_FileFormat.Descriptor instead.
func (CreateCloudServiceReportRequest_FileFormat) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescGZIP(), []int{1, 0}
}

type CreateCloudServiceReportRequest_ResourceGroup int32

const (
	CreateCloudServiceReportRequest_RESOURCE_GROUP_NONE CreateCloudServiceReportRequest_ResourceGroup = 0
	CreateCloudServiceReportRequest_DOMAIN              CreateCloudServiceReportRequest_ResourceGroup = 1
	CreateCloudServiceReportRequest_WORKSPACE           CreateCloudServiceReportRequest_ResourceGroup = 2
)

// Enum value maps for CreateCloudServiceReportRequest_ResourceGroup.
var (
	CreateCloudServiceReportRequest_ResourceGroup_name = map[int32]string{
		0: "RESOURCE_GROUP_NONE",
		1: "DOMAIN",
		2: "WORKSPACE",
	}
	CreateCloudServiceReportRequest_ResourceGroup_value = map[string]int32{
		"RESOURCE_GROUP_NONE": 0,
		"DOMAIN":              1,
		"WORKSPACE":           2,
	}
)

func (x CreateCloudServiceReportRequest_ResourceGroup) Enum() *CreateCloudServiceReportRequest_ResourceGroup {
	p := new(CreateCloudServiceReportRequest_ResourceGroup)
	*p = x
	return p
}

func (x CreateCloudServiceReportRequest_ResourceGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateCloudServiceReportRequest_ResourceGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_enumTypes[3].Descriptor()
}

func (CreateCloudServiceReportRequest_ResourceGroup) Type() protoreflect.EnumType {
	return &file_spaceone_api_inventory_v1_cloud_service_report_proto_enumTypes[3]
}

func (x CreateCloudServiceReportRequest_ResourceGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateCloudServiceReportRequest_ResourceGroup.Descriptor instead.
func (CreateCloudServiceReportRequest_ResourceGroup) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescGZIP(), []int{1, 1}
}

type UpdateCloudServiceReportRequest_FileFormat int32

const (
	UpdateCloudServiceReportRequest_NONE_FILE_FORMAT UpdateCloudServiceReportRequest_FileFormat = 0
	UpdateCloudServiceReportRequest_EXCEL            UpdateCloudServiceReportRequest_FileFormat = 1
	UpdateCloudServiceReportRequest_CSV              UpdateCloudServiceReportRequest_FileFormat = 2
)

// Enum value maps for UpdateCloudServiceReportRequest_FileFormat.
var (
	UpdateCloudServiceReportRequest_FileFormat_name = map[int32]string{
		0: "NONE_FILE_FORMAT",
		1: "EXCEL",
		2: "CSV",
	}
	UpdateCloudServiceReportRequest_FileFormat_value = map[string]int32{
		"NONE_FILE_FORMAT": 0,
		"EXCEL":            1,
		"CSV":              2,
	}
)

func (x UpdateCloudServiceReportRequest_FileFormat) Enum() *UpdateCloudServiceReportRequest_FileFormat {
	p := new(UpdateCloudServiceReportRequest_FileFormat)
	*p = x
	return p
}

func (x UpdateCloudServiceReportRequest_FileFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateCloudServiceReportRequest_FileFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_enumTypes[4].Descriptor()
}

func (UpdateCloudServiceReportRequest_FileFormat) Type() protoreflect.EnumType {
	return &file_spaceone_api_inventory_v1_cloud_service_report_proto_enumTypes[4]
}

func (x UpdateCloudServiceReportRequest_FileFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateCloudServiceReportRequest_FileFormat.Descriptor instead.
func (UpdateCloudServiceReportRequest_FileFormat) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescGZIP(), []int{2, 0}
}

type CloudServiceReportInfo_FileFormat int32

const (
	CloudServiceReportInfo_NONE_FILE_FORMAT CloudServiceReportInfo_FileFormat = 0
	CloudServiceReportInfo_EXCEL            CloudServiceReportInfo_FileFormat = 1
	CloudServiceReportInfo_CSV              CloudServiceReportInfo_FileFormat = 2
)

// Enum value maps for CloudServiceReportInfo_FileFormat.
var (
	CloudServiceReportInfo_FileFormat_name = map[int32]string{
		0: "NONE_FILE_FORMAT",
		1: "EXCEL",
		2: "CSV",
	}
	CloudServiceReportInfo_FileFormat_value = map[string]int32{
		"NONE_FILE_FORMAT": 0,
		"EXCEL":            1,
		"CSV":              2,
	}
)

func (x CloudServiceReportInfo_FileFormat) Enum() *CloudServiceReportInfo_FileFormat {
	p := new(CloudServiceReportInfo_FileFormat)
	*p = x
	return p
}

func (x CloudServiceReportInfo_FileFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudServiceReportInfo_FileFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_enumTypes[5].Descriptor()
}

func (CloudServiceReportInfo_FileFormat) Type() protoreflect.EnumType {
	return &file_spaceone_api_inventory_v1_cloud_service_report_proto_enumTypes[5]
}

func (x CloudServiceReportInfo_FileFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudServiceReportInfo_FileFormat.Descriptor instead.
func (CloudServiceReportInfo_FileFormat) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescGZIP(), []int{5, 0}
}

type CloudServiceReportInfo_ResourceGroup int32

const (
	CloudServiceReportInfo_RESOURCE_GROUP_NONE CloudServiceReportInfo_ResourceGroup = 0
	CloudServiceReportInfo_DOMAIN              CloudServiceReportInfo_ResourceGroup = 1
	CloudServiceReportInfo_WORKSPACE           CloudServiceReportInfo_ResourceGroup = 2
)

// Enum value maps for CloudServiceReportInfo_ResourceGroup.
var (
	CloudServiceReportInfo_ResourceGroup_name = map[int32]string{
		0: "RESOURCE_GROUP_NONE",
		1: "DOMAIN",
		2: "WORKSPACE",
	}
	CloudServiceReportInfo_ResourceGroup_value = map[string]int32{
		"RESOURCE_GROUP_NONE": 0,
		"DOMAIN":              1,
		"WORKSPACE":           2,
	}
)

func (x CloudServiceReportInfo_ResourceGroup) Enum() *CloudServiceReportInfo_ResourceGroup {
	p := new(CloudServiceReportInfo_ResourceGroup)
	*p = x
	return p
}

func (x CloudServiceReportInfo_ResourceGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudServiceReportInfo_ResourceGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_enumTypes[6].Descriptor()
}

func (CloudServiceReportInfo_ResourceGroup) Type() protoreflect.EnumType {
	return &file_spaceone_api_inventory_v1_cloud_service_report_proto_enumTypes[6]
}

func (x CloudServiceReportInfo_ResourceGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudServiceReportInfo_ResourceGroup.Descriptor instead.
func (CloudServiceReportInfo_ResourceGroup) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescGZIP(), []int{5, 1}
}

type ReportSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      ReportSchedule_ScheduleState `protobuf:"varint,1,opt,name=state,proto3,enum=spaceone.api.inventory.v1.ReportSchedule_ScheduleState" json:"state,omitempty"`
	Hours      []int32                      `protobuf:"varint,2,rep,packed,name=hours,proto3" json:"hours,omitempty"`
	DaysOfWeek []ReportSchedule_DayOfWeek   `protobuf:"varint,3,rep,packed,name=days_of_week,json=daysOfWeek,proto3,enum=spaceone.api.inventory.v1.ReportSchedule_DayOfWeek" json:"days_of_week,omitempty"`
}

func (x *ReportSchedule) Reset() {
	*x = ReportSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportSchedule) ProtoMessage() {}

func (x *ReportSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportSchedule.ProtoReflect.Descriptor instead.
func (*ReportSchedule) Descriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescGZIP(), []int{0}
}

func (x *ReportSchedule) GetState() ReportSchedule_ScheduleState {
	if x != nil {
		return x.State
	}
	return ReportSchedule_SCHEDULE_STATE_NONE
}

func (x *ReportSchedule) GetHours() []int32 {
	if x != nil {
		return x.Hours
	}
	return nil
}

func (x *ReportSchedule) GetDaysOfWeek() []ReportSchedule_DayOfWeek {
	if x != nil {
		return x.DaysOfWeek
	}
	return nil
}

type CreateCloudServiceReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Options []*v1.ExportOption `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	// +optional
	FileFormat CreateCloudServiceReportRequest_FileFormat `protobuf:"varint,3,opt,name=file_format,json=fileFormat,proto3,enum=spaceone.api.inventory.v1.CreateCloudServiceReportRequest_FileFormat" json:"file_format,omitempty"`
	// +optional
	Timezone string `protobuf:"bytes,4,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// +optional
	Language string          `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`
	Schedule *ReportSchedule `protobuf:"bytes,6,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Target   *_struct.Struct `protobuf:"bytes,7,opt,name=target,proto3" json:"target,omitempty"`
	// +optional
	Tags          *_struct.Struct                               `protobuf:"bytes,8,opt,name=tags,proto3" json:"tags,omitempty"`
	ResourceGroup CreateCloudServiceReportRequest_ResourceGroup `protobuf:"varint,20,opt,name=resource_group,json=resourceGroup,proto3,enum=spaceone.api.inventory.v1.CreateCloudServiceReportRequest_ResourceGroup" json:"resource_group,omitempty"`
	// +optional
	WorkspaceId string `protobuf:"bytes,21,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *CreateCloudServiceReportRequest) Reset() {
	*x = CreateCloudServiceReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCloudServiceReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudServiceReportRequest) ProtoMessage() {}

func (x *CreateCloudServiceReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudServiceReportRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudServiceReportRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCloudServiceReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCloudServiceReportRequest) GetOptions() []*v1.ExportOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CreateCloudServiceReportRequest) GetFileFormat() CreateCloudServiceReportRequest_FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return CreateCloudServiceReportRequest_NONE_FILE_FORMAT
}

func (x *CreateCloudServiceReportRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *CreateCloudServiceReportRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *CreateCloudServiceReportRequest) GetSchedule() *ReportSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *CreateCloudServiceReportRequest) GetTarget() *_struct.Struct {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *CreateCloudServiceReportRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateCloudServiceReportRequest) GetResourceGroup() CreateCloudServiceReportRequest_ResourceGroup {
	if x != nil {
		return x.ResourceGroup
	}
	return CreateCloudServiceReportRequest_RESOURCE_GROUP_NONE
}

func (x *CreateCloudServiceReportRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type UpdateCloudServiceReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	Options []*v1.ExportOption `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
	// +optional
	FileFormat UpdateCloudServiceReportRequest_FileFormat `protobuf:"varint,4,opt,name=file_format,json=fileFormat,proto3,enum=spaceone.api.inventory.v1.UpdateCloudServiceReportRequest_FileFormat" json:"file_format,omitempty"`
	// +optional
	Timezone string `protobuf:"bytes,5,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// +optional
	Language string `protobuf:"bytes,6,opt,name=language,proto3" json:"language,omitempty"`
	// +optional
	Schedule *ReportSchedule `protobuf:"bytes,7,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// +optional
	Target *_struct.Struct `protobuf:"bytes,8,opt,name=target,proto3" json:"target,omitempty"`
	// +optional
	Tags *_struct.Struct `protobuf:"bytes,9,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *UpdateCloudServiceReportRequest) Reset() {
	*x = UpdateCloudServiceReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloudServiceReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudServiceReportRequest) ProtoMessage() {}

func (x *UpdateCloudServiceReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudServiceReportRequest.ProtoReflect.Descriptor instead.
func (*UpdateCloudServiceReportRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateCloudServiceReportRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *UpdateCloudServiceReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCloudServiceReportRequest) GetOptions() []*v1.ExportOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *UpdateCloudServiceReportRequest) GetFileFormat() UpdateCloudServiceReportRequest_FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return UpdateCloudServiceReportRequest_NONE_FILE_FORMAT
}

func (x *UpdateCloudServiceReportRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *UpdateCloudServiceReportRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *UpdateCloudServiceReportRequest) GetSchedule() *ReportSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *UpdateCloudServiceReportRequest) GetTarget() *_struct.Struct {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *UpdateCloudServiceReportRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CloudServiceReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
}

func (x *CloudServiceReportRequest) Reset() {
	*x = CloudServiceReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudServiceReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudServiceReportRequest) ProtoMessage() {}

func (x *CloudServiceReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudServiceReportRequest.ProtoReflect.Descriptor instead.
func (*CloudServiceReportRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescGZIP(), []int{3}
}

func (x *CloudServiceReportRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

type CloudServiceReportQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +optional
	Query *v1.Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// +optional
	ReportId string `protobuf:"bytes,2,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	WorkspaceId string `protobuf:"bytes,21,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *CloudServiceReportQuery) Reset() {
	*x = CloudServiceReportQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudServiceReportQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudServiceReportQuery) ProtoMessage() {}

func (x *CloudServiceReportQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudServiceReportQuery.ProtoReflect.Descriptor instead.
func (*CloudServiceReportQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescGZIP(), []int{4}
}

func (x *CloudServiceReportQuery) GetQuery() *v1.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *CloudServiceReportQuery) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *CloudServiceReportQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudServiceReportQuery) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type CloudServiceReportInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId      string                               `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	Name          string                               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Options       []*v1.ExportOption                   `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
	FileFormat    CloudServiceReportInfo_FileFormat    `protobuf:"varint,4,opt,name=file_format,json=fileFormat,proto3,enum=spaceone.api.inventory.v1.CloudServiceReportInfo_FileFormat" json:"file_format,omitempty"`
	Timezone      string                               `protobuf:"bytes,5,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Language      string                               `protobuf:"bytes,6,opt,name=language,proto3" json:"language,omitempty"`
	Schedule      *ReportSchedule                      `protobuf:"bytes,7,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Target        *_struct.Struct                      `protobuf:"bytes,8,opt,name=target,proto3" json:"target,omitempty"`
	Tags          *_struct.Struct                      `protobuf:"bytes,9,opt,name=tags,proto3" json:"tags,omitempty"`
	ResourceGroup CloudServiceReportInfo_ResourceGroup `protobuf:"varint,20,opt,name=resource_group,json=resourceGroup,proto3,enum=spaceone.api.inventory.v1.CloudServiceReportInfo_ResourceGroup" json:"resource_group,omitempty"`
	DomainId      string                               `protobuf:"bytes,21,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WorkspaceId   string                               `protobuf:"bytes,22,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	CreatedAt     string                               `protobuf:"bytes,31,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastSentAt    string                               `protobuf:"bytes,32,opt,name=last_sent_at,json=lastSentAt,proto3" json:"last_sent_at,omitempty"`
}

func (x *CloudServiceReportInfo) Reset() {
	*x = CloudServiceReportInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudServiceReportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudServiceReportInfo) ProtoMessage() {}

func (x *CloudServiceReportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudServiceReportInfo.ProtoReflect.Descriptor instead.
func (*CloudServiceReportInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescGZIP(), []int{5}
}

func (x *CloudServiceReportInfo) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *CloudServiceReportInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudServiceReportInfo) GetOptions() []*v1.ExportOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CloudServiceReportInfo) GetFileFormat() CloudServiceReportInfo_FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return CloudServiceReportInfo_NONE_FILE_FORMAT
}

func (x *CloudServiceReportInfo) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *CloudServiceReportInfo) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *CloudServiceReportInfo) GetSchedule() *ReportSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *CloudServiceReportInfo) GetTarget() *_struct.Struct {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *CloudServiceReportInfo) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CloudServiceReportInfo) GetResourceGroup() CloudServiceReportInfo_ResourceGroup {
	if x != nil {
		return x.ResourceGroup
	}
	return CloudServiceReportInfo_RESOURCE_GROUP_NONE
}

func (x *CloudServiceReportInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *CloudServiceReportInfo) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *CloudServiceReportInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CloudServiceReportInfo) GetLastSentAt() string {
	if x != nil {
		return x.LastSentAt
	}
	return ""
}

type CloudServiceReportsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results    []*CloudServiceReportInfo `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TotalCount int32                     `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *CloudServiceReportsInfo) Reset() {
	*x = CloudServiceReportsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudServiceReportsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudServiceReportsInfo) ProtoMessage() {}

func (x *CloudServiceReportsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudServiceReportsInfo.ProtoReflect.Descriptor instead.
func (*CloudServiceReportsInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescGZIP(), []int{6}
}

func (x *CloudServiceReportsInfo) GetResults() []*CloudServiceReportInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CloudServiceReportsInfo) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type CloudServiceReportStatQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *v1.StatisticsQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *CloudServiceReportStatQuery) Reset() {
	*x = CloudServiceReportStatQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudServiceReportStatQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudServiceReportStatQuery) ProtoMessage() {}

func (x *CloudServiceReportStatQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudServiceReportStatQuery.ProtoReflect.Descriptor instead.
func (*CloudServiceReportStatQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescGZIP(), []int{7}
}

func (x *CloudServiceReportStatQuery) GetQuery() *v1.StatisticsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

var File_spaceone_api_inventory_v1_cloud_service_report_proto protoreflect.FileDescriptor

var file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDesc = []byte{
	0x0a, 0x34, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x02, 0x0a,
	0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x4d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x68,
	0x6f, 0x75, 0x72, 0x73, 0x12, 0x55, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f,
	0x77, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x52,
	0x0a, 0x64, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x22, 0x43, 0x0a, 0x0d, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x22, 0x60, 0x0a, 0x09, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x14, 0x0a,
	0x10, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x54, 0x55, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x44, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x54, 0x48, 0x55, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x52, 0x49, 0x10, 0x05,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x41, 0x54, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4e,
	0x10, 0x07, 0x22, 0xc9, 0x05, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x66, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x6f, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x36, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x58, 0x43, 0x45, 0x4c, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x43, 0x53, 0x56, 0x10, 0x02, 0x22, 0x43, 0x0a, 0x0d, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x02, 0x22, 0x8d,
	0x04, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x66, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x66,
	0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x36, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x58,
	0x43, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x53, 0x56, 0x10, 0x02, 0x22, 0x38,
	0x0a, 0x19, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x17, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xa9, 0x06, 0x0a, 0x16,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x66, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x22, 0x36, 0x0a, 0x0a, 0x46, 0x69,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x4e, 0x45,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x58, 0x43, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x53, 0x56,
	0x10, 0x02, 0x22, 0x43, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x4f, 0x52, 0x4b,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x02, 0x22, 0x87, 0x01, 0x0a, 0x17, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x5a, 0x0a, 0x1b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x3b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x32, 0xe5, 0x08,
	0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0xad, 0x01, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x3a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x34,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x3a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x34,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x34, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x34, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x34, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x12, 0xa1,
	0x01, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x34, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x67,
	0x65, 0x74, 0x12, 0xa2, 0x01, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x32, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27,
	0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74,
	0x12, 0x36, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x72, 0x65, 0x74, 0x2d, 0x69,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescOnce sync.Once
	file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescData = file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDesc
)

func file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescGZIP() []byte {
	file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescOnce.Do(func() {
		file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescData = protoimpl.X.CompressGZIP(file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescData)
	})
	return file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDescData
}

var file_spaceone_api_inventory_v1_cloud_service_report_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_spaceone_api_inventory_v1_cloud_service_report_proto_goTypes = []interface{}{
	(ReportSchedule_ScheduleState)(0),                  // 0: spaceone.api.inventory.v1.ReportSchedule.ScheduleState
	(ReportSchedule_DayOfWeek)(0),                      // 1: spaceone.api.inventory.v1.ReportSchedule.DayOfWeek
	(CreateCloudServiceReportRequest_FileFormat)(0),    // 2: spaceone.api.inventory.v1.CreateCloudServiceReportRequest.FileFormat
	(CreateCloudServiceReportRequest_ResourceGroup)(0), // 3: spaceone.api.inventory.v1.CreateCloudServiceReportRequest.ResourceGroup
	(UpdateCloudServiceReportRequest_FileFormat)(0),    // 4: spaceone.api.inventory.v1.UpdateCloudServiceReportRequest.FileFormat
	(CloudServiceReportInfo_FileFormat)(0),             // 5: spaceone.api.inventory.v1.CloudServiceReportInfo.FileFormat
	(CloudServiceReportInfo_ResourceGroup)(0),          // 6: spaceone.api.inventory.v1.CloudServiceReportInfo.ResourceGroup
	(*ReportSchedule)(nil),                             // 7: spaceone.api.inventory.v1.ReportSchedule
	(*CreateCloudServiceReportRequest)(nil),            // 8: spaceone.api.inventory.v1.CreateCloudServiceReportRequest
	(*UpdateCloudServiceReportRequest)(nil),            // 9: spaceone.api.inventory.v1.UpdateCloudServiceReportRequest
	(*CloudServiceReportRequest)(nil),                  // 10: spaceone.api.inventory.v1.CloudServiceReportRequest
	(*CloudServiceReportQuery)(nil),                    // 11: spaceone.api.inventory.v1.CloudServiceReportQuery
	(*CloudServiceReportInfo)(nil),                     // 12: spaceone.api.inventory.v1.CloudServiceReportInfo
	(*CloudServiceReportsInfo)(nil),                    // 13: spaceone.api.inventory.v1.CloudServiceReportsInfo
	(*CloudServiceReportStatQuery)(nil),                // 14: spaceone.api.inventory.v1.CloudServiceReportStatQuery
	(*v1.ExportOption)(nil),                            // 15: spaceone.api.core.v1.ExportOption
	(*_struct.Struct)(nil),                             // 16: google.protobuf.Struct
	(*v1.Query)(nil),                                   // 17: spaceone.api.core.v1.Query
	(*v1.StatisticsQuery)(nil),                         // 18: spaceone.api.core.v1.StatisticsQuery
	(*empty.Empty)(nil),                                // 19: google.protobuf.Empty
}
var file_spaceone_api_inventory_v1_cloud_service_report_proto_depIdxs = []int32{
	0,  // 0: spaceone.api.inventory.v1.ReportSchedule.state:type_name -> spaceone.api.inventory.v1.ReportSchedule.ScheduleState
	1,  // 1: spaceone.api.inventory.v1.ReportSchedule.days_of_week:type_name -> spaceone.api.inventory.v1.ReportSchedule.DayOfWeek
	15, // 2: spaceone.api.inventory.v1.CreateCloudServiceReportRequest.options:type_name -> spaceone.api.core.v1.ExportOption
	2,  // 3: spaceone.api.inventory.v1.CreateCloudServiceReportRequest.file_format:type_name -> spaceone.api.inventory.v1.CreateCloudServiceReportRequest.FileFormat
	7,  // 4: spaceone.api.inventory.v1.CreateCloudServiceReportRequest.schedule:type_name -> spaceone.api.inventory.v1.ReportSchedule
	16, // 5: spaceone.api.inventory.v1.CreateCloudServiceReportRequest.target:type_name -> google.protobuf.Struct
	16, // 6: spaceone.api.inventory.v1.CreateCloudServiceReportRequest.tags:type_name -> google.protobuf.Struct
	3,  // 7: spaceone.api.inventory.v1.CreateCloudServiceReportRequest.resource_group:type_name -> spaceone.api.inventory.v1.CreateCloudServiceReportRequest.ResourceGroup
	15, // 8: spaceone.api.inventory.v1.UpdateCloudServiceReportRequest.options:type_name -> spaceone.api.core.v1.ExportOption
	4,  // 9: spaceone.api.inventory.v1.UpdateCloudServiceReportRequest.file_format:type_name -> spaceone.api.inventory.v1.UpdateCloudServiceReportRequest.FileFormat
	7,  // 10: spaceone.api.inventory.v1.UpdateCloudServiceReportRequest.schedule:type_name -> spaceone.api.inventory.v1.ReportSchedule
	16, // 11: spaceone.api.inventory.v1.UpdateCloudServiceReportRequest.target:type_name -> google.protobuf.Struct
	16, // 12: spaceone.api.inventory.v1.UpdateCloudServiceReportRequest.tags:type_name -> google.protobuf.Struct
	17, // 13: spaceone.api.inventory.v1.CloudServiceReportQuery.query:type_name -> spaceone.api.core.v1.Query
	15, // 14: spaceone.api.inventory.v1.CloudServiceReportInfo.options:type_name -> spaceone.api.core.v1.ExportOption
	5,  // 15: spaceone.api.inventory.v1.CloudServiceReportInfo.file_format:type_name -> spaceone.api.inventory.v1.CloudServiceReportInfo.FileFormat
	7,  // 16: spaceone.api.inventory.v1.CloudServiceReportInfo.schedule:type_name -> spaceone.api.inventory.v1.ReportSchedule
	16, // 17: spaceone.api.inventory.v1.CloudServiceReportInfo.target:type_name -> google.protobuf.Struct
	16, // 18: spaceone.api.inventory.v1.CloudServiceReportInfo.tags:type_name -> google.protobuf.Struct
	6,  // 19: spaceone.api.inventory.v1.CloudServiceReportInfo.resource_group:type_name -> spaceone.api.inventory.v1.CloudServiceReportInfo.ResourceGroup
	12, // 20: spaceone.api.inventory.v1.CloudServiceReportsInfo.results:type_name -> spaceone.api.inventory.v1.CloudServiceReportInfo
	18, // 21: spaceone.api.inventory.v1.CloudServiceReportStatQuery.query:type_name -> spaceone.api.core.v1.StatisticsQuery
	8,  // 22: spaceone.api.inventory.v1.CloudServiceReport.create:input_type -> spaceone.api.inventory.v1.CreateCloudServiceReportRequest
	9,  // 23: spaceone.api.inventory.v1.CloudServiceReport.update:input_type -> spaceone.api.inventory.v1.UpdateCloudServiceReportRequest
	10, // 24: spaceone.api.inventory.v1.CloudServiceReport.delete:input_type -> spaceone.api.inventory.v1.CloudServiceReportRequest
	10, // 25: spaceone.api.inventory.v1.CloudServiceReport.send:input_type -> spaceone.api.inventory.v1.CloudServiceReportRequest
	10, // 26: spaceone.api.inventory.v1.CloudServiceReport.get:input_type -> spaceone.api.inventory.v1.CloudServiceReportRequest
	11, // 27: spaceone.api.inventory.v1.CloudServiceReport.list:input_type -> spaceone.api.inventory.v1.CloudServiceReportQuery
	14, // 28: spaceone.api.inventory.v1.CloudServiceReport.stat:input_type -> spaceone.api.inventory.v1.CloudServiceReportStatQuery
	12, // 29: spaceone.api.inventory.v1.CloudServiceReport.create:output_type -> spaceone.api.inventory.v1.CloudServiceReportInfo
	12, // 30: spaceone.api.inventory.v1.CloudServiceReport.update:output_type -> spaceone.api.inventory.v1.CloudServiceReportInfo
	19, // 31: spaceone.api.inventory.v1.CloudServiceReport.delete:output_type -> google.protobuf.Empty
	19, // 32: spaceone.api.inventory.v1.CloudServiceReport.send:output_type -> google.protobuf.Empty
	12, // 33: spaceone.api.inventory.v1.CloudServiceReport.get:output_type -> spaceone.api.inventory.v1.CloudServiceReportInfo
	13, // 34: spaceone.api.inventory.v1.CloudServiceReport.list:output_type -> spaceone.api.inventory.v1.CloudServiceReportsInfo
	16, // 35: spaceone.api.inventory.v1.CloudServiceReport.stat:output_type -> google.protobuf.Struct
	29, // [29:36] is the sub-list for method output_type
	22, // [22:29] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_spaceone_api_inventory_v1_cloud_service_report_proto_init() }
func file_spaceone_api_inventory_v1_cloud_service_report_proto_init() {
	if File_spaceone_api_inventory_v1_cloud_service_report_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCloudServiceReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloudServiceReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudServiceReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudServiceReportQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudServiceReportInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudServiceReportsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudServiceReportStatQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spaceone_api_inventory_v1_cloud_service_report_proto_goTypes,
		DependencyIndexes: file_spaceone_api_inventory_v1_cloud_service_report_proto_depIdxs,
		EnumInfos:         file_spaceone_api_inventory_v1_cloud_service_report_proto_enumTypes,
		MessageInfos:      file_spaceone_api_inventory_v1_cloud_service_report_proto_msgTypes,
	}.Build()
	File_spaceone_api_inventory_v1_cloud_service_report_proto = out.File
	file_spaceone_api_inventory_v1_cloud_service_report_proto_rawDesc = nil
	file_spaceone_api_inventory_v1_cloud_service_report_proto_goTypes = nil
	file_spaceone_api_inventory_v1_cloud_service_report_proto_depIdxs = nil
}
