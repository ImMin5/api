// A CloudServiceStats is statistics data created from from cloud service query sets.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.6.1
// source: spaceone/api/inventory/v1/cloud_service_stats.proto

package v1

import (
	context "context"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CloudServiceStats_List_FullMethodName    = "/spaceone.api.inventory.v1.CloudServiceStats/list"
	CloudServiceStats_Analyze_FullMethodName = "/spaceone.api.inventory.v1.CloudServiceStats/analyze"
	CloudServiceStats_Stat_FullMethodName    = "/spaceone.api.inventory.v1.CloudServiceStats/stat"
)

// CloudServiceStatsClient is the client API for CloudServiceStats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudServiceStatsClient interface {
	// Gets a list of raw statistics data.
	// You can use a query to get a filtered list of statistics data.
	List(ctx context.Context, in *CloudServiceStatsQuery, opts ...grpc.CallOption) (*CloudServiceStatsInfo, error)
	Analyze(ctx context.Context, in *CloudServiceStatsAnalyzeQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
	Stat(ctx context.Context, in *CloudServiceStatsStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type cloudServiceStatsClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudServiceStatsClient(cc grpc.ClientConnInterface) CloudServiceStatsClient {
	return &cloudServiceStatsClient{cc}
}

func (c *cloudServiceStatsClient) List(ctx context.Context, in *CloudServiceStatsQuery, opts ...grpc.CallOption) (*CloudServiceStatsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloudServiceStatsInfo)
	err := c.cc.Invoke(ctx, CloudServiceStats_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceStatsClient) Analyze(ctx context.Context, in *CloudServiceStatsAnalyzeQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, CloudServiceStats_Analyze_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceStatsClient) Stat(ctx context.Context, in *CloudServiceStatsStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, CloudServiceStats_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudServiceStatsServer is the server API for CloudServiceStats service.
// All implementations must embed UnimplementedCloudServiceStatsServer
// for forward compatibility
type CloudServiceStatsServer interface {
	// Gets a list of raw statistics data.
	// You can use a query to get a filtered list of statistics data.
	List(context.Context, *CloudServiceStatsQuery) (*CloudServiceStatsInfo, error)
	Analyze(context.Context, *CloudServiceStatsAnalyzeQuery) (*_struct.Struct, error)
	Stat(context.Context, *CloudServiceStatsStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedCloudServiceStatsServer()
}

// UnimplementedCloudServiceStatsServer must be embedded to have forward compatible implementations.
type UnimplementedCloudServiceStatsServer struct {
}

func (UnimplementedCloudServiceStatsServer) List(context.Context, *CloudServiceStatsQuery) (*CloudServiceStatsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCloudServiceStatsServer) Analyze(context.Context, *CloudServiceStatsAnalyzeQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}
func (UnimplementedCloudServiceStatsServer) Stat(context.Context, *CloudServiceStatsStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedCloudServiceStatsServer) mustEmbedUnimplementedCloudServiceStatsServer() {}

// UnsafeCloudServiceStatsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudServiceStatsServer will
// result in compilation errors.
type UnsafeCloudServiceStatsServer interface {
	mustEmbedUnimplementedCloudServiceStatsServer()
}

func RegisterCloudServiceStatsServer(s grpc.ServiceRegistrar, srv CloudServiceStatsServer) {
	s.RegisterService(&CloudServiceStats_ServiceDesc, srv)
}

func _CloudServiceStats_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudServiceStatsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceStatsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceStats_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceStatsServer).List(ctx, req.(*CloudServiceStatsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceStats_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudServiceStatsAnalyzeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceStatsServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceStats_Analyze_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceStatsServer).Analyze(ctx, req.(*CloudServiceStatsAnalyzeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudServiceStats_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudServiceStatsStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceStatsServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudServiceStats_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceStatsServer).Stat(ctx, req.(*CloudServiceStatsStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudServiceStats_ServiceDesc is the grpc.ServiceDesc for CloudServiceStats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudServiceStats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.inventory.v1.CloudServiceStats",
	HandlerType: (*CloudServiceStatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _CloudServiceStats_List_Handler,
		},
		{
			MethodName: "analyze",
			Handler:    _CloudServiceStats_Analyze_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _CloudServiceStats_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/inventory/v1/cloud_service_stats.proto",
}
