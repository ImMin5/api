// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: spaceone/api/inventory/v1/metric_example.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetricExample_Create_FullMethodName = "/spaceone.api.inventory.v1.MetricExample/create"
	MetricExample_Update_FullMethodName = "/spaceone.api.inventory.v1.MetricExample/update"
	MetricExample_Delete_FullMethodName = "/spaceone.api.inventory.v1.MetricExample/delete"
	MetricExample_Get_FullMethodName    = "/spaceone.api.inventory.v1.MetricExample/get"
	MetricExample_List_FullMethodName   = "/spaceone.api.inventory.v1.MetricExample/list"
	MetricExample_Stat_FullMethodName   = "/spaceone.api.inventory.v1.MetricExample/stat"
)

// MetricExampleClient is the client API for MetricExample service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricExampleClient interface {
	Create(ctx context.Context, in *CreateMetricExampleRequest, opts ...grpc.CallOption) (*MetricExampleInfo, error)
	Update(ctx context.Context, in *UpdateMetricExampleRequest, opts ...grpc.CallOption) (*MetricExampleInfo, error)
	Delete(ctx context.Context, in *MetricExampleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *MetricExampleRequest, opts ...grpc.CallOption) (*MetricExampleInfo, error)
	List(ctx context.Context, in *MetricExampleQuery, opts ...grpc.CallOption) (*MetricExamplesInfo, error)
	Stat(ctx context.Context, in *MetricExampleStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type metricExampleClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricExampleClient(cc grpc.ClientConnInterface) MetricExampleClient {
	return &metricExampleClient{cc}
}

func (c *metricExampleClient) Create(ctx context.Context, in *CreateMetricExampleRequest, opts ...grpc.CallOption) (*MetricExampleInfo, error) {
	out := new(MetricExampleInfo)
	err := c.cc.Invoke(ctx, MetricExample_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricExampleClient) Update(ctx context.Context, in *UpdateMetricExampleRequest, opts ...grpc.CallOption) (*MetricExampleInfo, error) {
	out := new(MetricExampleInfo)
	err := c.cc.Invoke(ctx, MetricExample_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricExampleClient) Delete(ctx context.Context, in *MetricExampleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, MetricExample_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricExampleClient) Get(ctx context.Context, in *MetricExampleRequest, opts ...grpc.CallOption) (*MetricExampleInfo, error) {
	out := new(MetricExampleInfo)
	err := c.cc.Invoke(ctx, MetricExample_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricExampleClient) List(ctx context.Context, in *MetricExampleQuery, opts ...grpc.CallOption) (*MetricExamplesInfo, error) {
	out := new(MetricExamplesInfo)
	err := c.cc.Invoke(ctx, MetricExample_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricExampleClient) Stat(ctx context.Context, in *MetricExampleStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, MetricExample_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricExampleServer is the server API for MetricExample service.
// All implementations must embed UnimplementedMetricExampleServer
// for forward compatibility
type MetricExampleServer interface {
	Create(context.Context, *CreateMetricExampleRequest) (*MetricExampleInfo, error)
	Update(context.Context, *UpdateMetricExampleRequest) (*MetricExampleInfo, error)
	Delete(context.Context, *MetricExampleRequest) (*empty.Empty, error)
	Get(context.Context, *MetricExampleRequest) (*MetricExampleInfo, error)
	List(context.Context, *MetricExampleQuery) (*MetricExamplesInfo, error)
	Stat(context.Context, *MetricExampleStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedMetricExampleServer()
}

// UnimplementedMetricExampleServer must be embedded to have forward compatible implementations.
type UnimplementedMetricExampleServer struct {
}

func (UnimplementedMetricExampleServer) Create(context.Context, *CreateMetricExampleRequest) (*MetricExampleInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMetricExampleServer) Update(context.Context, *UpdateMetricExampleRequest) (*MetricExampleInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMetricExampleServer) Delete(context.Context, *MetricExampleRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMetricExampleServer) Get(context.Context, *MetricExampleRequest) (*MetricExampleInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMetricExampleServer) List(context.Context, *MetricExampleQuery) (*MetricExamplesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMetricExampleServer) Stat(context.Context, *MetricExampleStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedMetricExampleServer) mustEmbedUnimplementedMetricExampleServer() {}

// UnsafeMetricExampleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricExampleServer will
// result in compilation errors.
type UnsafeMetricExampleServer interface {
	mustEmbedUnimplementedMetricExampleServer()
}

func RegisterMetricExampleServer(s grpc.ServiceRegistrar, srv MetricExampleServer) {
	s.RegisterService(&MetricExample_ServiceDesc, srv)
}

func _MetricExample_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMetricExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricExampleServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricExample_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricExampleServer).Create(ctx, req.(*CreateMetricExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricExample_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetricExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricExampleServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricExample_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricExampleServer).Update(ctx, req.(*UpdateMetricExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricExample_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricExampleServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricExample_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricExampleServer).Delete(ctx, req.(*MetricExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricExample_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricExampleServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricExample_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricExampleServer).Get(ctx, req.(*MetricExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricExample_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricExampleQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricExampleServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricExample_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricExampleServer).List(ctx, req.(*MetricExampleQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricExample_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricExampleStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricExampleServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricExample_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricExampleServer).Stat(ctx, req.(*MetricExampleStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricExample_ServiceDesc is the grpc.ServiceDesc for MetricExample service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricExample_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.inventory.v1.MetricExample",
	HandlerType: (*MetricExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _MetricExample_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _MetricExample_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _MetricExample_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _MetricExample_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _MetricExample_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _MetricExample_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/inventory/v1/metric_example.proto",
}
