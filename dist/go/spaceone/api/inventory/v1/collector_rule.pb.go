// A CollectorRule is a cloud service resource filtering the raw data from the Collector. The Cloud Service resource is created after the raw data is filtered by the CollectorRule.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.6.1
// source: spaceone/api/inventory/v1/collector_rule.proto

package v1

import (
	v2 "github.com/cloudforet-io/api/dist/go/spaceone/api/core/v2"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConditionsPolicy int32

const (
	ConditionsPolicy_NONE   ConditionsPolicy = 0
	ConditionsPolicy_ALL    ConditionsPolicy = 1
	ConditionsPolicy_ANY    ConditionsPolicy = 2
	ConditionsPolicy_ALWAYS ConditionsPolicy = 3
)

// Enum value maps for ConditionsPolicy.
var (
	ConditionsPolicy_name = map[int32]string{
		0: "NONE",
		1: "ALL",
		2: "ANY",
		3: "ALWAYS",
	}
	ConditionsPolicy_value = map[string]int32{
		"NONE":   0,
		"ALL":    1,
		"ANY":    2,
		"ALWAYS": 3,
	}
)

func (x ConditionsPolicy) Enum() *ConditionsPolicy {
	p := new(ConditionsPolicy)
	*p = x
	return p
}

func (x ConditionsPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionsPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_inventory_v1_collector_rule_proto_enumTypes[0].Descriptor()
}

func (ConditionsPolicy) Type() protoreflect.EnumType {
	return &file_spaceone_api_inventory_v1_collector_rule_proto_enumTypes[0]
}

func (x ConditionsPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionsPolicy.Descriptor instead.
func (ConditionsPolicy) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_collector_rule_proto_rawDescGZIP(), []int{0}
}

type CollectorRuleQuery_RuleType int32

const (
	CollectorRuleQuery_RULE_TYPE_NONE CollectorRuleQuery_RuleType = 0
	CollectorRuleQuery_MANAGED        CollectorRuleQuery_RuleType = 1
	CollectorRuleQuery_CUSTOM         CollectorRuleQuery_RuleType = 2
)

// Enum value maps for CollectorRuleQuery_RuleType.
var (
	CollectorRuleQuery_RuleType_name = map[int32]string{
		0: "RULE_TYPE_NONE",
		1: "MANAGED",
		2: "CUSTOM",
	}
	CollectorRuleQuery_RuleType_value = map[string]int32{
		"RULE_TYPE_NONE": 0,
		"MANAGED":        1,
		"CUSTOM":         2,
	}
)

func (x CollectorRuleQuery_RuleType) Enum() *CollectorRuleQuery_RuleType {
	p := new(CollectorRuleQuery_RuleType)
	*p = x
	return p
}

func (x CollectorRuleQuery_RuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollectorRuleQuery_RuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_inventory_v1_collector_rule_proto_enumTypes[1].Descriptor()
}

func (CollectorRuleQuery_RuleType) Type() protoreflect.EnumType {
	return &file_spaceone_api_inventory_v1_collector_rule_proto_enumTypes[1]
}

func (x CollectorRuleQuery_RuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollectorRuleQuery_RuleType.Descriptor instead.
func (CollectorRuleQuery_RuleType) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_collector_rule_proto_rawDescGZIP(), []int{8, 0}
}

type CollectorRuleInfo_ResourceGroup int32

const (
	CollectorRuleInfo_RESOURCE_GROUP_NONE CollectorRuleInfo_ResourceGroup = 0
	CollectorRuleInfo_DOMAIN              CollectorRuleInfo_ResourceGroup = 1
	CollectorRuleInfo_WORKSPACE           CollectorRuleInfo_ResourceGroup = 2
)

// Enum value maps for CollectorRuleInfo_ResourceGroup.
var (
	CollectorRuleInfo_ResourceGroup_name = map[int32]string{
		0: "RESOURCE_GROUP_NONE",
		1: "DOMAIN",
		2: "WORKSPACE",
	}
	CollectorRuleInfo_ResourceGroup_value = map[string]int32{
		"RESOURCE_GROUP_NONE": 0,
		"DOMAIN":              1,
		"WORKSPACE":           2,
	}
)

func (x CollectorRuleInfo_ResourceGroup) Enum() *CollectorRuleInfo_ResourceGroup {
	p := new(CollectorRuleInfo_ResourceGroup)
	*p = x
	return p
}

func (x CollectorRuleInfo_ResourceGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollectorRuleInfo_ResourceGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_inventory_v1_collector_rule_proto_enumTypes[2].Descriptor()
}

func (CollectorRuleInfo_ResourceGroup) Type() protoreflect.EnumType {
	return &file_spaceone_api_inventory_v1_collector_rule_proto_enumTypes[2]
}

func (x CollectorRuleInfo_ResourceGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollectorRuleInfo_ResourceGroup.Descriptor instead.
func (CollectorRuleInfo_ResourceGroup) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_collector_rule_proto_rawDescGZIP(), []int{9, 0}
}

type CollectorRuleInfo_RuleType int32

const (
	CollectorRuleInfo_RULE_TYPE_NONE CollectorRuleInfo_RuleType = 0
	CollectorRuleInfo_MANAGED        CollectorRuleInfo_RuleType = 1
	CollectorRuleInfo_CUSTOM         CollectorRuleInfo_RuleType = 2
)

// Enum value maps for CollectorRuleInfo_RuleType.
var (
	CollectorRuleInfo_RuleType_name = map[int32]string{
		0: "RULE_TYPE_NONE",
		1: "MANAGED",
		2: "CUSTOM",
	}
	CollectorRuleInfo_RuleType_value = map[string]int32{
		"RULE_TYPE_NONE": 0,
		"MANAGED":        1,
		"CUSTOM":         2,
	}
)

func (x CollectorRuleInfo_RuleType) Enum() *CollectorRuleInfo_RuleType {
	p := new(CollectorRuleInfo_RuleType)
	*p = x
	return p
}

func (x CollectorRuleInfo_RuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollectorRuleInfo_RuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_inventory_v1_collector_rule_proto_enumTypes[3].Descriptor()
}

func (CollectorRuleInfo_RuleType) Type() protoreflect.EnumType {
	return &file_spaceone_api_inventory_v1_collector_rule_proto_enumTypes[3]
}

func (x CollectorRuleInfo_RuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollectorRuleInfo_RuleType.Descriptor instead.
func (CollectorRuleInfo_RuleType) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_collector_rule_proto_rawDescGZIP(), []int{9, 1}
}

type CollectorRuleCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *CollectorRuleCondition) Reset() {
	*x = CollectorRuleCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectorRuleCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorRuleCondition) ProtoMessage() {}

func (x *CollectorRuleCondition) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorRuleCondition.ProtoReflect.Descriptor instead.
func (*CollectorRuleCondition) Descriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_collector_rule_proto_rawDescGZIP(), []int{0}
}

func (x *CollectorRuleCondition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CollectorRuleCondition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CollectorRuleCondition) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type MatchRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *MatchRule) Reset() {
	*x = MatchRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRule) ProtoMessage() {}

func (x *MatchRule) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRule.ProtoReflect.Descriptor instead.
func (*MatchRule) Descriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_collector_rule_proto_rawDescGZIP(), []int{1}
}

func (x *MatchRule) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *MatchRule) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type CollectorRuleActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeProject       string          `protobuf:"bytes,1,opt,name=change_project,json=changeProject,proto3" json:"change_project,omitempty"`
	MatchProject        *MatchRule      `protobuf:"bytes,2,opt,name=match_project,json=matchProject,proto3" json:"match_project,omitempty"`
	MatchServiceAccount *MatchRule      `protobuf:"bytes,3,opt,name=match_service_account,json=matchServiceAccount,proto3" json:"match_service_account,omitempty"`
	AddAdditionalInfo   *_struct.Struct `protobuf:"bytes,4,opt,name=add_additional_info,json=addAdditionalInfo,proto3" json:"add_additional_info,omitempty"`
}

func (x *CollectorRuleActions) Reset() {
	*x = CollectorRuleActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectorRuleActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorRuleActions) ProtoMessage() {}

func (x *CollectorRuleActions) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorRuleActions.ProtoReflect.Descriptor instead.
func (*CollectorRuleActions) Descriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_collector_rule_proto_rawDescGZIP(), []int{2}
}

func (x *CollectorRuleActions) GetChangeProject() string {
	if x != nil {
		return x.ChangeProject
	}
	return ""
}

func (x *CollectorRuleActions) GetMatchProject() *MatchRule {
	if x != nil {
		return x.MatchProject
	}
	return nil
}

func (x *CollectorRuleActions) GetMatchServiceAccount() *MatchRule {
	if x != nil {
		return x.MatchServiceAccount
	}
	return nil
}

func (x *CollectorRuleActions) GetAddAdditionalInfo() *_struct.Struct {
	if x != nil {
		return x.AddAdditionalInfo
	}
	return nil
}

type CollectorRuleOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopProcessing bool `protobuf:"varint,1,opt,name=stop_processing,json=stopProcessing,proto3" json:"stop_processing,omitempty"`
}

func (x *CollectorRuleOptions) Reset() {
	*x = CollectorRuleOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectorRuleOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorRuleOptions) ProtoMessage() {}

func (x *CollectorRuleOptions) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorRuleOptions.ProtoReflect.Descriptor instead.
func (*CollectorRuleOptions) Descriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_collector_rule_proto_rawDescGZIP(), []int{3}
}

func (x *CollectorRuleOptions) GetStopProcessing() bool {
	if x != nil {
		return x.StopProcessing
	}
	return false
}

//	{
//	   "name": "match_service_account_test",
//	   "conditions_policy": "ALWAYS",
//	   "actions": {
//	       "match_service_account": {"source": "account", "target": "data.project_id"}
//	   },
//	   "options": {"stop_processing": true},
//	   "tags": {"b": "c", "a": "b"},
//	   "collector_id": "collector-2e39891cbbb5"
//	}
type CreateCollectorRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectorId string `protobuf:"bytes,1,opt,name=collector_id,json=collectorId,proto3" json:"collector_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	Conditions       []*CollectorRuleCondition `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`
	ConditionsPolicy ConditionsPolicy          `protobuf:"varint,4,opt,name=conditions_policy,json=conditionsPolicy,proto3,enum=spaceone.api.inventory.v1.ConditionsPolicy" json:"conditions_policy,omitempty"`
	Actions          *CollectorRuleActions     `protobuf:"bytes,5,opt,name=actions,proto3" json:"actions,omitempty"`
	// +optional
	Options *CollectorRuleOptions `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	// +optional
	Tags *_struct.Struct `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *CreateCollectorRuleRequest) Reset() {
	*x = CreateCollectorRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCollectorRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCollectorRuleRequest) ProtoMessage() {}

func (x *CreateCollectorRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCollectorRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateCollectorRuleRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_collector_rule_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCollectorRuleRequest) GetCollectorId() string {
	if x != nil {
		return x.CollectorId
	}
	return ""
}

func (x *CreateCollectorRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCollectorRuleRequest) GetConditions() []*CollectorRuleCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *CreateCollectorRuleRequest) GetConditionsPolicy() ConditionsPolicy {
	if x != nil {
		return x.ConditionsPolicy
	}
	return ConditionsPolicy_NONE
}

func (x *CreateCollectorRuleRequest) GetActions() *CollectorRuleActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *CreateCollectorRuleRequest) GetOptions() *CollectorRuleOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CreateCollectorRuleRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

//	{
//	   "collector_rule_id": "collector-rule-c8055231e212",
//	   "name": "match_service_account_test",
//	   "conditions_policy": "ALWAYS",
//	   "actions": {
//	       "match_service_account": {
//	           "source": "account",
//	           "target": "data.project_id"
//	       }
//	   },
//	   "options": {
//	       "stop_processing": true
//	   },
//	   "tags": {"b": "c", "a": "b"}
//	}
type UpdateCollectorRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectorRuleId string `protobuf:"bytes,1,opt,name=collector_rule_id,json=collectorRuleId,proto3" json:"collector_rule_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	Conditions []*CollectorRuleCondition `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// +optional
	ConditionsPolicy ConditionsPolicy `protobuf:"varint,4,opt,name=conditions_policy,json=conditionsPolicy,proto3,enum=spaceone.api.inventory.v1.ConditionsPolicy" json:"conditions_policy,omitempty"`
	// +optional
	Actions *CollectorRuleActions `protobuf:"bytes,5,opt,name=actions,proto3" json:"actions,omitempty"`
	// +optional
	Options *CollectorRuleOptions `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	// +optional
	Tags *_struct.Struct `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *UpdateCollectorRuleRequest) Reset() {
	*x = UpdateCollectorRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCollectorRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCollectorRuleRequest) ProtoMessage() {}

func (x *UpdateCollectorRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCollectorRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateCollectorRuleRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_collector_rule_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateCollectorRuleRequest) GetCollectorRuleId() string {
	if x != nil {
		return x.CollectorRuleId
	}
	return ""
}

func (x *UpdateCollectorRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCollectorRuleRequest) GetConditions() []*CollectorRuleCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *UpdateCollectorRuleRequest) GetConditionsPolicy() ConditionsPolicy {
	if x != nil {
		return x.ConditionsPolicy
	}
	return ConditionsPolicy_NONE
}

func (x *UpdateCollectorRuleRequest) GetActions() *CollectorRuleActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *UpdateCollectorRuleRequest) GetOptions() *CollectorRuleOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *UpdateCollectorRuleRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

//	{
//	   "collector_rule_id": "collector-rule-c8055231e212",
//	   "order": 2
//	}
type ChangeCollectorRuleOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectorRuleId string `protobuf:"bytes,1,opt,name=collector_rule_id,json=collectorRuleId,proto3" json:"collector_rule_id,omitempty"`
	Order           int32  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ChangeCollectorRuleOrderRequest) Reset() {
	*x = ChangeCollectorRuleOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeCollectorRuleOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeCollectorRuleOrderRequest) ProtoMessage() {}

func (x *ChangeCollectorRuleOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeCollectorRuleOrderRequest.ProtoReflect.Descriptor instead.
func (*ChangeCollectorRuleOrderRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_collector_rule_proto_rawDescGZIP(), []int{6}
}

func (x *ChangeCollectorRuleOrderRequest) GetCollectorRuleId() string {
	if x != nil {
		return x.CollectorRuleId
	}
	return ""
}

func (x *ChangeCollectorRuleOrderRequest) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

//	{
//	   "collector_rule_id": "collector-rule-c8055231e212",
//	}
type CollectorRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectorRuleId string `protobuf:"bytes,1,opt,name=collector_rule_id,json=collectorRuleId,proto3" json:"collector_rule_id,omitempty"`
}

func (x *CollectorRuleRequest) Reset() {
	*x = CollectorRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectorRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorRuleRequest) ProtoMessage() {}

func (x *CollectorRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorRuleRequest.ProtoReflect.Descriptor instead.
func (*CollectorRuleRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_collector_rule_proto_rawDescGZIP(), []int{7}
}

func (x *CollectorRuleRequest) GetCollectorRuleId() string {
	if x != nil {
		return x.CollectorRuleId
	}
	return ""
}

//	{
//	   "query": {}
//	}
type CollectorRuleQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +optional
	Query *v2.Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// +optional
	CollectorRuleId string `protobuf:"bytes,2,opt,name=collector_rule_id,json=collectorRuleId,proto3" json:"collector_rule_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	RuleType CollectorRuleQuery_RuleType `protobuf:"varint,4,opt,name=rule_type,json=ruleType,proto3,enum=spaceone.api.inventory.v1.CollectorRuleQuery_RuleType" json:"rule_type,omitempty"`
	// +optional
	WorkspaceId string `protobuf:"bytes,21,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// +optional
	CollectorId string `protobuf:"bytes,22,opt,name=collector_id,json=collectorId,proto3" json:"collector_id,omitempty"`
}

func (x *CollectorRuleQuery) Reset() {
	*x = CollectorRuleQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectorRuleQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorRuleQuery) ProtoMessage() {}

func (x *CollectorRuleQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorRuleQuery.ProtoReflect.Descriptor instead.
func (*CollectorRuleQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_collector_rule_proto_rawDescGZIP(), []int{8}
}

func (x *CollectorRuleQuery) GetQuery() *v2.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *CollectorRuleQuery) GetCollectorRuleId() string {
	if x != nil {
		return x.CollectorRuleId
	}
	return ""
}

func (x *CollectorRuleQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CollectorRuleQuery) GetRuleType() CollectorRuleQuery_RuleType {
	if x != nil {
		return x.RuleType
	}
	return CollectorRuleQuery_RULE_TYPE_NONE
}

func (x *CollectorRuleQuery) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *CollectorRuleQuery) GetCollectorId() string {
	if x != nil {
		return x.CollectorId
	}
	return ""
}

//	{
//	   "collector_rule_id": "collector-rule-c8055231e212",
//	   "name": "match_service_account_test",
//	   "order": 2,
//	   "conditions_policy": "ALWAYS",
//	   "actions": {
//	       "match_service_account": {
//	           "source": "account",
//	           "target": "data.project_id"
//	       }
//	   },
//	   "options": {
//	       "stop_processing": true
//	   },
//	   "tags": {
//	       "a": "b",
//	       "b": "c"
//	   },
//	   "collector_id": "collector-2e39891cbbb5",
//	   "domain_id": "domain-58010aa2e451",
//	   "created_at": "2022-07-19T10:13:28.335Z"
//	}
type CollectorRuleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectorRuleId  string                          `protobuf:"bytes,1,opt,name=collector_rule_id,json=collectorRuleId,proto3" json:"collector_rule_id,omitempty"`
	Name             string                          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RuleType         CollectorRuleInfo_RuleType      `protobuf:"varint,3,opt,name=rule_type,json=ruleType,proto3,enum=spaceone.api.inventory.v1.CollectorRuleInfo_RuleType" json:"rule_type,omitempty"`
	Order            int32                           `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
	Conditions       []*CollectorRuleCondition       `protobuf:"bytes,5,rep,name=conditions,proto3" json:"conditions,omitempty"`
	ConditionsPolicy ConditionsPolicy                `protobuf:"varint,6,opt,name=conditions_policy,json=conditionsPolicy,proto3,enum=spaceone.api.inventory.v1.ConditionsPolicy" json:"conditions_policy,omitempty"`
	Actions          *CollectorRuleActions           `protobuf:"bytes,7,opt,name=actions,proto3" json:"actions,omitempty"`
	Options          *CollectorRuleOptions           `protobuf:"bytes,8,opt,name=options,proto3" json:"options,omitempty"`
	Tags             *_struct.Struct                 `protobuf:"bytes,9,opt,name=tags,proto3" json:"tags,omitempty"`
	ResourceGroup    CollectorRuleInfo_ResourceGroup `protobuf:"varint,20,opt,name=resource_group,json=resourceGroup,proto3,enum=spaceone.api.inventory.v1.CollectorRuleInfo_ResourceGroup" json:"resource_group,omitempty"`
	DomainId         string                          `protobuf:"bytes,21,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WorkspaceId      string                          `protobuf:"bytes,22,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	CollectorId      string                          `protobuf:"bytes,23,opt,name=collector_id,json=collectorId,proto3" json:"collector_id,omitempty"`
	CreatedAt        string                          `protobuf:"bytes,31,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *CollectorRuleInfo) Reset() {
	*x = CollectorRuleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectorRuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorRuleInfo) ProtoMessage() {}

func (x *CollectorRuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorRuleInfo.ProtoReflect.Descriptor instead.
func (*CollectorRuleInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_collector_rule_proto_rawDescGZIP(), []int{9}
}

func (x *CollectorRuleInfo) GetCollectorRuleId() string {
	if x != nil {
		return x.CollectorRuleId
	}
	return ""
}

func (x *CollectorRuleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CollectorRuleInfo) GetRuleType() CollectorRuleInfo_RuleType {
	if x != nil {
		return x.RuleType
	}
	return CollectorRuleInfo_RULE_TYPE_NONE
}

func (x *CollectorRuleInfo) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *CollectorRuleInfo) GetConditions() []*CollectorRuleCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *CollectorRuleInfo) GetConditionsPolicy() ConditionsPolicy {
	if x != nil {
		return x.ConditionsPolicy
	}
	return ConditionsPolicy_NONE
}

func (x *CollectorRuleInfo) GetActions() *CollectorRuleActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *CollectorRuleInfo) GetOptions() *CollectorRuleOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CollectorRuleInfo) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CollectorRuleInfo) GetResourceGroup() CollectorRuleInfo_ResourceGroup {
	if x != nil {
		return x.ResourceGroup
	}
	return CollectorRuleInfo_RESOURCE_GROUP_NONE
}

func (x *CollectorRuleInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *CollectorRuleInfo) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *CollectorRuleInfo) GetCollectorId() string {
	if x != nil {
		return x.CollectorId
	}
	return ""
}

func (x *CollectorRuleInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

//	{
//	   "results": [
//	       {
//	           "collector_rule_id": "collector-rule-c8055231e212",
//	           "name": "match_service_account",
//	           "order": 1,
//	           "conditions_policy": "ALWAYS",
//	           "actions": {
//	               "match_service_account": {
//	                   "source": "account",
//	                   "target": "data.project_id"
//	               }
//	           },
//	           "options": {
//	               "stop_processing": true
//	           },
//	           "tags": {},
//	           "collector_id": "collector-2e39891cbbb5",
//	           "domain_id": "domain-58010aa2e451",
//	           "created_at": "2022-05-25T16:01:51.858Z"
//	       },
//	       {
//	           "collector_rule_id": "collector-rule-t3345231e167",
//	           "name": "match_service_account",
//	           "order": 1,
//	           "conditions_policy": "ALWAYS",
//	           "actions": {
//	               "match_service_account": {
//	                   "source": "account",
//	                   "target": "data.account_id"
//	               }
//	           },
//	           "options": {
//	               "stop_processing": true
//	           },
//	           "tags": {},
//	           "collector_id": "collector-7163022d49a1",
//	           "domain_id": "domain-58010aa2e451",
//	           "created_at": "2022-06-03T16:00:54.099Z"
//	       }
//	   ],
//	   "total_count": 2
//	}
type CollectorRulesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results    []*CollectorRuleInfo `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TotalCount int32                `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *CollectorRulesInfo) Reset() {
	*x = CollectorRulesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectorRulesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorRulesInfo) ProtoMessage() {}

func (x *CollectorRulesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorRulesInfo.ProtoReflect.Descriptor instead.
func (*CollectorRulesInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_collector_rule_proto_rawDescGZIP(), []int{10}
}

func (x *CollectorRulesInfo) GetResults() []*CollectorRuleInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CollectorRulesInfo) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type CollectorRuleStatQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *v2.StatisticsQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *CollectorRuleStatQuery) Reset() {
	*x = CollectorRuleStatQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectorRuleStatQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorRuleStatQuery) ProtoMessage() {}

func (x *CollectorRuleStatQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorRuleStatQuery.ProtoReflect.Descriptor instead.
func (*CollectorRuleStatQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_inventory_v1_collector_rule_proto_rawDescGZIP(), []int{11}
}

func (x *CollectorRuleStatQuery) GetQuery() *v2.StatisticsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

var File_spaceone_api_inventory_v1_collector_rule_proto protoreflect.FileDescriptor

var file_spaceone_api_inventory_v1_collector_rule_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x19, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5c, 0x0a, 0x16, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0x3b, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x22, 0xab, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x49, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x58, 0x0a, 0x15,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x5f, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x11, 0x61, 0x64,
	0x64, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x3f, 0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x22, 0xc3, 0x03, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x49, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xcc, 0x03, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x49, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x63, 0x0a, 0x1f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x42, 0x0a, 0x14, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xdb,
	0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x75, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x02, 0x22, 0x90, 0x07, 0x0a,
	0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x75,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x58, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x49, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x61, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x43, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x4f, 0x52, 0x4b, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x10, 0x02, 0x22, 0x37, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x02, 0x22,
	0x7d, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x55,
	0x0a, 0x16, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2a, 0x3a, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x4e, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x10,
	0x03, 0x32, 0xb2, 0x08, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x35,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23,
	0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23,
	0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x34,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x81, 0x01, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28,
	0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x72, 0x75, 0x6c,
	0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x03, 0x67, 0x65, 0x74,
	0x12, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x12, 0x93, 0x01, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x2d, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22,
	0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x12, 0x31, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a,
	0x01, 0x2a, 0x22, 0x22, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x72, 0x65, 0x74, 0x2d,
	0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spaceone_api_inventory_v1_collector_rule_proto_rawDescOnce sync.Once
	file_spaceone_api_inventory_v1_collector_rule_proto_rawDescData = file_spaceone_api_inventory_v1_collector_rule_proto_rawDesc
)

func file_spaceone_api_inventory_v1_collector_rule_proto_rawDescGZIP() []byte {
	file_spaceone_api_inventory_v1_collector_rule_proto_rawDescOnce.Do(func() {
		file_spaceone_api_inventory_v1_collector_rule_proto_rawDescData = protoimpl.X.CompressGZIP(file_spaceone_api_inventory_v1_collector_rule_proto_rawDescData)
	})
	return file_spaceone_api_inventory_v1_collector_rule_proto_rawDescData
}

var file_spaceone_api_inventory_v1_collector_rule_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_spaceone_api_inventory_v1_collector_rule_proto_goTypes = []interface{}{
	(ConditionsPolicy)(0),                   // 0: spaceone.api.inventory.v1.ConditionsPolicy
	(CollectorRuleQuery_RuleType)(0),        // 1: spaceone.api.inventory.v1.CollectorRuleQuery.RuleType
	(CollectorRuleInfo_ResourceGroup)(0),    // 2: spaceone.api.inventory.v1.CollectorRuleInfo.ResourceGroup
	(CollectorRuleInfo_RuleType)(0),         // 3: spaceone.api.inventory.v1.CollectorRuleInfo.RuleType
	(*CollectorRuleCondition)(nil),          // 4: spaceone.api.inventory.v1.CollectorRuleCondition
	(*MatchRule)(nil),                       // 5: spaceone.api.inventory.v1.MatchRule
	(*CollectorRuleActions)(nil),            // 6: spaceone.api.inventory.v1.CollectorRuleActions
	(*CollectorRuleOptions)(nil),            // 7: spaceone.api.inventory.v1.CollectorRuleOptions
	(*CreateCollectorRuleRequest)(nil),      // 8: spaceone.api.inventory.v1.CreateCollectorRuleRequest
	(*UpdateCollectorRuleRequest)(nil),      // 9: spaceone.api.inventory.v1.UpdateCollectorRuleRequest
	(*ChangeCollectorRuleOrderRequest)(nil), // 10: spaceone.api.inventory.v1.ChangeCollectorRuleOrderRequest
	(*CollectorRuleRequest)(nil),            // 11: spaceone.api.inventory.v1.CollectorRuleRequest
	(*CollectorRuleQuery)(nil),              // 12: spaceone.api.inventory.v1.CollectorRuleQuery
	(*CollectorRuleInfo)(nil),               // 13: spaceone.api.inventory.v1.CollectorRuleInfo
	(*CollectorRulesInfo)(nil),              // 14: spaceone.api.inventory.v1.CollectorRulesInfo
	(*CollectorRuleStatQuery)(nil),          // 15: spaceone.api.inventory.v1.CollectorRuleStatQuery
	(*_struct.Struct)(nil),                  // 16: google.protobuf.Struct
	(*v2.Query)(nil),                        // 17: spaceone.api.core.v2.Query
	(*v2.StatisticsQuery)(nil),              // 18: spaceone.api.core.v2.StatisticsQuery
	(*empty.Empty)(nil),                     // 19: google.protobuf.Empty
}
var file_spaceone_api_inventory_v1_collector_rule_proto_depIdxs = []int32{
	5,  // 0: spaceone.api.inventory.v1.CollectorRuleActions.match_project:type_name -> spaceone.api.inventory.v1.MatchRule
	5,  // 1: spaceone.api.inventory.v1.CollectorRuleActions.match_service_account:type_name -> spaceone.api.inventory.v1.MatchRule
	16, // 2: spaceone.api.inventory.v1.CollectorRuleActions.add_additional_info:type_name -> google.protobuf.Struct
	4,  // 3: spaceone.api.inventory.v1.CreateCollectorRuleRequest.conditions:type_name -> spaceone.api.inventory.v1.CollectorRuleCondition
	0,  // 4: spaceone.api.inventory.v1.CreateCollectorRuleRequest.conditions_policy:type_name -> spaceone.api.inventory.v1.ConditionsPolicy
	6,  // 5: spaceone.api.inventory.v1.CreateCollectorRuleRequest.actions:type_name -> spaceone.api.inventory.v1.CollectorRuleActions
	7,  // 6: spaceone.api.inventory.v1.CreateCollectorRuleRequest.options:type_name -> spaceone.api.inventory.v1.CollectorRuleOptions
	16, // 7: spaceone.api.inventory.v1.CreateCollectorRuleRequest.tags:type_name -> google.protobuf.Struct
	4,  // 8: spaceone.api.inventory.v1.UpdateCollectorRuleRequest.conditions:type_name -> spaceone.api.inventory.v1.CollectorRuleCondition
	0,  // 9: spaceone.api.inventory.v1.UpdateCollectorRuleRequest.conditions_policy:type_name -> spaceone.api.inventory.v1.ConditionsPolicy
	6,  // 10: spaceone.api.inventory.v1.UpdateCollectorRuleRequest.actions:type_name -> spaceone.api.inventory.v1.CollectorRuleActions
	7,  // 11: spaceone.api.inventory.v1.UpdateCollectorRuleRequest.options:type_name -> spaceone.api.inventory.v1.CollectorRuleOptions
	16, // 12: spaceone.api.inventory.v1.UpdateCollectorRuleRequest.tags:type_name -> google.protobuf.Struct
	17, // 13: spaceone.api.inventory.v1.CollectorRuleQuery.query:type_name -> spaceone.api.core.v2.Query
	1,  // 14: spaceone.api.inventory.v1.CollectorRuleQuery.rule_type:type_name -> spaceone.api.inventory.v1.CollectorRuleQuery.RuleType
	3,  // 15: spaceone.api.inventory.v1.CollectorRuleInfo.rule_type:type_name -> spaceone.api.inventory.v1.CollectorRuleInfo.RuleType
	4,  // 16: spaceone.api.inventory.v1.CollectorRuleInfo.conditions:type_name -> spaceone.api.inventory.v1.CollectorRuleCondition
	0,  // 17: spaceone.api.inventory.v1.CollectorRuleInfo.conditions_policy:type_name -> spaceone.api.inventory.v1.ConditionsPolicy
	6,  // 18: spaceone.api.inventory.v1.CollectorRuleInfo.actions:type_name -> spaceone.api.inventory.v1.CollectorRuleActions
	7,  // 19: spaceone.api.inventory.v1.CollectorRuleInfo.options:type_name -> spaceone.api.inventory.v1.CollectorRuleOptions
	16, // 20: spaceone.api.inventory.v1.CollectorRuleInfo.tags:type_name -> google.protobuf.Struct
	2,  // 21: spaceone.api.inventory.v1.CollectorRuleInfo.resource_group:type_name -> spaceone.api.inventory.v1.CollectorRuleInfo.ResourceGroup
	13, // 22: spaceone.api.inventory.v1.CollectorRulesInfo.results:type_name -> spaceone.api.inventory.v1.CollectorRuleInfo
	18, // 23: spaceone.api.inventory.v1.CollectorRuleStatQuery.query:type_name -> spaceone.api.core.v2.StatisticsQuery
	8,  // 24: spaceone.api.inventory.v1.CollectorRule.create:input_type -> spaceone.api.inventory.v1.CreateCollectorRuleRequest
	9,  // 25: spaceone.api.inventory.v1.CollectorRule.update:input_type -> spaceone.api.inventory.v1.UpdateCollectorRuleRequest
	10, // 26: spaceone.api.inventory.v1.CollectorRule.change_order:input_type -> spaceone.api.inventory.v1.ChangeCollectorRuleOrderRequest
	11, // 27: spaceone.api.inventory.v1.CollectorRule.delete:input_type -> spaceone.api.inventory.v1.CollectorRuleRequest
	11, // 28: spaceone.api.inventory.v1.CollectorRule.get:input_type -> spaceone.api.inventory.v1.CollectorRuleRequest
	12, // 29: spaceone.api.inventory.v1.CollectorRule.list:input_type -> spaceone.api.inventory.v1.CollectorRuleQuery
	15, // 30: spaceone.api.inventory.v1.CollectorRule.stat:input_type -> spaceone.api.inventory.v1.CollectorRuleStatQuery
	13, // 31: spaceone.api.inventory.v1.CollectorRule.create:output_type -> spaceone.api.inventory.v1.CollectorRuleInfo
	13, // 32: spaceone.api.inventory.v1.CollectorRule.update:output_type -> spaceone.api.inventory.v1.CollectorRuleInfo
	13, // 33: spaceone.api.inventory.v1.CollectorRule.change_order:output_type -> spaceone.api.inventory.v1.CollectorRuleInfo
	19, // 34: spaceone.api.inventory.v1.CollectorRule.delete:output_type -> google.protobuf.Empty
	13, // 35: spaceone.api.inventory.v1.CollectorRule.get:output_type -> spaceone.api.inventory.v1.CollectorRuleInfo
	14, // 36: spaceone.api.inventory.v1.CollectorRule.list:output_type -> spaceone.api.inventory.v1.CollectorRulesInfo
	16, // 37: spaceone.api.inventory.v1.CollectorRule.stat:output_type -> google.protobuf.Struct
	31, // [31:38] is the sub-list for method output_type
	24, // [24:31] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_spaceone_api_inventory_v1_collector_rule_proto_init() }
func file_spaceone_api_inventory_v1_collector_rule_proto_init() {
	if File_spaceone_api_inventory_v1_collector_rule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectorRuleCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectorRuleActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectorRuleOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCollectorRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCollectorRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeCollectorRuleOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectorRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectorRuleQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectorRuleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectorRulesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectorRuleStatQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spaceone_api_inventory_v1_collector_rule_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spaceone_api_inventory_v1_collector_rule_proto_goTypes,
		DependencyIndexes: file_spaceone_api_inventory_v1_collector_rule_proto_depIdxs,
		EnumInfos:         file_spaceone_api_inventory_v1_collector_rule_proto_enumTypes,
		MessageInfos:      file_spaceone_api_inventory_v1_collector_rule_proto_msgTypes,
	}.Build()
	File_spaceone_api_inventory_v1_collector_rule_proto = out.File
	file_spaceone_api_inventory_v1_collector_rule_proto_rawDesc = nil
	file_spaceone_api_inventory_v1_collector_rule_proto_goTypes = nil
	file_spaceone_api_inventory_v1_collector_rule_proto_depIdxs = nil
}
