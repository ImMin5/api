// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/inventory_v2/v1/namespace_group.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NamespaceGroup_Create_FullMethodName = "/spaceone.api.inventory_v2.v1.NamespaceGroup/create"
	NamespaceGroup_Update_FullMethodName = "/spaceone.api.inventory_v2.v1.NamespaceGroup/update"
	NamespaceGroup_Delete_FullMethodName = "/spaceone.api.inventory_v2.v1.NamespaceGroup/delete"
	NamespaceGroup_Get_FullMethodName    = "/spaceone.api.inventory_v2.v1.NamespaceGroup/get"
	NamespaceGroup_List_FullMethodName   = "/spaceone.api.inventory_v2.v1.NamespaceGroup/list"
	NamespaceGroup_Stat_FullMethodName   = "/spaceone.api.inventory_v2.v1.NamespaceGroup/stat"
)

// NamespaceGroupClient is the client API for NamespaceGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamespaceGroupClient interface {
	Create(ctx context.Context, in *CreateNamespaceGroupRequest, opts ...grpc.CallOption) (*NamespaceGroupInfo, error)
	Update(ctx context.Context, in *UpdateNamespaceGroupRequest, opts ...grpc.CallOption) (*NamespaceGroupInfo, error)
	Delete(ctx context.Context, in *NamespaceGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *NamespaceGroupRequest, opts ...grpc.CallOption) (*NamespaceGroupInfo, error)
	List(ctx context.Context, in *NamespaceGroupQuery, opts ...grpc.CallOption) (*NamespaceGroupsInfo, error)
	Stat(ctx context.Context, in *NamespaceGroupStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type namespaceGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewNamespaceGroupClient(cc grpc.ClientConnInterface) NamespaceGroupClient {
	return &namespaceGroupClient{cc}
}

func (c *namespaceGroupClient) Create(ctx context.Context, in *CreateNamespaceGroupRequest, opts ...grpc.CallOption) (*NamespaceGroupInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NamespaceGroupInfo)
	err := c.cc.Invoke(ctx, NamespaceGroup_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceGroupClient) Update(ctx context.Context, in *UpdateNamespaceGroupRequest, opts ...grpc.CallOption) (*NamespaceGroupInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NamespaceGroupInfo)
	err := c.cc.Invoke(ctx, NamespaceGroup_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceGroupClient) Delete(ctx context.Context, in *NamespaceGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, NamespaceGroup_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceGroupClient) Get(ctx context.Context, in *NamespaceGroupRequest, opts ...grpc.CallOption) (*NamespaceGroupInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NamespaceGroupInfo)
	err := c.cc.Invoke(ctx, NamespaceGroup_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceGroupClient) List(ctx context.Context, in *NamespaceGroupQuery, opts ...grpc.CallOption) (*NamespaceGroupsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NamespaceGroupsInfo)
	err := c.cc.Invoke(ctx, NamespaceGroup_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceGroupClient) Stat(ctx context.Context, in *NamespaceGroupStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, NamespaceGroup_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespaceGroupServer is the server API for NamespaceGroup service.
// All implementations must embed UnimplementedNamespaceGroupServer
// for forward compatibility.
type NamespaceGroupServer interface {
	Create(context.Context, *CreateNamespaceGroupRequest) (*NamespaceGroupInfo, error)
	Update(context.Context, *UpdateNamespaceGroupRequest) (*NamespaceGroupInfo, error)
	Delete(context.Context, *NamespaceGroupRequest) (*empty.Empty, error)
	Get(context.Context, *NamespaceGroupRequest) (*NamespaceGroupInfo, error)
	List(context.Context, *NamespaceGroupQuery) (*NamespaceGroupsInfo, error)
	Stat(context.Context, *NamespaceGroupStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedNamespaceGroupServer()
}

// UnimplementedNamespaceGroupServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNamespaceGroupServer struct{}

func (UnimplementedNamespaceGroupServer) Create(context.Context, *CreateNamespaceGroupRequest) (*NamespaceGroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNamespaceGroupServer) Update(context.Context, *UpdateNamespaceGroupRequest) (*NamespaceGroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedNamespaceGroupServer) Delete(context.Context, *NamespaceGroupRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNamespaceGroupServer) Get(context.Context, *NamespaceGroupRequest) (*NamespaceGroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedNamespaceGroupServer) List(context.Context, *NamespaceGroupQuery) (*NamespaceGroupsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedNamespaceGroupServer) Stat(context.Context, *NamespaceGroupStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedNamespaceGroupServer) mustEmbedUnimplementedNamespaceGroupServer() {}
func (UnimplementedNamespaceGroupServer) testEmbeddedByValue()                        {}

// UnsafeNamespaceGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamespaceGroupServer will
// result in compilation errors.
type UnsafeNamespaceGroupServer interface {
	mustEmbedUnimplementedNamespaceGroupServer()
}

func RegisterNamespaceGroupServer(s grpc.ServiceRegistrar, srv NamespaceGroupServer) {
	// If the following call pancis, it indicates UnimplementedNamespaceGroupServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NamespaceGroup_ServiceDesc, srv)
}

func _NamespaceGroup_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceGroupServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespaceGroup_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceGroupServer).Create(ctx, req.(*CreateNamespaceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceGroup_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceGroupServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespaceGroup_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceGroupServer).Update(ctx, req.(*UpdateNamespaceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceGroup_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceGroupServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespaceGroup_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceGroupServer).Delete(ctx, req.(*NamespaceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceGroup_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceGroupServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespaceGroup_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceGroupServer).Get(ctx, req.(*NamespaceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceGroup_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceGroupQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceGroupServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespaceGroup_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceGroupServer).List(ctx, req.(*NamespaceGroupQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceGroup_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceGroupStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceGroupServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespaceGroup_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceGroupServer).Stat(ctx, req.(*NamespaceGroupStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// NamespaceGroup_ServiceDesc is the grpc.ServiceDesc for NamespaceGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NamespaceGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.inventory_v2.v1.NamespaceGroup",
	HandlerType: (*NamespaceGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _NamespaceGroup_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _NamespaceGroup_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _NamespaceGroup_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _NamespaceGroup_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _NamespaceGroup_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _NamespaceGroup_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/inventory_v2/v1/namespace_group.proto",
}
