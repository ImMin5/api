//
//desc: A Notification is a service that delivers event data generated in Cloudforet to a Project or User.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: spaceone/api/notification/v1/notification.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Notification_Create_FullMethodName  = "/spaceone.api.notification.v1.Notification/create"
	Notification_Push_FullMethodName    = "/spaceone.api.notification.v1.Notification/push"
	Notification_Delete_FullMethodName  = "/spaceone.api.notification.v1.Notification/delete"
	Notification_SetRead_FullMethodName = "/spaceone.api.notification.v1.Notification/set_read"
	Notification_Get_FullMethodName     = "/spaceone.api.notification.v1.Notification/get"
	Notification_List_FullMethodName    = "/spaceone.api.notification.v1.Notification/list"
	Notification_Stat_FullMethodName    = "/spaceone.api.notification.v1.Notification/stat"
)

// NotificationClient is the client API for Notification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationClient interface {
	// desc: Creates a new Notification. When a Notification is created, it is delivered to a UserChannel or a ProjectChannel depending on the parameter `resource_type`. If a Notification is delivered to a UserChannel, the `resource_type` is `identity.User`, and if a Notification is delivered to a ProjectChannel, the `resource_type` is `identity.Project`.
	// request_example: >-
	// {
	// "resource_type": "identity.Project",
	// "resource_id": "resource-123456789012",
	// "topic": "monitoring.Alert",
	// "message": {
	// "title": "[Alerting] Not Running Pods 0:OK alert",
	// "description": "[spaceone-dev] Not Running Pods 0 is OK\n\nFailure level : WorkerNode\nPanel ... ",
	// "tags": {
	// "urgency": "LOW",
	// "resource_id": "pod",
	// "assignee": "user1@email.com",
	// "created_at": "2022-01-01T17:12:45.990Z",
	// "state": "ACKNOWLEDGED",
	// "project_id": "project-123456789012"
	// }
	// },
	// "notification_type": "INFO",
	// "notification_level": "LV2"
	// }
	// response_example: >-
	// {
	// "notification_id": "notification-123456789012",
	// "topic": "monitoring.Alert",
	// "message": {
	// "title": "[Alerting] Not Running Pods 0:OK alert",
	// "description": "[spaceone-dev] Not Running Pods 0 is OK\n\nFailure level : WorkerNode\nPanel ... ",
	// "tags": {
	// "urgency": "LOW",
	// "resource_id": "pod",
	// "assignee": "user1@email.com",
	// "created_at": "2022-01-01T17:12:45.990Z",
	// "state": "ACKNOWLEDGED",
	// "project_id": "project-123456789012"
	// }
	// },
	// "notification_type": "INFO",
	// "notification_level": "LV2",
	// "is_read": true,
	// "user_id": "Cloudforet@mz.co.kr",
	// "domain_id": "domain-123456789012",
	// "created_at": "2022-01-01T17:12:40.990Z"
	// }
	Create(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// desc: Manually raises a Notification. A Notification is raised with a message to be sent using a valid specific Protocol, and data used for a specific Protocol such as a phone number.
	// request_example: >-
	// {
	// "protocol_id": "protocol-fb30cb6c28d6",
	// "data": {
	// "phone_number": "01012345678"
	// },
	// "message": {
	// "tags": [
	// {
	// "key": "project_id",
	// "value": "project-xxxx"
	// },
	// {
	// "key": "project_name",
	// "value": "Test Project"
	// },
	// {
	// "key": "resource_id",
	// "value": "server-yyyyy"
	// },
	// {
	// "key": "resource_name",
	// "value": "web-server-001"
	// }
	// ],
	// "description": "This is Sample Message",
	// "title": "Sample"
	// }
	// }
	Push(ctx context.Context, in *PushNotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// desc: Deletes multiple Notifications. You must specify `notifications` of the list of Notifications to delete.
	// request_example: >-
	// {
	// "notifications": [
	// "notification-4025c1b61225",
	// "notification-13hk3fh32534",
	// "notification-4kth40jth5jy"
	// ]
	// }
	Delete(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// desc: Marks a Notification as read. When a Notification is raised and if the Notification has been acknowledged, it can be marked as read with the method.
	// request_example: >-
	// {
	// "notifications": [
	// "notification-6c548a37ee77",
	// "notification-4j3jt9384fnf"
	// ]
	// }
	SetRead(ctx context.Context, in *SetReadNotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// desc: Gets a specific Notification. Prints detailed information about the Notification, including not only the message contents(`title`, `description`) but also related data such as created time and urgency.
	// request_example: >-
	// {
	// "notification_id": "notification-4025c1b61225"
	// }
	// response_example: >-
	// {
	// "notification_id": "notification-4025c1b61225",
	// "topic": "monitoring.Alert",
	// "message": {
	// "tags": {
	// "project_id": "project-18655561c535",
	// "created_at": null,
	// "urgency": "LOW",
	// "state": "TRIGGERED",
	// "resource_id": "AWS/NetworkELB",
	// "resource_name": "[Asia Pacific (Seoul)]:[AWS/NetworkELB]: net/af83f347171a044af46453ebb34c8225/743a23562a96c595"
	// },
	// "title": "[Asia Pacific (Seoul)]: NLB-TCP_Target_Reset_Count-Alert",
	// "description": "Threshold Crossed: 1 out of the last 1 datapoints [200.0 (25/06/21 06:38:00)] was not greater than the threshold (200.0)"
	// },
	// "notification_type": "INFO",
	// "notification_level": "ALL",
	// "is_read": true,
	// "user_id": "user1@spaceone.dev",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2021-06-25T06:42:05.867Z"
	// }
	Get(ctx context.Context, in *GetNotificationRequest, opts ...grpc.CallOption) (*NotificationInfo, error)
	// desc: Gets a list of all Notifications. You can use a query to get a filtered list of Notifications.
	// request_example: >-
	// {
	// "query": {
	// "filter": [
	// {
	// "key": "notification_type",
	// "value": "INFO",
	// "operator": "eq"
	// }
	// ]
	// }
	// }
	// response_example: >-
	// {
	// "results": [
	// {
	// "notification_id": "notification-9f1476af11b7",
	// "topic": "monitoring.Alert",
	// "message": {
	// "tags": {
	// "state": "ACKNOWLEDGED",
	// "resource_id": "pod",
	// "project_id": "project-18655561c535",
	// "urgency": "LOW",
	// "created_at": null,
	// "assignee": "yuda@test.co"
	// },
	// "title": "[Alerting] Not Running Pods 0:OK alert",
	// "description": "[cloudone-dev-v1-eks-cluster] Not Running Pods 0 is OK"
	// },
	// "notification_type": "INFO",
	// "notification_level": "LV2",
	// "is_read": true,
	// "user_id": "user33@spaceone.dev",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2021-06-21T17:13:39.570Z"
	// },
	// {
	// "notification_id": "notification-4025c1b61225",
	// "topic": "monitoring.Alert",
	// "message": {
	// "title": "[Asia Pacific (Seoul)]: NLB-TCP_Target_Reset_Count-Alert",
	// "description": "Threshold Crossed: 1 out of the last 1 datapoints [200.0 (25/06/21 06:38:00)] was not greater than the threshold (200.0)",
	// "tags": {
	// "resource_id": "AWS/NetworkELB",
	// "resource_name": "[Asia Pacific (Seoul)]:[AWS/NetworkELB]: net/dfsbvs/advdr32rwqdsvzc",
	// "created_at": null,
	// "state": "TRIGGERED",
	// "project_id": "project-18655561c535",
	// "urgency": "LOW"
	// }
	// },
	// "notification_type": "INFO",
	// "notification_level": "ALL",
	// "is_read": true,
	// "user_id": "user1@cloudforet.io",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2021-06-25T06:42:05.867Z"
	// }
	// ],
	// "total_count": 2
	// }
	List(ctx context.Context, in *NotificationQuery, opts ...grpc.CallOption) (*NotificationsInfo, error)
	Stat(ctx context.Context, in *NotificationStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type notificationClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationClient(cc grpc.ClientConnInterface) NotificationClient {
	return &notificationClient{cc}
}

func (c *notificationClient) Create(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Notification_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) Push(ctx context.Context, in *PushNotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Notification_Push_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) Delete(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Notification_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) SetRead(ctx context.Context, in *SetReadNotificationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Notification_SetRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) Get(ctx context.Context, in *GetNotificationRequest, opts ...grpc.CallOption) (*NotificationInfo, error) {
	out := new(NotificationInfo)
	err := c.cc.Invoke(ctx, Notification_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) List(ctx context.Context, in *NotificationQuery, opts ...grpc.CallOption) (*NotificationsInfo, error) {
	out := new(NotificationsInfo)
	err := c.cc.Invoke(ctx, Notification_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) Stat(ctx context.Context, in *NotificationStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Notification_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServer is the server API for Notification service.
// All implementations must embed UnimplementedNotificationServer
// for forward compatibility
type NotificationServer interface {
	// desc: Creates a new Notification. When a Notification is created, it is delivered to a UserChannel or a ProjectChannel depending on the parameter `resource_type`. If a Notification is delivered to a UserChannel, the `resource_type` is `identity.User`, and if a Notification is delivered to a ProjectChannel, the `resource_type` is `identity.Project`.
	// request_example: >-
	// {
	// "resource_type": "identity.Project",
	// "resource_id": "resource-123456789012",
	// "topic": "monitoring.Alert",
	// "message": {
	// "title": "[Alerting] Not Running Pods 0:OK alert",
	// "description": "[spaceone-dev] Not Running Pods 0 is OK\n\nFailure level : WorkerNode\nPanel ... ",
	// "tags": {
	// "urgency": "LOW",
	// "resource_id": "pod",
	// "assignee": "user1@email.com",
	// "created_at": "2022-01-01T17:12:45.990Z",
	// "state": "ACKNOWLEDGED",
	// "project_id": "project-123456789012"
	// }
	// },
	// "notification_type": "INFO",
	// "notification_level": "LV2"
	// }
	// response_example: >-
	// {
	// "notification_id": "notification-123456789012",
	// "topic": "monitoring.Alert",
	// "message": {
	// "title": "[Alerting] Not Running Pods 0:OK alert",
	// "description": "[spaceone-dev] Not Running Pods 0 is OK\n\nFailure level : WorkerNode\nPanel ... ",
	// "tags": {
	// "urgency": "LOW",
	// "resource_id": "pod",
	// "assignee": "user1@email.com",
	// "created_at": "2022-01-01T17:12:45.990Z",
	// "state": "ACKNOWLEDGED",
	// "project_id": "project-123456789012"
	// }
	// },
	// "notification_type": "INFO",
	// "notification_level": "LV2",
	// "is_read": true,
	// "user_id": "Cloudforet@mz.co.kr",
	// "domain_id": "domain-123456789012",
	// "created_at": "2022-01-01T17:12:40.990Z"
	// }
	Create(context.Context, *CreateNotificationRequest) (*empty.Empty, error)
	// desc: Manually raises a Notification. A Notification is raised with a message to be sent using a valid specific Protocol, and data used for a specific Protocol such as a phone number.
	// request_example: >-
	// {
	// "protocol_id": "protocol-fb30cb6c28d6",
	// "data": {
	// "phone_number": "01012345678"
	// },
	// "message": {
	// "tags": [
	// {
	// "key": "project_id",
	// "value": "project-xxxx"
	// },
	// {
	// "key": "project_name",
	// "value": "Test Project"
	// },
	// {
	// "key": "resource_id",
	// "value": "server-yyyyy"
	// },
	// {
	// "key": "resource_name",
	// "value": "web-server-001"
	// }
	// ],
	// "description": "This is Sample Message",
	// "title": "Sample"
	// }
	// }
	Push(context.Context, *PushNotificationRequest) (*empty.Empty, error)
	// desc: Deletes multiple Notifications. You must specify `notifications` of the list of Notifications to delete.
	// request_example: >-
	// {
	// "notifications": [
	// "notification-4025c1b61225",
	// "notification-13hk3fh32534",
	// "notification-4kth40jth5jy"
	// ]
	// }
	Delete(context.Context, *NotificationRequest) (*empty.Empty, error)
	// desc: Marks a Notification as read. When a Notification is raised and if the Notification has been acknowledged, it can be marked as read with the method.
	// request_example: >-
	// {
	// "notifications": [
	// "notification-6c548a37ee77",
	// "notification-4j3jt9384fnf"
	// ]
	// }
	SetRead(context.Context, *SetReadNotificationRequest) (*empty.Empty, error)
	// desc: Gets a specific Notification. Prints detailed information about the Notification, including not only the message contents(`title`, `description`) but also related data such as created time and urgency.
	// request_example: >-
	// {
	// "notification_id": "notification-4025c1b61225"
	// }
	// response_example: >-
	// {
	// "notification_id": "notification-4025c1b61225",
	// "topic": "monitoring.Alert",
	// "message": {
	// "tags": {
	// "project_id": "project-18655561c535",
	// "created_at": null,
	// "urgency": "LOW",
	// "state": "TRIGGERED",
	// "resource_id": "AWS/NetworkELB",
	// "resource_name": "[Asia Pacific (Seoul)]:[AWS/NetworkELB]: net/af83f347171a044af46453ebb34c8225/743a23562a96c595"
	// },
	// "title": "[Asia Pacific (Seoul)]: NLB-TCP_Target_Reset_Count-Alert",
	// "description": "Threshold Crossed: 1 out of the last 1 datapoints [200.0 (25/06/21 06:38:00)] was not greater than the threshold (200.0)"
	// },
	// "notification_type": "INFO",
	// "notification_level": "ALL",
	// "is_read": true,
	// "user_id": "user1@spaceone.dev",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2021-06-25T06:42:05.867Z"
	// }
	Get(context.Context, *GetNotificationRequest) (*NotificationInfo, error)
	// desc: Gets a list of all Notifications. You can use a query to get a filtered list of Notifications.
	// request_example: >-
	// {
	// "query": {
	// "filter": [
	// {
	// "key": "notification_type",
	// "value": "INFO",
	// "operator": "eq"
	// }
	// ]
	// }
	// }
	// response_example: >-
	// {
	// "results": [
	// {
	// "notification_id": "notification-9f1476af11b7",
	// "topic": "monitoring.Alert",
	// "message": {
	// "tags": {
	// "state": "ACKNOWLEDGED",
	// "resource_id": "pod",
	// "project_id": "project-18655561c535",
	// "urgency": "LOW",
	// "created_at": null,
	// "assignee": "yuda@test.co"
	// },
	// "title": "[Alerting] Not Running Pods 0:OK alert",
	// "description": "[cloudone-dev-v1-eks-cluster] Not Running Pods 0 is OK"
	// },
	// "notification_type": "INFO",
	// "notification_level": "LV2",
	// "is_read": true,
	// "user_id": "user33@spaceone.dev",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2021-06-21T17:13:39.570Z"
	// },
	// {
	// "notification_id": "notification-4025c1b61225",
	// "topic": "monitoring.Alert",
	// "message": {
	// "title": "[Asia Pacific (Seoul)]: NLB-TCP_Target_Reset_Count-Alert",
	// "description": "Threshold Crossed: 1 out of the last 1 datapoints [200.0 (25/06/21 06:38:00)] was not greater than the threshold (200.0)",
	// "tags": {
	// "resource_id": "AWS/NetworkELB",
	// "resource_name": "[Asia Pacific (Seoul)]:[AWS/NetworkELB]: net/dfsbvs/advdr32rwqdsvzc",
	// "created_at": null,
	// "state": "TRIGGERED",
	// "project_id": "project-18655561c535",
	// "urgency": "LOW"
	// }
	// },
	// "notification_type": "INFO",
	// "notification_level": "ALL",
	// "is_read": true,
	// "user_id": "user1@cloudforet.io",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2021-06-25T06:42:05.867Z"
	// }
	// ],
	// "total_count": 2
	// }
	List(context.Context, *NotificationQuery) (*NotificationsInfo, error)
	Stat(context.Context, *NotificationStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedNotificationServer()
}

// UnimplementedNotificationServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServer struct {
}

func (UnimplementedNotificationServer) Create(context.Context, *CreateNotificationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNotificationServer) Push(context.Context, *PushNotificationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedNotificationServer) Delete(context.Context, *NotificationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNotificationServer) SetRead(context.Context, *SetReadNotificationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRead not implemented")
}
func (UnimplementedNotificationServer) Get(context.Context, *GetNotificationRequest) (*NotificationInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedNotificationServer) List(context.Context, *NotificationQuery) (*NotificationsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedNotificationServer) Stat(context.Context, *NotificationStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedNotificationServer) mustEmbedUnimplementedNotificationServer() {}

// UnsafeNotificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServer will
// result in compilation errors.
type UnsafeNotificationServer interface {
	mustEmbedUnimplementedNotificationServer()
}

func RegisterNotificationServer(s grpc.ServiceRegistrar, srv NotificationServer) {
	s.RegisterService(&Notification_ServiceDesc, srv)
}

func _Notification_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notification_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).Create(ctx, req.(*CreateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notification_Push_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).Push(ctx, req.(*PushNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notification_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).Delete(ctx, req.(*NotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_SetRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReadNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).SetRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notification_SetRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).SetRead(ctx, req.(*SetReadNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notification_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).Get(ctx, req.(*GetNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notification_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).List(ctx, req.(*NotificationQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notification_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).Stat(ctx, req.(*NotificationStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Notification_ServiceDesc is the grpc.ServiceDesc for Notification service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notification_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.notification.v1.Notification",
	HandlerType: (*NotificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Notification_Create_Handler,
		},
		{
			MethodName: "push",
			Handler:    _Notification_Push_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Notification_Delete_Handler,
		},
		{
			MethodName: "set_read",
			Handler:    _Notification_SetRead_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Notification_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Notification_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _Notification_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/notification/v1/notification.proto",
}
