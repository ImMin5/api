//
//desc: A ProjectChannel is a destination  where Notifications are delivered. Notifications are generated via the Protocol set by each Project.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: spaceone/api/notification/v1/project_channel.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProjectChannel_Create_FullMethodName          = "/spaceone.api.notification.v1.ProjectChannel/create"
	ProjectChannel_Update_FullMethodName          = "/spaceone.api.notification.v1.ProjectChannel/update"
	ProjectChannel_SetSchedule_FullMethodName     = "/spaceone.api.notification.v1.ProjectChannel/set_schedule"
	ProjectChannel_SetSubscription_FullMethodName = "/spaceone.api.notification.v1.ProjectChannel/set_subscription"
	ProjectChannel_Enable_FullMethodName          = "/spaceone.api.notification.v1.ProjectChannel/enable"
	ProjectChannel_Disable_FullMethodName         = "/spaceone.api.notification.v1.ProjectChannel/disable"
	ProjectChannel_Delete_FullMethodName          = "/spaceone.api.notification.v1.ProjectChannel/delete"
	ProjectChannel_Get_FullMethodName             = "/spaceone.api.notification.v1.ProjectChannel/get"
	ProjectChannel_List_FullMethodName            = "/spaceone.api.notification.v1.ProjectChannel/list"
	ProjectChannel_Stat_FullMethodName            = "/spaceone.api.notification.v1.ProjectChannel/stat"
)

// ProjectChannelClient is the client API for ProjectChannel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectChannelClient interface {
	// desc: Creates a new ProjectChannel. ProjectChannel is a channel that delivers a Notification to the Project when the Notification is created. When creating a ProjectChannel, one Protocol must be selected, and a Notification is dispatched via the selected Protocol.
	// request_example: >-
	// {
	// "protocol_id": "protocol-ab94ea7d574e",
	// "name": "sms-test",
	// "data": {
	// "phone_number": "01011112222"
	// },
	// "is_subscribe": true,
	// "subscriptions": ["monitoring.Alert"],
	// "notification_level": "LV1",
	// "is_scheduled": true,
	// "schedule": {
	// "day_of_week": [
	// "MON",
	// "TUE",
	// "WED",
	// "THU",
	// "FRI"
	// ],
	// "end_hour": 9
	// },
	// "project_id": "project-52a423012d5e"
	// }
	// response_example: >-
	// {
	// "project_channel_id": "project-ch-488df94d026d",
	// "name": "sms-test",
	// "state": "ENABLED",
	// "data": {
	// "phone_number": "01011112222"
	// },
	// "notification_level": "LV1",
	// "tags": {},
	// "protocol_id": "protocol-ab94ea7d574e",
	// "project_id": "project-aa723eed3d69",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-06-13T07:35:28.305Z"
	// }
	Create(ctx context.Context, in *CreateProjectChannelRequest, opts ...grpc.CallOption) (*ProjectChannelInfo, error)
	// desc: Updates a specific ProjectChannel. A ProjectChannel that has already been configured cannot be changed. Instead, the data required for dispatching Notifications to a ProjectChannel can be updated.
	// request_example: >-
	// {
	// "project_channel_id": "project-ch-488df94d026d",
	// "name": "sms2-test",
	// "data": {
	// "phone_number": "01033334444"
	// },
	// "notification_level": "LV2",
	// "tags": {
	// "a": "b"
	// }
	// }
	// response_example: >-
	// {
	// "project_channel_id": "project-ch-488df94d026d",
	// "name": "sms2-test",
	// "state": "ENABLED",
	// "data": {
	// "phone_number": "01033334444"
	// },
	// "notification_level": "LV2",
	// "tags": {
	// "a": "b"
	// },
	// "protocol_id": "protocol-ab94ea7d574e",
	// "project_id": "project-aa723eed3d69",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-06-13T07:35:28.305Z"
	// }
	Update(ctx context.Context, in *UpdateProjectChannelRequest, opts ...grpc.CallOption) (*ProjectChannelInfo, error)
	// desc: Sets a schedule for a ProjectChannel. A schedule defines the time to receive a Notification. When a Notification is created, you can set the day of the week and time you want to receive it. When you set the day of the week, you can receive a notification only on the day of the week you set. If you also set the start time and end time with the day of the week, you can receive a Notification only at the scheduled time on the day of the week you set. If there is no schedule set in a ProjectChannel, Notifications will be dispatched at all times via the ProjectChannel.
	// request_example: >-
	// {
	// "project_channel_id": "project-ch-488df94d026d",
	// "is_scheduled": true,
	// "schedule": {
	// "day_of_week": [
	// "MON",
	// "WED",
	// "FRI"
	// ],
	// "end_hour": 9
	// }
	// }
	// response_example: >-
	// {
	// "project_channel_id": "project-ch-488df94d026d",
	// "name": "sms2-test",
	// "state": "ENABLED",
	// "data": {
	// "phone_number": "01033334444"
	// },
	// "notification_level": "LV2",
	// "is_scheduled": true,
	// "schedule": {
	// "day_of_week": [
	// "MON",
	// "WED",
	// "FRI"
	// ],
	// "end_hour": 9
	// },
	// "tags": {
	// "a": "b"
	// },
	// "protocol_id": "protocol-ab94ea7d574e",
	// "project_id": "project-aa723eed3d69",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-06-13T07:35:28.305Z"
	// }
	SetSchedule(ctx context.Context, in *UpdateProjectChannelScheduleRequest, opts ...grpc.CallOption) (*ProjectChannelInfo, error)
	// desc: Sets a subscription for a ProjectChannel. A subscription is a topic for channels to subscribe to and get notified about. If a ProjectChannel has subscriptions, a Notification is dispatched only if the topic of the Notification is the same as the one set in the subscriptions. If there is no subscription in a ProjectChannel, all Notifications will be dispatched.
	// request_example: >-
	// {
	// "project_channel_id": "project-ch-cff007433a23",
	// "is_subscribe": true,
	// "subscriptions": [
	// "monitoring.Alert"
	// ]
	// }
	// response_example: >-
	// {
	// "project_channel_id": "project-ch-cff007433a23",
	// "name": "sms-test",
	// "state": "ENABLED",
	// "data": {
	// "phone_number": "01033334444"
	// },
	// "is_subscribe": true,
	// "subscriptions": [
	// "monitoring.Alert"
	// ],
	// "notification_level": "LV1",
	// "is_scheduled": true,
	// "schedule": {
	// "day_of_week": [
	// "MON",
	// "TUE",
	// "WED",
	// "THU",
	// "FRI"
	// ],
	// "end_hour": 9
	// },
	// "tags": {},
	// "protocol_id": "protocol-ab94ea7d574e",
	// "project_id": "project-52a423012d5e",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-06-20T06:03:09.177Z"
	// }
	SetSubscription(ctx context.Context, in *UpdateProjectChannelSubscriptionRequest, opts ...grpc.CallOption) (*ProjectChannelInfo, error)
	// desc: Enables a specific ProjectChannel. If a ProjectChannel is enabled, the ProjectChannel can be used and the Notification can be dispatched. Even if a ProjectChannel is enabled, if the Protocol used in the ProjectChannel is disabled, the Notification is not dispatched.
	// request_example: >-
	// {
	// "project_channel_id": "project-ch-ffdb1d6cc774"
	// }
	Enable(ctx context.Context, in *ProjectChannelRequest, opts ...grpc.CallOption) (*ProjectChannelInfo, error)
	// desc: Disables a specific ProjectChannel. If a ProjectChannel is disabled, the Notification is not dispatched, even if it is created.
	// request_example: >-
	// {
	// "project_channel_id": "project-ch-ffdb1d6cc774"
	// }
	Disable(ctx context.Context, in *ProjectChannelRequest, opts ...grpc.CallOption) (*ProjectChannelInfo, error)
	// desc: Deletes a specific ProjectChannel.
	// request_example: >-
	// {
	// "project_channel_id": "project-ch-ffdb1d6cc774"
	// }
	Delete(ctx context.Context, in *ProjectChannelRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// desc: Gets a specific ProjectChannel. Prints detailed information about the ProjectChannel.
	// request_example: >-
	// {
	// "project_channel_id": "project-ch-ffdb1d6cc774"
	// }
	// response_example: >-
	// {
	// "project_channel_id": "project-ch-ffdb1d6cc774",
	// "name": "personal_email",
	// "state": "ENABLED",
	// "data": {
	// "email": "user1@cloudforet.io"
	// },
	// "notification_level": "LV1",
	// "tags": {},
	// "protocol_id": "protocol-e000a677ebdb",
	// "project_id": "project-52a423012d5e",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-06-20T04:40:21.264Z"
	// }
	Get(ctx context.Context, in *GetProjectChannelRequest, opts ...grpc.CallOption) (*ProjectChannelInfo, error)
	// desc: Gets a list of all ProjectChannels. You can use a query to get a filtered list of ProjectChannels.
	// request_example: >-
	// {
	// "query": {
	// "filter": [
	// {
	// "key": "state",
	// "value": "ENABLED",
	// "operator": "eq"
	// }
	// ]
	// }
	// }
	// response_example: >-
	// {
	// "results": [
	// {
	// "project_channel_id": "project-ch-473efcfde4b1",
	// "name": "Email Groups",
	// "state": "ENABLED",
	// "data": {
	// "email": "sykim1@cloudforet.io, sykim2@cloudforet.io"
	// },
	// "notification_level": "LV1",
	// "tags": {},
	// "protocol_id": "protocol-e000a677ebdb",
	// "project_id": "project-28cf4f2e6645",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-04-18T01:22:01.182Z"
	// },
	// {
	// "project_channel_id": "project-ch-98845ba0f975",
	// "name": "Song Email",
	// "state": "ENABLED",
	// "data": {
	// "email": "sykim@mz.co.kr"
	// },
	// "notification_level": "LV1",
	// "tags": {},
	// "protocol_id": "protocol-e000a677ebdb",
	// "project_id": "project-28cf4f2e6645",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-04-18T01:17:40.741Z"
	// }
	// ],
	// "total_count": 2
	// }
	List(ctx context.Context, in *ProjectChannelQuery, opts ...grpc.CallOption) (*ProjectChannelsInfo, error)
	Stat(ctx context.Context, in *ProjectChannelStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type projectChannelClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectChannelClient(cc grpc.ClientConnInterface) ProjectChannelClient {
	return &projectChannelClient{cc}
}

func (c *projectChannelClient) Create(ctx context.Context, in *CreateProjectChannelRequest, opts ...grpc.CallOption) (*ProjectChannelInfo, error) {
	out := new(ProjectChannelInfo)
	err := c.cc.Invoke(ctx, ProjectChannel_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectChannelClient) Update(ctx context.Context, in *UpdateProjectChannelRequest, opts ...grpc.CallOption) (*ProjectChannelInfo, error) {
	out := new(ProjectChannelInfo)
	err := c.cc.Invoke(ctx, ProjectChannel_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectChannelClient) SetSchedule(ctx context.Context, in *UpdateProjectChannelScheduleRequest, opts ...grpc.CallOption) (*ProjectChannelInfo, error) {
	out := new(ProjectChannelInfo)
	err := c.cc.Invoke(ctx, ProjectChannel_SetSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectChannelClient) SetSubscription(ctx context.Context, in *UpdateProjectChannelSubscriptionRequest, opts ...grpc.CallOption) (*ProjectChannelInfo, error) {
	out := new(ProjectChannelInfo)
	err := c.cc.Invoke(ctx, ProjectChannel_SetSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectChannelClient) Enable(ctx context.Context, in *ProjectChannelRequest, opts ...grpc.CallOption) (*ProjectChannelInfo, error) {
	out := new(ProjectChannelInfo)
	err := c.cc.Invoke(ctx, ProjectChannel_Enable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectChannelClient) Disable(ctx context.Context, in *ProjectChannelRequest, opts ...grpc.CallOption) (*ProjectChannelInfo, error) {
	out := new(ProjectChannelInfo)
	err := c.cc.Invoke(ctx, ProjectChannel_Disable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectChannelClient) Delete(ctx context.Context, in *ProjectChannelRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectChannel_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectChannelClient) Get(ctx context.Context, in *GetProjectChannelRequest, opts ...grpc.CallOption) (*ProjectChannelInfo, error) {
	out := new(ProjectChannelInfo)
	err := c.cc.Invoke(ctx, ProjectChannel_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectChannelClient) List(ctx context.Context, in *ProjectChannelQuery, opts ...grpc.CallOption) (*ProjectChannelsInfo, error) {
	out := new(ProjectChannelsInfo)
	err := c.cc.Invoke(ctx, ProjectChannel_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectChannelClient) Stat(ctx context.Context, in *ProjectChannelStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, ProjectChannel_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectChannelServer is the server API for ProjectChannel service.
// All implementations must embed UnimplementedProjectChannelServer
// for forward compatibility
type ProjectChannelServer interface {
	// desc: Creates a new ProjectChannel. ProjectChannel is a channel that delivers a Notification to the Project when the Notification is created. When creating a ProjectChannel, one Protocol must be selected, and a Notification is dispatched via the selected Protocol.
	// request_example: >-
	// {
	// "protocol_id": "protocol-ab94ea7d574e",
	// "name": "sms-test",
	// "data": {
	// "phone_number": "01011112222"
	// },
	// "is_subscribe": true,
	// "subscriptions": ["monitoring.Alert"],
	// "notification_level": "LV1",
	// "is_scheduled": true,
	// "schedule": {
	// "day_of_week": [
	// "MON",
	// "TUE",
	// "WED",
	// "THU",
	// "FRI"
	// ],
	// "end_hour": 9
	// },
	// "project_id": "project-52a423012d5e"
	// }
	// response_example: >-
	// {
	// "project_channel_id": "project-ch-488df94d026d",
	// "name": "sms-test",
	// "state": "ENABLED",
	// "data": {
	// "phone_number": "01011112222"
	// },
	// "notification_level": "LV1",
	// "tags": {},
	// "protocol_id": "protocol-ab94ea7d574e",
	// "project_id": "project-aa723eed3d69",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-06-13T07:35:28.305Z"
	// }
	Create(context.Context, *CreateProjectChannelRequest) (*ProjectChannelInfo, error)
	// desc: Updates a specific ProjectChannel. A ProjectChannel that has already been configured cannot be changed. Instead, the data required for dispatching Notifications to a ProjectChannel can be updated.
	// request_example: >-
	// {
	// "project_channel_id": "project-ch-488df94d026d",
	// "name": "sms2-test",
	// "data": {
	// "phone_number": "01033334444"
	// },
	// "notification_level": "LV2",
	// "tags": {
	// "a": "b"
	// }
	// }
	// response_example: >-
	// {
	// "project_channel_id": "project-ch-488df94d026d",
	// "name": "sms2-test",
	// "state": "ENABLED",
	// "data": {
	// "phone_number": "01033334444"
	// },
	// "notification_level": "LV2",
	// "tags": {
	// "a": "b"
	// },
	// "protocol_id": "protocol-ab94ea7d574e",
	// "project_id": "project-aa723eed3d69",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-06-13T07:35:28.305Z"
	// }
	Update(context.Context, *UpdateProjectChannelRequest) (*ProjectChannelInfo, error)
	// desc: Sets a schedule for a ProjectChannel. A schedule defines the time to receive a Notification. When a Notification is created, you can set the day of the week and time you want to receive it. When you set the day of the week, you can receive a notification only on the day of the week you set. If you also set the start time and end time with the day of the week, you can receive a Notification only at the scheduled time on the day of the week you set. If there is no schedule set in a ProjectChannel, Notifications will be dispatched at all times via the ProjectChannel.
	// request_example: >-
	// {
	// "project_channel_id": "project-ch-488df94d026d",
	// "is_scheduled": true,
	// "schedule": {
	// "day_of_week": [
	// "MON",
	// "WED",
	// "FRI"
	// ],
	// "end_hour": 9
	// }
	// }
	// response_example: >-
	// {
	// "project_channel_id": "project-ch-488df94d026d",
	// "name": "sms2-test",
	// "state": "ENABLED",
	// "data": {
	// "phone_number": "01033334444"
	// },
	// "notification_level": "LV2",
	// "is_scheduled": true,
	// "schedule": {
	// "day_of_week": [
	// "MON",
	// "WED",
	// "FRI"
	// ],
	// "end_hour": 9
	// },
	// "tags": {
	// "a": "b"
	// },
	// "protocol_id": "protocol-ab94ea7d574e",
	// "project_id": "project-aa723eed3d69",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-06-13T07:35:28.305Z"
	// }
	SetSchedule(context.Context, *UpdateProjectChannelScheduleRequest) (*ProjectChannelInfo, error)
	// desc: Sets a subscription for a ProjectChannel. A subscription is a topic for channels to subscribe to and get notified about. If a ProjectChannel has subscriptions, a Notification is dispatched only if the topic of the Notification is the same as the one set in the subscriptions. If there is no subscription in a ProjectChannel, all Notifications will be dispatched.
	// request_example: >-
	// {
	// "project_channel_id": "project-ch-cff007433a23",
	// "is_subscribe": true,
	// "subscriptions": [
	// "monitoring.Alert"
	// ]
	// }
	// response_example: >-
	// {
	// "project_channel_id": "project-ch-cff007433a23",
	// "name": "sms-test",
	// "state": "ENABLED",
	// "data": {
	// "phone_number": "01033334444"
	// },
	// "is_subscribe": true,
	// "subscriptions": [
	// "monitoring.Alert"
	// ],
	// "notification_level": "LV1",
	// "is_scheduled": true,
	// "schedule": {
	// "day_of_week": [
	// "MON",
	// "TUE",
	// "WED",
	// "THU",
	// "FRI"
	// ],
	// "end_hour": 9
	// },
	// "tags": {},
	// "protocol_id": "protocol-ab94ea7d574e",
	// "project_id": "project-52a423012d5e",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-06-20T06:03:09.177Z"
	// }
	SetSubscription(context.Context, *UpdateProjectChannelSubscriptionRequest) (*ProjectChannelInfo, error)
	// desc: Enables a specific ProjectChannel. If a ProjectChannel is enabled, the ProjectChannel can be used and the Notification can be dispatched. Even if a ProjectChannel is enabled, if the Protocol used in the ProjectChannel is disabled, the Notification is not dispatched.
	// request_example: >-
	// {
	// "project_channel_id": "project-ch-ffdb1d6cc774"
	// }
	Enable(context.Context, *ProjectChannelRequest) (*ProjectChannelInfo, error)
	// desc: Disables a specific ProjectChannel. If a ProjectChannel is disabled, the Notification is not dispatched, even if it is created.
	// request_example: >-
	// {
	// "project_channel_id": "project-ch-ffdb1d6cc774"
	// }
	Disable(context.Context, *ProjectChannelRequest) (*ProjectChannelInfo, error)
	// desc: Deletes a specific ProjectChannel.
	// request_example: >-
	// {
	// "project_channel_id": "project-ch-ffdb1d6cc774"
	// }
	Delete(context.Context, *ProjectChannelRequest) (*empty.Empty, error)
	// desc: Gets a specific ProjectChannel. Prints detailed information about the ProjectChannel.
	// request_example: >-
	// {
	// "project_channel_id": "project-ch-ffdb1d6cc774"
	// }
	// response_example: >-
	// {
	// "project_channel_id": "project-ch-ffdb1d6cc774",
	// "name": "personal_email",
	// "state": "ENABLED",
	// "data": {
	// "email": "user1@cloudforet.io"
	// },
	// "notification_level": "LV1",
	// "tags": {},
	// "protocol_id": "protocol-e000a677ebdb",
	// "project_id": "project-52a423012d5e",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-06-20T04:40:21.264Z"
	// }
	Get(context.Context, *GetProjectChannelRequest) (*ProjectChannelInfo, error)
	// desc: Gets a list of all ProjectChannels. You can use a query to get a filtered list of ProjectChannels.
	// request_example: >-
	// {
	// "query": {
	// "filter": [
	// {
	// "key": "state",
	// "value": "ENABLED",
	// "operator": "eq"
	// }
	// ]
	// }
	// }
	// response_example: >-
	// {
	// "results": [
	// {
	// "project_channel_id": "project-ch-473efcfde4b1",
	// "name": "Email Groups",
	// "state": "ENABLED",
	// "data": {
	// "email": "sykim1@cloudforet.io, sykim2@cloudforet.io"
	// },
	// "notification_level": "LV1",
	// "tags": {},
	// "protocol_id": "protocol-e000a677ebdb",
	// "project_id": "project-28cf4f2e6645",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-04-18T01:22:01.182Z"
	// },
	// {
	// "project_channel_id": "project-ch-98845ba0f975",
	// "name": "Song Email",
	// "state": "ENABLED",
	// "data": {
	// "email": "sykim@mz.co.kr"
	// },
	// "notification_level": "LV1",
	// "tags": {},
	// "protocol_id": "protocol-e000a677ebdb",
	// "project_id": "project-28cf4f2e6645",
	// "domain_id": "domain-58010aa2e451",
	// "created_at": "2022-04-18T01:17:40.741Z"
	// }
	// ],
	// "total_count": 2
	// }
	List(context.Context, *ProjectChannelQuery) (*ProjectChannelsInfo, error)
	Stat(context.Context, *ProjectChannelStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedProjectChannelServer()
}

// UnimplementedProjectChannelServer must be embedded to have forward compatible implementations.
type UnimplementedProjectChannelServer struct {
}

func (UnimplementedProjectChannelServer) Create(context.Context, *CreateProjectChannelRequest) (*ProjectChannelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProjectChannelServer) Update(context.Context, *UpdateProjectChannelRequest) (*ProjectChannelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProjectChannelServer) SetSchedule(context.Context, *UpdateProjectChannelScheduleRequest) (*ProjectChannelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSchedule not implemented")
}
func (UnimplementedProjectChannelServer) SetSubscription(context.Context, *UpdateProjectChannelSubscriptionRequest) (*ProjectChannelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSubscription not implemented")
}
func (UnimplementedProjectChannelServer) Enable(context.Context, *ProjectChannelRequest) (*ProjectChannelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedProjectChannelServer) Disable(context.Context, *ProjectChannelRequest) (*ProjectChannelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedProjectChannelServer) Delete(context.Context, *ProjectChannelRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProjectChannelServer) Get(context.Context, *GetProjectChannelRequest) (*ProjectChannelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProjectChannelServer) List(context.Context, *ProjectChannelQuery) (*ProjectChannelsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProjectChannelServer) Stat(context.Context, *ProjectChannelStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedProjectChannelServer) mustEmbedUnimplementedProjectChannelServer() {}

// UnsafeProjectChannelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectChannelServer will
// result in compilation errors.
type UnsafeProjectChannelServer interface {
	mustEmbedUnimplementedProjectChannelServer()
}

func RegisterProjectChannelServer(s grpc.ServiceRegistrar, srv ProjectChannelServer) {
	s.RegisterService(&ProjectChannel_ServiceDesc, srv)
}

func _ProjectChannel_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectChannelServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectChannel_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectChannelServer).Create(ctx, req.(*CreateProjectChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectChannel_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectChannelServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectChannel_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectChannelServer).Update(ctx, req.(*UpdateProjectChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectChannel_SetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectChannelScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectChannelServer).SetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectChannel_SetSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectChannelServer).SetSchedule(ctx, req.(*UpdateProjectChannelScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectChannel_SetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectChannelSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectChannelServer).SetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectChannel_SetSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectChannelServer).SetSubscription(ctx, req.(*UpdateProjectChannelSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectChannel_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectChannelServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectChannel_Enable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectChannelServer).Enable(ctx, req.(*ProjectChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectChannel_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectChannelServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectChannel_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectChannelServer).Disable(ctx, req.(*ProjectChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectChannel_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectChannelServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectChannel_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectChannelServer).Delete(ctx, req.(*ProjectChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectChannel_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectChannelServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectChannel_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectChannelServer).Get(ctx, req.(*GetProjectChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectChannel_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectChannelQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectChannelServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectChannel_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectChannelServer).List(ctx, req.(*ProjectChannelQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectChannel_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectChannelStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectChannelServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectChannel_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectChannelServer).Stat(ctx, req.(*ProjectChannelStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectChannel_ServiceDesc is the grpc.ServiceDesc for ProjectChannel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectChannel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.notification.v1.ProjectChannel",
	HandlerType: (*ProjectChannelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _ProjectChannel_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _ProjectChannel_Update_Handler,
		},
		{
			MethodName: "set_schedule",
			Handler:    _ProjectChannel_SetSchedule_Handler,
		},
		{
			MethodName: "set_subscription",
			Handler:    _ProjectChannel_SetSubscription_Handler,
		},
		{
			MethodName: "enable",
			Handler:    _ProjectChannel_Enable_Handler,
		},
		{
			MethodName: "disable",
			Handler:    _ProjectChannel_Disable_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _ProjectChannel_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _ProjectChannel_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _ProjectChannel_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _ProjectChannel_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/notification/v1/project_channel.proto",
}
