//
//desc: A Metric is a monitoring metric of a specific cloud service delivered from a DataSource.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: spaceone/api/monitoring/v1/metric.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Metric_List_FullMethodName    = "/spaceone.api.monitoring.v1.Metric/list"
	Metric_GetData_FullMethodName = "/spaceone.api.monitoring.v1.Metric/get_data"
)

// MetricClient is the client API for Metric service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricClient interface {
	// desc: Gets a list of all Metrics of one or more specified Resources. The parameter `resources` is a list of Resources from which to get a list of Metrics collected.
	// request_example: >-
	// {
	// "data_source_id": "ds-31190a65a42a",
	// "resources": ["cloud-svc-cd0105d255da"],
	// "domain_id": "domain-58010aa2e451"
	// }
	// response_example: >-
	// {
	// "metrics": [
	// {
	// "key": "CPUUtilization",
	// "group": "AWS/EC2",
	// "name": "CPUUtilization",
	// "unit": {
	// "y": "Percent",
	// "x": "Timestamp"
	// },
	// "metric_query": {
	// "cloud-svc-cd0105d255da": {
	// "Dimensions": [
	// {
	// "Name": "InstanceId",
	// "Value": "i-0400cdd39f1a4d5e9"
	// }
	// ],
	// "MetricName": "CPUUtilization",
	// "Namespace": "AWS/EC2"
	// }
	// }
	// },
	// {
	// "key": "NetworkIn",
	// "group": "AWS/EC2",
	// "name": "NetworkIn",
	// "unit": {
	// "y": "Bytes",
	// "x": "Timestamp"
	// },
	// "metric_query": {
	// "cloud-svc-cd0105d255da": {
	// "Dimensions": [
	// {
	// "Name": "InstanceId",
	// "Value": "i-0400cdd39f1a4d5e9"
	// }
	// ],
	// "MetricName": "NetworkIn",
	// "Namespace": "AWS/EC2"
	// }
	// }
	// }
	// ],
	// "available_resources": {
	// "cloud-svc-cd0105d255da": true
	// },
	// "domain_id": "domain-31190a65a42a"
	// }
	List(ctx context.Context, in *MetricRequest, opts ...grpc.CallOption) (*MetricsInfo, error)
	// desc: Gets data of a single Metric. You must specify the parameter `metric` to get data of. You can specify the `period` to get data for.
	// request_example: >-
	// {
	// "data_source_id": "ds-31190a65a42a",
	// "metric_query": {
	// "cloud-svc-cd0105d255da": {
	// "Dimensions": [
	// {
	// "Name": "InstanceId",
	// "Value": "i-0400cdd39f1a4d5e9"
	// }
	// ],
	// "MetricName": "CPUUtilization",
	// "Namespace": "AWS/EC2"
	// }
	// },
	// "metric": "CPUUtilization",
	// "start": "2022-06-21T03:11:29.438Z",
	// "end": "2022-06-21T04:11:29.438Z",
	// "stat": "AVERAGE",
	// "domain_id": "domain-58010aa2e451"
	// }
	// response_example: >-
	// {
	// "labels": [
	// "2022-06-21T03:13:00.000Z",
	// "2022-06-21T03:18:00.000Z",
	// "2022-06-21T03:23:00.000Z",
	// "2022-06-21T03:28:00.000Z",
	// "2022-06-21T03:33:00.000Z",
	// "2022-06-21T03:38:00.000Z",
	// "2022-06-21T03:43:00.000Z",
	// "2022-06-21T03:48:00.000Z",
	// "2022-06-21T03:53:00.000Z",
	// "2022-06-21T03:58:00.000Z",
	// "2022-06-21T04:03:00.000Z",
	// "2022-06-21T04:08:00.000Z"
	// ],
	// "resource_values": {
	// "cloud-svc-cd0105d255da": [
	// 0.099999999999999,
	// 0.10001852366397981,
	// 0.10001852366397981,
	// 0.1328230362675432,
	// 0.099472075576548,
	// 0.06507936507936621,
	// 0.166703713994628,
	// 0.1338983050847476,
	// 0.1327868852458988,
	// 0.1339168287487284,
	// 0.1328610417160508,
	// 0.10056497175141618
	// ]
	// },
	// "domain_id": "domain-58010aa2e451"
	// }
	GetData(ctx context.Context, in *MetricDataRequest, opts ...grpc.CallOption) (*MetricDataInfo, error)
}

type metricClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricClient(cc grpc.ClientConnInterface) MetricClient {
	return &metricClient{cc}
}

func (c *metricClient) List(ctx context.Context, in *MetricRequest, opts ...grpc.CallOption) (*MetricsInfo, error) {
	out := new(MetricsInfo)
	err := c.cc.Invoke(ctx, Metric_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricClient) GetData(ctx context.Context, in *MetricDataRequest, opts ...grpc.CallOption) (*MetricDataInfo, error) {
	out := new(MetricDataInfo)
	err := c.cc.Invoke(ctx, Metric_GetData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricServer is the server API for Metric service.
// All implementations must embed UnimplementedMetricServer
// for forward compatibility
type MetricServer interface {
	// desc: Gets a list of all Metrics of one or more specified Resources. The parameter `resources` is a list of Resources from which to get a list of Metrics collected.
	// request_example: >-
	// {
	// "data_source_id": "ds-31190a65a42a",
	// "resources": ["cloud-svc-cd0105d255da"],
	// "domain_id": "domain-58010aa2e451"
	// }
	// response_example: >-
	// {
	// "metrics": [
	// {
	// "key": "CPUUtilization",
	// "group": "AWS/EC2",
	// "name": "CPUUtilization",
	// "unit": {
	// "y": "Percent",
	// "x": "Timestamp"
	// },
	// "metric_query": {
	// "cloud-svc-cd0105d255da": {
	// "Dimensions": [
	// {
	// "Name": "InstanceId",
	// "Value": "i-0400cdd39f1a4d5e9"
	// }
	// ],
	// "MetricName": "CPUUtilization",
	// "Namespace": "AWS/EC2"
	// }
	// }
	// },
	// {
	// "key": "NetworkIn",
	// "group": "AWS/EC2",
	// "name": "NetworkIn",
	// "unit": {
	// "y": "Bytes",
	// "x": "Timestamp"
	// },
	// "metric_query": {
	// "cloud-svc-cd0105d255da": {
	// "Dimensions": [
	// {
	// "Name": "InstanceId",
	// "Value": "i-0400cdd39f1a4d5e9"
	// }
	// ],
	// "MetricName": "NetworkIn",
	// "Namespace": "AWS/EC2"
	// }
	// }
	// }
	// ],
	// "available_resources": {
	// "cloud-svc-cd0105d255da": true
	// },
	// "domain_id": "domain-31190a65a42a"
	// }
	List(context.Context, *MetricRequest) (*MetricsInfo, error)
	// desc: Gets data of a single Metric. You must specify the parameter `metric` to get data of. You can specify the `period` to get data for.
	// request_example: >-
	// {
	// "data_source_id": "ds-31190a65a42a",
	// "metric_query": {
	// "cloud-svc-cd0105d255da": {
	// "Dimensions": [
	// {
	// "Name": "InstanceId",
	// "Value": "i-0400cdd39f1a4d5e9"
	// }
	// ],
	// "MetricName": "CPUUtilization",
	// "Namespace": "AWS/EC2"
	// }
	// },
	// "metric": "CPUUtilization",
	// "start": "2022-06-21T03:11:29.438Z",
	// "end": "2022-06-21T04:11:29.438Z",
	// "stat": "AVERAGE",
	// "domain_id": "domain-58010aa2e451"
	// }
	// response_example: >-
	// {
	// "labels": [
	// "2022-06-21T03:13:00.000Z",
	// "2022-06-21T03:18:00.000Z",
	// "2022-06-21T03:23:00.000Z",
	// "2022-06-21T03:28:00.000Z",
	// "2022-06-21T03:33:00.000Z",
	// "2022-06-21T03:38:00.000Z",
	// "2022-06-21T03:43:00.000Z",
	// "2022-06-21T03:48:00.000Z",
	// "2022-06-21T03:53:00.000Z",
	// "2022-06-21T03:58:00.000Z",
	// "2022-06-21T04:03:00.000Z",
	// "2022-06-21T04:08:00.000Z"
	// ],
	// "resource_values": {
	// "cloud-svc-cd0105d255da": [
	// 0.099999999999999,
	// 0.10001852366397981,
	// 0.10001852366397981,
	// 0.1328230362675432,
	// 0.099472075576548,
	// 0.06507936507936621,
	// 0.166703713994628,
	// 0.1338983050847476,
	// 0.1327868852458988,
	// 0.1339168287487284,
	// 0.1328610417160508,
	// 0.10056497175141618
	// ]
	// },
	// "domain_id": "domain-58010aa2e451"
	// }
	GetData(context.Context, *MetricDataRequest) (*MetricDataInfo, error)
	mustEmbedUnimplementedMetricServer()
}

// UnimplementedMetricServer must be embedded to have forward compatible implementations.
type UnimplementedMetricServer struct {
}

func (UnimplementedMetricServer) List(context.Context, *MetricRequest) (*MetricsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMetricServer) GetData(context.Context, *MetricDataRequest) (*MetricDataInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedMetricServer) mustEmbedUnimplementedMetricServer() {}

// UnsafeMetricServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricServer will
// result in compilation errors.
type UnsafeMetricServer interface {
	mustEmbedUnimplementedMetricServer()
}

func RegisterMetricServer(s grpc.ServiceRegistrar, srv MetricServer) {
	s.RegisterService(&Metric_ServiceDesc, srv)
}

func _Metric_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metric_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServer).List(ctx, req.(*MetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metric_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metric_GetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServer).GetData(ctx, req.(*MetricDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Metric_ServiceDesc is the grpc.ServiceDesc for Metric service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Metric_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.monitoring.v1.Metric",
	HandlerType: (*MetricServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _Metric_List_Handler,
		},
		{
			MethodName: "get_data",
			Handler:    _Metric_GetData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/monitoring/v1/metric.proto",
}
