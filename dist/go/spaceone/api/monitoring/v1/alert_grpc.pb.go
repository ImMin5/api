//
//desc: An Alert, a set of Events, is the smallest unit to manage incidents.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: spaceone/api/monitoring/v1/alert.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Alert_Create_FullMethodName                  = "/spaceone.api.monitoring.v1.Alert/create"
	Alert_Update_FullMethodName                  = "/spaceone.api.monitoring.v1.Alert/update"
	Alert_UpdateState_FullMethodName             = "/spaceone.api.monitoring.v1.Alert/update_state"
	Alert_Merge_FullMethodName                   = "/spaceone.api.monitoring.v1.Alert/merge"
	Alert_Snooze_FullMethodName                  = "/spaceone.api.monitoring.v1.Alert/snooze"
	Alert_AddResponder_FullMethodName            = "/spaceone.api.monitoring.v1.Alert/add_responder"
	Alert_RemoveResponder_FullMethodName         = "/spaceone.api.monitoring.v1.Alert/remove_responder"
	Alert_AddProjectDependency_FullMethodName    = "/spaceone.api.monitoring.v1.Alert/add_project_dependency"
	Alert_RemoveProjectDependency_FullMethodName = "/spaceone.api.monitoring.v1.Alert/remove_project_dependency"
	Alert_Delete_FullMethodName                  = "/spaceone.api.monitoring.v1.Alert/delete"
	Alert_Get_FullMethodName                     = "/spaceone.api.monitoring.v1.Alert/get"
	Alert_List_FullMethodName                    = "/spaceone.api.monitoring.v1.Alert/list"
	Alert_Stat_FullMethodName                    = "/spaceone.api.monitoring.v1.Alert/stat"
)

// AlertClient is the client API for Alert service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertClient interface {
	// desc: Creates a new Alert. Alerts generated with `create` method are made in a manual way. Manually made Alerts can be used for Notifications.
	// request_example: >-
	// {
	// "title": "sample test",
	// "description": "This is a description of sample.",
	// "urgency": "HIGH",
	// "project_id": "project-123456789012",
	// "domain_id": "domain-123456789012"
	// }
	// response_example: >-
	// {
	// "alert_number": 104053,
	// "alert_id": "alert-123456789012",
	// "title": "sample test",
	// "state": "TRIGGERED",
	// "description": "This is a description of sample.",
	// "urgency": "HIGH",
	// "severity": "NONE",
	// "escalation_step": 1,
	// "additional_info": {},
	// "triggered_by": "user1@email.com",
	// "escalation_policy_id": "ep-123456789012",
	// "project_id": "project-123456789012",
	// "domain_id": "domain-123456789012",
	// "created_at": "2022-01-01T01:43:08.566Z",
	// "updated_at": "2022-01-01T01:43:08.566Z",
	// "escalated_at": "2022-01-01T01:43:54.464Z"
	// }
	Create(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*AlertInfo, error)
	// desc: Updates a specific Alert. You can make changes in Alert settings, including the `title`, `description`, `responder`, `state`, and `urgency`. The `responder` of the Alert is a User who is assigned to respond to the Alert.
	// request_example: >-
	// {
	// "alert_id": "alert-123456789012",
	// "state": "ACKNOWLEDGED",
	// "urgency": "LOW",
	// "description": "[updating]This is a description of sample.",
	// "domain_id": "domain-123456789012"
	// }
	// response_example: >-
	// {
	// "alert_number": 104053,
	// "alert_id": "alert-123456789012",
	// "title": "sample test",
	// "state": "ACKNOWLEDGED",
	// "description": "[updating]This is a description of sample. ",
	// "urgency": "LOW",
	// "severity": "NONE",
	// "escalation_step": 1,
	// "additional_info": {},
	// "triggered_by": "user1@email.com",
	// "escalation_policy_id": "ep-123456789012",
	// "project_id": "project-123456789012",
	// "domain_id": "domain-123456789012",
	// "created_at": "2022-01-01T01:43:08.566Z",
	// "updated_at": "2022-01-01T01:43:08.566Z",
	// "acknowledged_at": "2022-01-01T01:48:52.799Z",
	// "escalated_at": "2022-01-01T01:43:54.464Z"
	// }
	Update(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*AlertInfo, error)
	// desc: Updates the state of an Alert via callback URL by creating a temporary `access_key` while generating a Notification about the Alert.
	// request_example: >-
	// {
	// "alert_id": "alert-123456789012",
	// "access_key": "1q2w3e4r5t6y7u8i9o0p",
	// "domain_id": "domain-123456789012"
	// }
	UpdateState(ctx context.Context, in *UpdateAlertStateRequest, opts ...grpc.CallOption) (*AlertInfo, error)
	Merge(ctx context.Context, in *MergeAlertRequest, opts ...grpc.CallOption) (*AlertInfo, error)
	Snooze(ctx context.Context, in *SnoozeAlertRequest, opts ...grpc.CallOption) (*AlertInfo, error)
	// desc: Adds a responder who receives a Notification about an Alert.
	// request_example: >-
	// {
	// "alert_id": "alert-123456789012",
	// "resource_type": "identity.User",
	// "resource_id": "user2@email.com",
	// "domain_id": "domain-123456789012"
	// }
	// response_example: >-
	// {
	// "alert_number": 104053,
	// "alert_id": "alert-123456789012",
	// "title": "sample test",
	// "state": "ACKNOWLEDGED",
	// "description": "[updating]This is a description of sample. ",
	// "urgency": "LOW",
	// "severity": "NONE",
	// "escalation_step": 1,
	// "responders": [
	// {
	// "resource_type": "identity.User",
	// "resource_id": "user2@email.com"
	// }
	// ],
	// "additional_info": {},
	// "triggered_by": "user1@email.com",
	// "escalation_policy_id": "ep-123456789012",
	// "project_id": "project-123456789012",
	// "domain_id": "domain-123456789012",
	// "created_at": "2022-01-01T01:43:08.566Z",
	// "updated_at": "2022-01-01T01:43:08.566Z",
	// "acknowledged_at": "2022-01-01T02:24:12.051Z",
	// "escalated_at": "2022-01-01T01:43:54.464Z"
	// }
	AddResponder(ctx context.Context, in *AlertResponderRequest, opts ...grpc.CallOption) (*AlertInfo, error)
	// desc: Deletes a responder who receives a Notification about an Alert.
	// request_example: >-
	// {
	// "alert_id": "alert-123456789012",
	// "resource_type": "identity.User",
	// "resource_id": "user2@email.com",
	// "domain_id": "domain-123456789012"
	// }
	// response_example: >-
	// {
	// "alert_number": 104053,
	// "alert_id": "alert-123456789012",
	// "title": "sample test",
	// "state": "ACKNOWLEDGED",
	// "description": "[updating]This is a description of sample. ",
	// "urgency": "LOW",
	// "severity": "NONE",
	// "escalation_step": 1,
	// "additional_info": {},
	// "triggered_by": "user1@email.com",
	// "escalation_policy_id": "ep-123456789012",
	// "project_id": "project-123456789012",
	// "domain_id": "domain-123456789012",
	// "created_at": "2022-01-01T01:43:08.566Z",
	// "updated_at": "2022-01-01T01:43:08.566Z",
	// "acknowledged_at": "2022-01-01T01:48:52.799Z",
	// "escalated_at": "2022-01-01T01:43:54.464Z"
	// }
	RemoveResponder(ctx context.Context, in *AlertResponderRequest, opts ...grpc.CallOption) (*AlertInfo, error)
	AddProjectDependency(ctx context.Context, in *AlertProjectDependencyRequest, opts ...grpc.CallOption) (*AlertInfo, error)
	RemoveProjectDependency(ctx context.Context, in *AlertProjectDependencyRequest, opts ...grpc.CallOption) (*AlertInfo, error)
	// desc: Deletes a specific Alert and remove it from the list of Alerts. You must specify the `alert_id` of the Alert to delete.
	// request_example: >-
	// {
	// "alert_id": "alert-123456789012",
	// "domain_id": "domain-123456789012"
	// }
	Delete(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// desc: Gets a specific Alert. Prints detailed information about the Alert.
	// request_example: >-
	// {
	// "alert_id": "alert-123456789012",
	// "domain_id": "domain-123456789012"
	// }
	// response_example: >-
	// {
	// "alert_number": 104053,
	// "alert_id": "alert-123456789012",
	// "title": "sample test",
	// "state": "ACKNOWLEDGED",
	// "description": "[updating]This is a description of sample. ",
	// "urgency": "LOW",
	// "severity": "NONE",
	// "escalation_step": 1,
	// "additional_info": {},
	// "triggered_by": "user1@email.com",
	// "escalation_policy_id": "ep-123456789012",
	// "project_id": "project-123456789012",
	// "domain_id": "domain-123456789012",
	// "created_at": "2022-01-01T01:43:08.566Z",
	// "updated_at": "2022-01-01T01:43:08.566Z",
	// "acknowledged_at": "2022-01-01T01:48:52.799Z",
	// "escalated_at": "2022-01-01T01:43:54.464Z"
	// }
	Get(ctx context.Context, in *GetAlertRequest, opts ...grpc.CallOption) (*AlertInfo, error)
	// desc: Gets a list of all Alerts. You can use a query to get a filtered list of Alerts.
	// request_example: >-
	// {
	// "query": {},
	// "domain_id": "domain-123456789012"
	// }
	// response_example: >-
	// {
	// "results": [
	// {
	// "alert_number": 104057,
	// "alert_id": "alert-987654321098",
	// "title": "Notification of access to the bastion Host",
	// "state": "TRIGGERED",
	// "description": "SSH Access to stargate-dev from adm",
	// "urgency": "LOW",
	// "severity": "INFO",
	// "resource": {
	// "resource_id": "server-123456789012",
	// "resource_type": "inventory.Server",
	// "name": "stargate-dev"
	// },
	// "escalation_step": 1,
	// "escalation_ttl": 1,
	// "additional_info": {
	// "host": "[]",
	// "user": "user1"
	// },
	// "triggered_by": "webhook-123456789012",
	// "webhook_id": "webhook-123456789012",
	// "escalation_policy_id": "ep-123456789012",
	// "project_id": "project-123456789012",
	// "domain_id": "domain-123456789012",
	// "created_at": "2022-01-01T02:46:35.934Z",
	// "updated_at": "2022-01-01T02:46:35.934Z",
	// "escalated_at": "2022-01-01T02:46:35.979Z"
	// },
	// {
	// "alert_number": 104056,
	// "alert_id": "alert-123456789999",
	// "title": "Notification of access to the bastion Host",
	// "state": "TRIGGERED",
	// "description": "SSH Access to stargate-dev from user3@email.com",
	// "urgency": "LOW",
	// "severity": "INFO",
	// "resource": {
	// "resource_id": "server-123456789012",
	// "resource_type": "inventory.Server",
	// "name": "stargate-dev"
	// },
	// "escalation_step": 1,
	// "escalation_ttl": 1,
	// "additional_info": {
	// "user": "user3@email.com",
	// "host": "['111.111.111.11']"
	// },
	// "triggered_by": "webhook-123456789012",
	// "webhook_id": "webhook-123456789012",
	// "escalation_policy_id": "ep-123456789012",
	// "project_id": "project-123456789012",
	// "domain_id": "domain-123456789012",
	// "created_at": "2022-01-01T02:46:31.391Z",
	// "updated_at": "2022-01-01T02:46:31.391Z",
	// "escalated_at": "2022-01-01T02:46:31.553Z"
	// }
	// ],
	// "total_count": 21283
	// }
	List(ctx context.Context, in *AlertQuery, opts ...grpc.CallOption) (*AlertsInfo, error)
	Stat(ctx context.Context, in *AlertStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type alertClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertClient(cc grpc.ClientConnInterface) AlertClient {
	return &alertClient{cc}
}

func (c *alertClient) Create(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*AlertInfo, error) {
	out := new(AlertInfo)
	err := c.cc.Invoke(ctx, Alert_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertClient) Update(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*AlertInfo, error) {
	out := new(AlertInfo)
	err := c.cc.Invoke(ctx, Alert_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertClient) UpdateState(ctx context.Context, in *UpdateAlertStateRequest, opts ...grpc.CallOption) (*AlertInfo, error) {
	out := new(AlertInfo)
	err := c.cc.Invoke(ctx, Alert_UpdateState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertClient) Merge(ctx context.Context, in *MergeAlertRequest, opts ...grpc.CallOption) (*AlertInfo, error) {
	out := new(AlertInfo)
	err := c.cc.Invoke(ctx, Alert_Merge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertClient) Snooze(ctx context.Context, in *SnoozeAlertRequest, opts ...grpc.CallOption) (*AlertInfo, error) {
	out := new(AlertInfo)
	err := c.cc.Invoke(ctx, Alert_Snooze_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertClient) AddResponder(ctx context.Context, in *AlertResponderRequest, opts ...grpc.CallOption) (*AlertInfo, error) {
	out := new(AlertInfo)
	err := c.cc.Invoke(ctx, Alert_AddResponder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertClient) RemoveResponder(ctx context.Context, in *AlertResponderRequest, opts ...grpc.CallOption) (*AlertInfo, error) {
	out := new(AlertInfo)
	err := c.cc.Invoke(ctx, Alert_RemoveResponder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertClient) AddProjectDependency(ctx context.Context, in *AlertProjectDependencyRequest, opts ...grpc.CallOption) (*AlertInfo, error) {
	out := new(AlertInfo)
	err := c.cc.Invoke(ctx, Alert_AddProjectDependency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertClient) RemoveProjectDependency(ctx context.Context, in *AlertProjectDependencyRequest, opts ...grpc.CallOption) (*AlertInfo, error) {
	out := new(AlertInfo)
	err := c.cc.Invoke(ctx, Alert_RemoveProjectDependency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertClient) Delete(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Alert_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertClient) Get(ctx context.Context, in *GetAlertRequest, opts ...grpc.CallOption) (*AlertInfo, error) {
	out := new(AlertInfo)
	err := c.cc.Invoke(ctx, Alert_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertClient) List(ctx context.Context, in *AlertQuery, opts ...grpc.CallOption) (*AlertsInfo, error) {
	out := new(AlertsInfo)
	err := c.cc.Invoke(ctx, Alert_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertClient) Stat(ctx context.Context, in *AlertStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Alert_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertServer is the server API for Alert service.
// All implementations must embed UnimplementedAlertServer
// for forward compatibility
type AlertServer interface {
	// desc: Creates a new Alert. Alerts generated with `create` method are made in a manual way. Manually made Alerts can be used for Notifications.
	// request_example: >-
	// {
	// "title": "sample test",
	// "description": "This is a description of sample.",
	// "urgency": "HIGH",
	// "project_id": "project-123456789012",
	// "domain_id": "domain-123456789012"
	// }
	// response_example: >-
	// {
	// "alert_number": 104053,
	// "alert_id": "alert-123456789012",
	// "title": "sample test",
	// "state": "TRIGGERED",
	// "description": "This is a description of sample.",
	// "urgency": "HIGH",
	// "severity": "NONE",
	// "escalation_step": 1,
	// "additional_info": {},
	// "triggered_by": "user1@email.com",
	// "escalation_policy_id": "ep-123456789012",
	// "project_id": "project-123456789012",
	// "domain_id": "domain-123456789012",
	// "created_at": "2022-01-01T01:43:08.566Z",
	// "updated_at": "2022-01-01T01:43:08.566Z",
	// "escalated_at": "2022-01-01T01:43:54.464Z"
	// }
	Create(context.Context, *CreateAlertRequest) (*AlertInfo, error)
	// desc: Updates a specific Alert. You can make changes in Alert settings, including the `title`, `description`, `responder`, `state`, and `urgency`. The `responder` of the Alert is a User who is assigned to respond to the Alert.
	// request_example: >-
	// {
	// "alert_id": "alert-123456789012",
	// "state": "ACKNOWLEDGED",
	// "urgency": "LOW",
	// "description": "[updating]This is a description of sample.",
	// "domain_id": "domain-123456789012"
	// }
	// response_example: >-
	// {
	// "alert_number": 104053,
	// "alert_id": "alert-123456789012",
	// "title": "sample test",
	// "state": "ACKNOWLEDGED",
	// "description": "[updating]This is a description of sample. ",
	// "urgency": "LOW",
	// "severity": "NONE",
	// "escalation_step": 1,
	// "additional_info": {},
	// "triggered_by": "user1@email.com",
	// "escalation_policy_id": "ep-123456789012",
	// "project_id": "project-123456789012",
	// "domain_id": "domain-123456789012",
	// "created_at": "2022-01-01T01:43:08.566Z",
	// "updated_at": "2022-01-01T01:43:08.566Z",
	// "acknowledged_at": "2022-01-01T01:48:52.799Z",
	// "escalated_at": "2022-01-01T01:43:54.464Z"
	// }
	Update(context.Context, *UpdateAlertRequest) (*AlertInfo, error)
	// desc: Updates the state of an Alert via callback URL by creating a temporary `access_key` while generating a Notification about the Alert.
	// request_example: >-
	// {
	// "alert_id": "alert-123456789012",
	// "access_key": "1q2w3e4r5t6y7u8i9o0p",
	// "domain_id": "domain-123456789012"
	// }
	UpdateState(context.Context, *UpdateAlertStateRequest) (*AlertInfo, error)
	Merge(context.Context, *MergeAlertRequest) (*AlertInfo, error)
	Snooze(context.Context, *SnoozeAlertRequest) (*AlertInfo, error)
	// desc: Adds a responder who receives a Notification about an Alert.
	// request_example: >-
	// {
	// "alert_id": "alert-123456789012",
	// "resource_type": "identity.User",
	// "resource_id": "user2@email.com",
	// "domain_id": "domain-123456789012"
	// }
	// response_example: >-
	// {
	// "alert_number": 104053,
	// "alert_id": "alert-123456789012",
	// "title": "sample test",
	// "state": "ACKNOWLEDGED",
	// "description": "[updating]This is a description of sample. ",
	// "urgency": "LOW",
	// "severity": "NONE",
	// "escalation_step": 1,
	// "responders": [
	// {
	// "resource_type": "identity.User",
	// "resource_id": "user2@email.com"
	// }
	// ],
	// "additional_info": {},
	// "triggered_by": "user1@email.com",
	// "escalation_policy_id": "ep-123456789012",
	// "project_id": "project-123456789012",
	// "domain_id": "domain-123456789012",
	// "created_at": "2022-01-01T01:43:08.566Z",
	// "updated_at": "2022-01-01T01:43:08.566Z",
	// "acknowledged_at": "2022-01-01T02:24:12.051Z",
	// "escalated_at": "2022-01-01T01:43:54.464Z"
	// }
	AddResponder(context.Context, *AlertResponderRequest) (*AlertInfo, error)
	// desc: Deletes a responder who receives a Notification about an Alert.
	// request_example: >-
	// {
	// "alert_id": "alert-123456789012",
	// "resource_type": "identity.User",
	// "resource_id": "user2@email.com",
	// "domain_id": "domain-123456789012"
	// }
	// response_example: >-
	// {
	// "alert_number": 104053,
	// "alert_id": "alert-123456789012",
	// "title": "sample test",
	// "state": "ACKNOWLEDGED",
	// "description": "[updating]This is a description of sample. ",
	// "urgency": "LOW",
	// "severity": "NONE",
	// "escalation_step": 1,
	// "additional_info": {},
	// "triggered_by": "user1@email.com",
	// "escalation_policy_id": "ep-123456789012",
	// "project_id": "project-123456789012",
	// "domain_id": "domain-123456789012",
	// "created_at": "2022-01-01T01:43:08.566Z",
	// "updated_at": "2022-01-01T01:43:08.566Z",
	// "acknowledged_at": "2022-01-01T01:48:52.799Z",
	// "escalated_at": "2022-01-01T01:43:54.464Z"
	// }
	RemoveResponder(context.Context, *AlertResponderRequest) (*AlertInfo, error)
	AddProjectDependency(context.Context, *AlertProjectDependencyRequest) (*AlertInfo, error)
	RemoveProjectDependency(context.Context, *AlertProjectDependencyRequest) (*AlertInfo, error)
	// desc: Deletes a specific Alert and remove it from the list of Alerts. You must specify the `alert_id` of the Alert to delete.
	// request_example: >-
	// {
	// "alert_id": "alert-123456789012",
	// "domain_id": "domain-123456789012"
	// }
	Delete(context.Context, *AlertRequest) (*empty.Empty, error)
	// desc: Gets a specific Alert. Prints detailed information about the Alert.
	// request_example: >-
	// {
	// "alert_id": "alert-123456789012",
	// "domain_id": "domain-123456789012"
	// }
	// response_example: >-
	// {
	// "alert_number": 104053,
	// "alert_id": "alert-123456789012",
	// "title": "sample test",
	// "state": "ACKNOWLEDGED",
	// "description": "[updating]This is a description of sample. ",
	// "urgency": "LOW",
	// "severity": "NONE",
	// "escalation_step": 1,
	// "additional_info": {},
	// "triggered_by": "user1@email.com",
	// "escalation_policy_id": "ep-123456789012",
	// "project_id": "project-123456789012",
	// "domain_id": "domain-123456789012",
	// "created_at": "2022-01-01T01:43:08.566Z",
	// "updated_at": "2022-01-01T01:43:08.566Z",
	// "acknowledged_at": "2022-01-01T01:48:52.799Z",
	// "escalated_at": "2022-01-01T01:43:54.464Z"
	// }
	Get(context.Context, *GetAlertRequest) (*AlertInfo, error)
	// desc: Gets a list of all Alerts. You can use a query to get a filtered list of Alerts.
	// request_example: >-
	// {
	// "query": {},
	// "domain_id": "domain-123456789012"
	// }
	// response_example: >-
	// {
	// "results": [
	// {
	// "alert_number": 104057,
	// "alert_id": "alert-987654321098",
	// "title": "Notification of access to the bastion Host",
	// "state": "TRIGGERED",
	// "description": "SSH Access to stargate-dev from adm",
	// "urgency": "LOW",
	// "severity": "INFO",
	// "resource": {
	// "resource_id": "server-123456789012",
	// "resource_type": "inventory.Server",
	// "name": "stargate-dev"
	// },
	// "escalation_step": 1,
	// "escalation_ttl": 1,
	// "additional_info": {
	// "host": "[]",
	// "user": "user1"
	// },
	// "triggered_by": "webhook-123456789012",
	// "webhook_id": "webhook-123456789012",
	// "escalation_policy_id": "ep-123456789012",
	// "project_id": "project-123456789012",
	// "domain_id": "domain-123456789012",
	// "created_at": "2022-01-01T02:46:35.934Z",
	// "updated_at": "2022-01-01T02:46:35.934Z",
	// "escalated_at": "2022-01-01T02:46:35.979Z"
	// },
	// {
	// "alert_number": 104056,
	// "alert_id": "alert-123456789999",
	// "title": "Notification of access to the bastion Host",
	// "state": "TRIGGERED",
	// "description": "SSH Access to stargate-dev from user3@email.com",
	// "urgency": "LOW",
	// "severity": "INFO",
	// "resource": {
	// "resource_id": "server-123456789012",
	// "resource_type": "inventory.Server",
	// "name": "stargate-dev"
	// },
	// "escalation_step": 1,
	// "escalation_ttl": 1,
	// "additional_info": {
	// "user": "user3@email.com",
	// "host": "['111.111.111.11']"
	// },
	// "triggered_by": "webhook-123456789012",
	// "webhook_id": "webhook-123456789012",
	// "escalation_policy_id": "ep-123456789012",
	// "project_id": "project-123456789012",
	// "domain_id": "domain-123456789012",
	// "created_at": "2022-01-01T02:46:31.391Z",
	// "updated_at": "2022-01-01T02:46:31.391Z",
	// "escalated_at": "2022-01-01T02:46:31.553Z"
	// }
	// ],
	// "total_count": 21283
	// }
	List(context.Context, *AlertQuery) (*AlertsInfo, error)
	Stat(context.Context, *AlertStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedAlertServer()
}

// UnimplementedAlertServer must be embedded to have forward compatible implementations.
type UnimplementedAlertServer struct {
}

func (UnimplementedAlertServer) Create(context.Context, *CreateAlertRequest) (*AlertInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAlertServer) Update(context.Context, *UpdateAlertRequest) (*AlertInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAlertServer) UpdateState(context.Context, *UpdateAlertStateRequest) (*AlertInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateState not implemented")
}
func (UnimplementedAlertServer) Merge(context.Context, *MergeAlertRequest) (*AlertInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Merge not implemented")
}
func (UnimplementedAlertServer) Snooze(context.Context, *SnoozeAlertRequest) (*AlertInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Snooze not implemented")
}
func (UnimplementedAlertServer) AddResponder(context.Context, *AlertResponderRequest) (*AlertInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResponder not implemented")
}
func (UnimplementedAlertServer) RemoveResponder(context.Context, *AlertResponderRequest) (*AlertInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveResponder not implemented")
}
func (UnimplementedAlertServer) AddProjectDependency(context.Context, *AlertProjectDependencyRequest) (*AlertInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectDependency not implemented")
}
func (UnimplementedAlertServer) RemoveProjectDependency(context.Context, *AlertProjectDependencyRequest) (*AlertInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProjectDependency not implemented")
}
func (UnimplementedAlertServer) Delete(context.Context, *AlertRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAlertServer) Get(context.Context, *GetAlertRequest) (*AlertInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAlertServer) List(context.Context, *AlertQuery) (*AlertsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAlertServer) Stat(context.Context, *AlertStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedAlertServer) mustEmbedUnimplementedAlertServer() {}

// UnsafeAlertServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertServer will
// result in compilation errors.
type UnsafeAlertServer interface {
	mustEmbedUnimplementedAlertServer()
}

func RegisterAlertServer(s grpc.ServiceRegistrar, srv AlertServer) {
	s.RegisterService(&Alert_ServiceDesc, srv)
}

func _Alert_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alert_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServer).Create(ctx, req.(*CreateAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alert_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alert_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServer).Update(ctx, req.(*UpdateAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alert_UpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServer).UpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alert_UpdateState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServer).UpdateState(ctx, req.(*UpdateAlertStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alert_Merge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServer).Merge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alert_Merge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServer).Merge(ctx, req.(*MergeAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alert_Snooze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnoozeAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServer).Snooze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alert_Snooze_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServer).Snooze(ctx, req.(*SnoozeAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alert_AddResponder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertResponderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServer).AddResponder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alert_AddResponder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServer).AddResponder(ctx, req.(*AlertResponderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alert_RemoveResponder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertResponderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServer).RemoveResponder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alert_RemoveResponder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServer).RemoveResponder(ctx, req.(*AlertResponderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alert_AddProjectDependency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertProjectDependencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServer).AddProjectDependency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alert_AddProjectDependency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServer).AddProjectDependency(ctx, req.(*AlertProjectDependencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alert_RemoveProjectDependency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertProjectDependencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServer).RemoveProjectDependency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alert_RemoveProjectDependency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServer).RemoveProjectDependency(ctx, req.(*AlertProjectDependencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alert_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alert_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServer).Delete(ctx, req.(*AlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alert_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alert_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServer).Get(ctx, req.(*GetAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alert_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alert_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServer).List(ctx, req.(*AlertQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alert_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alert_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServer).Stat(ctx, req.(*AlertStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Alert_ServiceDesc is the grpc.ServiceDesc for Alert service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Alert_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.monitoring.v1.Alert",
	HandlerType: (*AlertServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Alert_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _Alert_Update_Handler,
		},
		{
			MethodName: "update_state",
			Handler:    _Alert_UpdateState_Handler,
		},
		{
			MethodName: "merge",
			Handler:    _Alert_Merge_Handler,
		},
		{
			MethodName: "snooze",
			Handler:    _Alert_Snooze_Handler,
		},
		{
			MethodName: "add_responder",
			Handler:    _Alert_AddResponder_Handler,
		},
		{
			MethodName: "remove_responder",
			Handler:    _Alert_RemoveResponder_Handler,
		},
		{
			MethodName: "add_project_dependency",
			Handler:    _Alert_AddProjectDependency_Handler,
		},
		{
			MethodName: "remove_project_dependency",
			Handler:    _Alert_RemoveProjectDependency_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Alert_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Alert_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Alert_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _Alert_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/monitoring/v1/alert.proto",
}
