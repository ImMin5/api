// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.6.1
// source: spaceone/api/repository/v1/dashboard_template.proto

package v1

import (
	v2 "github.com/cloudforet-io/api/dist/go/spaceone/api/core/v2"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DashboardTemplateType int32

const (
	DashboardTemplateType_NONE   DashboardTemplateType = 0
	DashboardTemplateType_MULTI  DashboardTemplateType = 1
	DashboardTemplateType_SINGLE DashboardTemplateType = 2
)

// Enum value maps for DashboardTemplateType.
var (
	DashboardTemplateType_name = map[int32]string{
		0: "NONE",
		1: "MULTI",
		2: "SINGLE",
	}
	DashboardTemplateType_value = map[string]int32{
		"NONE":   0,
		"MULTI":  1,
		"SINGLE": 2,
	}
)

func (x DashboardTemplateType) Enum() *DashboardTemplateType {
	p := new(DashboardTemplateType)
	*p = x
	return p
}

func (x DashboardTemplateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DashboardTemplateType) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_repository_v1_dashboard_template_proto_enumTypes[0].Descriptor()
}

func (DashboardTemplateType) Type() protoreflect.EnumType {
	return &file_spaceone_api_repository_v1_dashboard_template_proto_enumTypes[0]
}

func (x DashboardTemplateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DashboardTemplateType.Descriptor instead.
func (DashboardTemplateType) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_repository_v1_dashboard_template_proto_rawDescGZIP(), []int{0}
}

type DashboardTemplateQuery_State int32

const (
	DashboardTemplateQuery_NONE     DashboardTemplateQuery_State = 0
	DashboardTemplateQuery_ENABLED  DashboardTemplateQuery_State = 1
	DashboardTemplateQuery_DISABLED DashboardTemplateQuery_State = 2
)

// Enum value maps for DashboardTemplateQuery_State.
var (
	DashboardTemplateQuery_State_name = map[int32]string{
		0: "NONE",
		1: "ENABLED",
		2: "DISABLED",
	}
	DashboardTemplateQuery_State_value = map[string]int32{
		"NONE":     0,
		"ENABLED":  1,
		"DISABLED": 2,
	}
)

func (x DashboardTemplateQuery_State) Enum() *DashboardTemplateQuery_State {
	p := new(DashboardTemplateQuery_State)
	*p = x
	return p
}

func (x DashboardTemplateQuery_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DashboardTemplateQuery_State) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_repository_v1_dashboard_template_proto_enumTypes[1].Descriptor()
}

func (DashboardTemplateQuery_State) Type() protoreflect.EnumType {
	return &file_spaceone_api_repository_v1_dashboard_template_proto_enumTypes[1]
}

func (x DashboardTemplateQuery_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DashboardTemplateQuery_State.Descriptor instead.
func (DashboardTemplateQuery_State) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_repository_v1_dashboard_template_proto_rawDescGZIP(), []int{4, 0}
}

type DashboardTemplateInfo_State int32

const (
	DashboardTemplateInfo_NONE     DashboardTemplateInfo_State = 0
	DashboardTemplateInfo_ENABLED  DashboardTemplateInfo_State = 1
	DashboardTemplateInfo_DISABLED DashboardTemplateInfo_State = 2
)

// Enum value maps for DashboardTemplateInfo_State.
var (
	DashboardTemplateInfo_State_name = map[int32]string{
		0: "NONE",
		1: "ENABLED",
		2: "DISABLED",
	}
	DashboardTemplateInfo_State_value = map[string]int32{
		"NONE":     0,
		"ENABLED":  1,
		"DISABLED": 2,
	}
)

func (x DashboardTemplateInfo_State) Enum() *DashboardTemplateInfo_State {
	p := new(DashboardTemplateInfo_State)
	*p = x
	return p
}

func (x DashboardTemplateInfo_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DashboardTemplateInfo_State) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_repository_v1_dashboard_template_proto_enumTypes[2].Descriptor()
}

func (DashboardTemplateInfo_State) Type() protoreflect.EnumType {
	return &file_spaceone_api_repository_v1_dashboard_template_proto_enumTypes[2]
}

func (x DashboardTemplateInfo_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DashboardTemplateInfo_State.Descriptor instead.
func (DashboardTemplateInfo_State) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_repository_v1_dashboard_template_proto_rawDescGZIP(), []int{5, 0}
}

type RegisterDashboardTemplateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// +optional
	TemplateId string `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	TemplateType DashboardTemplateType `protobuf:"varint,3,opt,name=template_type,json=templateType,proto3,enum=spaceone.api.repository.v1.DashboardTemplateType" json:"template_type,omitempty"`
	// +optional
	Dashboards *_struct.ListValue `protobuf:"bytes,4,opt,name=dashboards,proto3" json:"dashboards,omitempty"`
	// +optional
	Labels *_struct.ListValue `protobuf:"bytes,5,opt,name=labels,proto3" json:"labels,omitempty"`
	// +optional
	Tags          *_struct.Struct `protobuf:"bytes,6,opt,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterDashboardTemplateRequest) Reset() {
	*x = RegisterDashboardTemplateRequest{}
	mi := &file_spaceone_api_repository_v1_dashboard_template_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterDashboardTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDashboardTemplateRequest) ProtoMessage() {}

func (x *RegisterDashboardTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_repository_v1_dashboard_template_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDashboardTemplateRequest.ProtoReflect.Descriptor instead.
func (*RegisterDashboardTemplateRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_repository_v1_dashboard_template_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterDashboardTemplateRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *RegisterDashboardTemplateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterDashboardTemplateRequest) GetTemplateType() DashboardTemplateType {
	if x != nil {
		return x.TemplateType
	}
	return DashboardTemplateType_NONE
}

func (x *RegisterDashboardTemplateRequest) GetDashboards() *_struct.ListValue {
	if x != nil {
		return x.Dashboards
	}
	return nil
}

func (x *RegisterDashboardTemplateRequest) GetLabels() *_struct.ListValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RegisterDashboardTemplateRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

type UpdateDashboardTemplateRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	TemplateId string                 `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	TemplateType DashboardTemplateType `protobuf:"varint,3,opt,name=template_type,json=templateType,proto3,enum=spaceone.api.repository.v1.DashboardTemplateType" json:"template_type,omitempty"`
	// +optional
	Dashboards *_struct.ListValue `protobuf:"bytes,4,opt,name=dashboards,proto3" json:"dashboards,omitempty"`
	// +optional
	Labels *_struct.ListValue `protobuf:"bytes,5,opt,name=labels,proto3" json:"labels,omitempty"`
	// +optional
	Tags          *_struct.Struct `protobuf:"bytes,6,opt,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDashboardTemplateRequest) Reset() {
	*x = UpdateDashboardTemplateRequest{}
	mi := &file_spaceone_api_repository_v1_dashboard_template_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDashboardTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDashboardTemplateRequest) ProtoMessage() {}

func (x *UpdateDashboardTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_repository_v1_dashboard_template_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDashboardTemplateRequest.ProtoReflect.Descriptor instead.
func (*UpdateDashboardTemplateRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_repository_v1_dashboard_template_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateDashboardTemplateRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *UpdateDashboardTemplateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDashboardTemplateRequest) GetTemplateType() DashboardTemplateType {
	if x != nil {
		return x.TemplateType
	}
	return DashboardTemplateType_NONE
}

func (x *UpdateDashboardTemplateRequest) GetDashboards() *_struct.ListValue {
	if x != nil {
		return x.Dashboards
	}
	return nil
}

func (x *UpdateDashboardTemplateRequest) GetLabels() *_struct.ListValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateDashboardTemplateRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

type DashboardTemplateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TemplateId    string                 `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DashboardTemplateRequest) Reset() {
	*x = DashboardTemplateRequest{}
	mi := &file_spaceone_api_repository_v1_dashboard_template_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DashboardTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardTemplateRequest) ProtoMessage() {}

func (x *DashboardTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_repository_v1_dashboard_template_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardTemplateRequest.ProtoReflect.Descriptor instead.
func (*DashboardTemplateRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_repository_v1_dashboard_template_proto_rawDescGZIP(), []int{2}
}

func (x *DashboardTemplateRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

type RepositoryDashboardTemplateRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	TemplateId string                 `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	// +optional
	RepositoryId  string `protobuf:"bytes,21,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepositoryDashboardTemplateRequest) Reset() {
	*x = RepositoryDashboardTemplateRequest{}
	mi := &file_spaceone_api_repository_v1_dashboard_template_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepositoryDashboardTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryDashboardTemplateRequest) ProtoMessage() {}

func (x *RepositoryDashboardTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_repository_v1_dashboard_template_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryDashboardTemplateRequest.ProtoReflect.Descriptor instead.
func (*RepositoryDashboardTemplateRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_repository_v1_dashboard_template_proto_rawDescGZIP(), []int{3}
}

func (x *RepositoryDashboardTemplateRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *RepositoryDashboardTemplateRequest) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

type DashboardTemplateQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// +optional
	Query *v2.Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// +optional
	TemplateId string `protobuf:"bytes,2,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	State DashboardTemplateQuery_State `protobuf:"varint,4,opt,name=state,proto3,enum=spaceone.api.repository.v1.DashboardTemplateQuery_State" json:"state,omitempty"`
	// +optional
	TemplateType DashboardTemplateType `protobuf:"varint,5,opt,name=template_type,json=templateType,proto3,enum=spaceone.api.repository.v1.DashboardTemplateType" json:"template_type,omitempty"`
	// +optional
	RepositoryId  string `protobuf:"bytes,21,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DashboardTemplateQuery) Reset() {
	*x = DashboardTemplateQuery{}
	mi := &file_spaceone_api_repository_v1_dashboard_template_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DashboardTemplateQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardTemplateQuery) ProtoMessage() {}

func (x *DashboardTemplateQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_repository_v1_dashboard_template_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardTemplateQuery.ProtoReflect.Descriptor instead.
func (*DashboardTemplateQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_repository_v1_dashboard_template_proto_rawDescGZIP(), []int{4}
}

func (x *DashboardTemplateQuery) GetQuery() *v2.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *DashboardTemplateQuery) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *DashboardTemplateQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DashboardTemplateQuery) GetState() DashboardTemplateQuery_State {
	if x != nil {
		return x.State
	}
	return DashboardTemplateQuery_NONE
}

func (x *DashboardTemplateQuery) GetTemplateType() DashboardTemplateType {
	if x != nil {
		return x.TemplateType
	}
	return DashboardTemplateType_NONE
}

func (x *DashboardTemplateQuery) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

type DashboardTemplateInfo struct {
	state          protoimpl.MessageState      `protogen:"open.v1"`
	TemplateId     string                      `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	Name           string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	State          DashboardTemplateInfo_State `protobuf:"varint,3,opt,name=state,proto3,enum=spaceone.api.repository.v1.DashboardTemplateInfo_State" json:"state,omitempty"`
	TemplateType   DashboardTemplateType       `protobuf:"varint,4,opt,name=template_type,json=templateType,proto3,enum=spaceone.api.repository.v1.DashboardTemplateType" json:"template_type,omitempty"`
	Dashboards     *_struct.ListValue          `protobuf:"bytes,5,opt,name=dashboards,proto3" json:"dashboards,omitempty"`
	Labels         *_struct.ListValue          `protobuf:"bytes,6,opt,name=labels,proto3" json:"labels,omitempty"`
	Tags           *_struct.Struct             `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
	DomainId       string                      `protobuf:"bytes,21,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	RepositoryInfo *RepositoryInfo             `protobuf:"bytes,22,opt,name=repository_info,json=repositoryInfo,proto3" json:"repository_info,omitempty"`
	CreatedAt      string                      `protobuf:"bytes,31,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      string                      `protobuf:"bytes,32,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DashboardTemplateInfo) Reset() {
	*x = DashboardTemplateInfo{}
	mi := &file_spaceone_api_repository_v1_dashboard_template_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DashboardTemplateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardTemplateInfo) ProtoMessage() {}

func (x *DashboardTemplateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_repository_v1_dashboard_template_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardTemplateInfo.ProtoReflect.Descriptor instead.
func (*DashboardTemplateInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_repository_v1_dashboard_template_proto_rawDescGZIP(), []int{5}
}

func (x *DashboardTemplateInfo) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *DashboardTemplateInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DashboardTemplateInfo) GetState() DashboardTemplateInfo_State {
	if x != nil {
		return x.State
	}
	return DashboardTemplateInfo_NONE
}

func (x *DashboardTemplateInfo) GetTemplateType() DashboardTemplateType {
	if x != nil {
		return x.TemplateType
	}
	return DashboardTemplateType_NONE
}

func (x *DashboardTemplateInfo) GetDashboards() *_struct.ListValue {
	if x != nil {
		return x.Dashboards
	}
	return nil
}

func (x *DashboardTemplateInfo) GetLabels() *_struct.ListValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DashboardTemplateInfo) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DashboardTemplateInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *DashboardTemplateInfo) GetRepositoryInfo() *RepositoryInfo {
	if x != nil {
		return x.RepositoryInfo
	}
	return nil
}

func (x *DashboardTemplateInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *DashboardTemplateInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type DashboardTemplatesInfo struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Results       []*DashboardTemplateInfo `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TotalCount    int32                    `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DashboardTemplatesInfo) Reset() {
	*x = DashboardTemplatesInfo{}
	mi := &file_spaceone_api_repository_v1_dashboard_template_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DashboardTemplatesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashboardTemplatesInfo) ProtoMessage() {}

func (x *DashboardTemplatesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_repository_v1_dashboard_template_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashboardTemplatesInfo.ProtoReflect.Descriptor instead.
func (*DashboardTemplatesInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_repository_v1_dashboard_template_proto_rawDescGZIP(), []int{6}
}

func (x *DashboardTemplatesInfo) GetResults() []*DashboardTemplateInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *DashboardTemplatesInfo) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

var File_spaceone_api_repository_v1_dashboard_template_proto protoreflect.FileDescriptor

var file_spaceone_api_repository_v1_dashboard_template_proto_rawDesc = string([]byte{
	0x0a, 0x33, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32,
	0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcc, 0x02, 0x0a, 0x20, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xca, 0x02, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x56, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x3b, 0x0a, 0x18, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x22, 0x6a, 0x0a, 0x22, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0xfb,
	0x02, 0x0a, 0x16, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x4e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x38, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x56, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x2c,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x22, 0xee, 0x04, 0x0a,
	0x15, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x32,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0f,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x2c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x22, 0x86, 0x01,
	0x0a, 0x16, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x38, 0x0a, 0x15, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x02,
	0x32, 0xb2, 0x09, 0x0a, 0x11, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x3c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22,
	0x2a, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0xac, 0x01, 0x0a, 0x06,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a,
	0x22, 0x28, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x0a, 0x64,
	0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a,
	0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x12, 0xa6, 0x01, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22,
	0x28, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x07, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x34,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x3e, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x65,
	0x74, 0x12, 0xa1, 0x01, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x32,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x72, 0x65, 0x74, 0x2d, 0x69,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_spaceone_api_repository_v1_dashboard_template_proto_rawDescOnce sync.Once
	file_spaceone_api_repository_v1_dashboard_template_proto_rawDescData []byte
)

func file_spaceone_api_repository_v1_dashboard_template_proto_rawDescGZIP() []byte {
	file_spaceone_api_repository_v1_dashboard_template_proto_rawDescOnce.Do(func() {
		file_spaceone_api_repository_v1_dashboard_template_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spaceone_api_repository_v1_dashboard_template_proto_rawDesc), len(file_spaceone_api_repository_v1_dashboard_template_proto_rawDesc)))
	})
	return file_spaceone_api_repository_v1_dashboard_template_proto_rawDescData
}

var file_spaceone_api_repository_v1_dashboard_template_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_spaceone_api_repository_v1_dashboard_template_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_spaceone_api_repository_v1_dashboard_template_proto_goTypes = []any{
	(DashboardTemplateType)(0),                 // 0: spaceone.api.repository.v1.DashboardTemplateType
	(DashboardTemplateQuery_State)(0),          // 1: spaceone.api.repository.v1.DashboardTemplateQuery.State
	(DashboardTemplateInfo_State)(0),           // 2: spaceone.api.repository.v1.DashboardTemplateInfo.State
	(*RegisterDashboardTemplateRequest)(nil),   // 3: spaceone.api.repository.v1.RegisterDashboardTemplateRequest
	(*UpdateDashboardTemplateRequest)(nil),     // 4: spaceone.api.repository.v1.UpdateDashboardTemplateRequest
	(*DashboardTemplateRequest)(nil),           // 5: spaceone.api.repository.v1.DashboardTemplateRequest
	(*RepositoryDashboardTemplateRequest)(nil), // 6: spaceone.api.repository.v1.RepositoryDashboardTemplateRequest
	(*DashboardTemplateQuery)(nil),             // 7: spaceone.api.repository.v1.DashboardTemplateQuery
	(*DashboardTemplateInfo)(nil),              // 8: spaceone.api.repository.v1.DashboardTemplateInfo
	(*DashboardTemplatesInfo)(nil),             // 9: spaceone.api.repository.v1.DashboardTemplatesInfo
	(*_struct.ListValue)(nil),                  // 10: google.protobuf.ListValue
	(*_struct.Struct)(nil),                     // 11: google.protobuf.Struct
	(*v2.Query)(nil),                           // 12: spaceone.api.core.v2.Query
	(*RepositoryInfo)(nil),                     // 13: spaceone.api.repository.v1.RepositoryInfo
	(*empty.Empty)(nil),                        // 14: google.protobuf.Empty
}
var file_spaceone_api_repository_v1_dashboard_template_proto_depIdxs = []int32{
	0,  // 0: spaceone.api.repository.v1.RegisterDashboardTemplateRequest.template_type:type_name -> spaceone.api.repository.v1.DashboardTemplateType
	10, // 1: spaceone.api.repository.v1.RegisterDashboardTemplateRequest.dashboards:type_name -> google.protobuf.ListValue
	10, // 2: spaceone.api.repository.v1.RegisterDashboardTemplateRequest.labels:type_name -> google.protobuf.ListValue
	11, // 3: spaceone.api.repository.v1.RegisterDashboardTemplateRequest.tags:type_name -> google.protobuf.Struct
	0,  // 4: spaceone.api.repository.v1.UpdateDashboardTemplateRequest.template_type:type_name -> spaceone.api.repository.v1.DashboardTemplateType
	10, // 5: spaceone.api.repository.v1.UpdateDashboardTemplateRequest.dashboards:type_name -> google.protobuf.ListValue
	10, // 6: spaceone.api.repository.v1.UpdateDashboardTemplateRequest.labels:type_name -> google.protobuf.ListValue
	11, // 7: spaceone.api.repository.v1.UpdateDashboardTemplateRequest.tags:type_name -> google.protobuf.Struct
	12, // 8: spaceone.api.repository.v1.DashboardTemplateQuery.query:type_name -> spaceone.api.core.v2.Query
	1,  // 9: spaceone.api.repository.v1.DashboardTemplateQuery.state:type_name -> spaceone.api.repository.v1.DashboardTemplateQuery.State
	0,  // 10: spaceone.api.repository.v1.DashboardTemplateQuery.template_type:type_name -> spaceone.api.repository.v1.DashboardTemplateType
	2,  // 11: spaceone.api.repository.v1.DashboardTemplateInfo.state:type_name -> spaceone.api.repository.v1.DashboardTemplateInfo.State
	0,  // 12: spaceone.api.repository.v1.DashboardTemplateInfo.template_type:type_name -> spaceone.api.repository.v1.DashboardTemplateType
	10, // 13: spaceone.api.repository.v1.DashboardTemplateInfo.dashboards:type_name -> google.protobuf.ListValue
	10, // 14: spaceone.api.repository.v1.DashboardTemplateInfo.labels:type_name -> google.protobuf.ListValue
	11, // 15: spaceone.api.repository.v1.DashboardTemplateInfo.tags:type_name -> google.protobuf.Struct
	13, // 16: spaceone.api.repository.v1.DashboardTemplateInfo.repository_info:type_name -> spaceone.api.repository.v1.RepositoryInfo
	8,  // 17: spaceone.api.repository.v1.DashboardTemplatesInfo.results:type_name -> spaceone.api.repository.v1.DashboardTemplateInfo
	3,  // 18: spaceone.api.repository.v1.DashboardTemplate.register:input_type -> spaceone.api.repository.v1.RegisterDashboardTemplateRequest
	4,  // 19: spaceone.api.repository.v1.DashboardTemplate.update:input_type -> spaceone.api.repository.v1.UpdateDashboardTemplateRequest
	5,  // 20: spaceone.api.repository.v1.DashboardTemplate.deregister:input_type -> spaceone.api.repository.v1.DashboardTemplateRequest
	5,  // 21: spaceone.api.repository.v1.DashboardTemplate.enable:input_type -> spaceone.api.repository.v1.DashboardTemplateRequest
	5,  // 22: spaceone.api.repository.v1.DashboardTemplate.disable:input_type -> spaceone.api.repository.v1.DashboardTemplateRequest
	6,  // 23: spaceone.api.repository.v1.DashboardTemplate.get:input_type -> spaceone.api.repository.v1.RepositoryDashboardTemplateRequest
	7,  // 24: spaceone.api.repository.v1.DashboardTemplate.list:input_type -> spaceone.api.repository.v1.DashboardTemplateQuery
	8,  // 25: spaceone.api.repository.v1.DashboardTemplate.register:output_type -> spaceone.api.repository.v1.DashboardTemplateInfo
	8,  // 26: spaceone.api.repository.v1.DashboardTemplate.update:output_type -> spaceone.api.repository.v1.DashboardTemplateInfo
	14, // 27: spaceone.api.repository.v1.DashboardTemplate.deregister:output_type -> google.protobuf.Empty
	8,  // 28: spaceone.api.repository.v1.DashboardTemplate.enable:output_type -> spaceone.api.repository.v1.DashboardTemplateInfo
	8,  // 29: spaceone.api.repository.v1.DashboardTemplate.disable:output_type -> spaceone.api.repository.v1.DashboardTemplateInfo
	8,  // 30: spaceone.api.repository.v1.DashboardTemplate.get:output_type -> spaceone.api.repository.v1.DashboardTemplateInfo
	9,  // 31: spaceone.api.repository.v1.DashboardTemplate.list:output_type -> spaceone.api.repository.v1.DashboardTemplatesInfo
	25, // [25:32] is the sub-list for method output_type
	18, // [18:25] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_spaceone_api_repository_v1_dashboard_template_proto_init() }
func file_spaceone_api_repository_v1_dashboard_template_proto_init() {
	if File_spaceone_api_repository_v1_dashboard_template_proto != nil {
		return
	}
	file_spaceone_api_repository_v1_repository_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spaceone_api_repository_v1_dashboard_template_proto_rawDesc), len(file_spaceone_api_repository_v1_dashboard_template_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spaceone_api_repository_v1_dashboard_template_proto_goTypes,
		DependencyIndexes: file_spaceone_api_repository_v1_dashboard_template_proto_depIdxs,
		EnumInfos:         file_spaceone_api_repository_v1_dashboard_template_proto_enumTypes,
		MessageInfos:      file_spaceone_api_repository_v1_dashboard_template_proto_msgTypes,
	}.Build()
	File_spaceone_api_repository_v1_dashboard_template_proto = out.File
	file_spaceone_api_repository_v1_dashboard_template_proto_goTypes = nil
	file_spaceone_api_repository_v1_dashboard_template_proto_depIdxs = nil
}
