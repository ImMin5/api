// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/repository/v1/dashboard_template.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DashboardTemplate_Register_FullMethodName   = "/spaceone.api.repository.v1.DashboardTemplate/register"
	DashboardTemplate_Update_FullMethodName     = "/spaceone.api.repository.v1.DashboardTemplate/update"
	DashboardTemplate_Deregister_FullMethodName = "/spaceone.api.repository.v1.DashboardTemplate/deregister"
	DashboardTemplate_Enable_FullMethodName     = "/spaceone.api.repository.v1.DashboardTemplate/enable"
	DashboardTemplate_Disable_FullMethodName    = "/spaceone.api.repository.v1.DashboardTemplate/disable"
	DashboardTemplate_Get_FullMethodName        = "/spaceone.api.repository.v1.DashboardTemplate/get"
	DashboardTemplate_List_FullMethodName       = "/spaceone.api.repository.v1.DashboardTemplate/list"
)

// DashboardTemplateClient is the client API for DashboardTemplate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardTemplateClient interface {
	Register(ctx context.Context, in *RegisterDashboardTemplateRequest, opts ...grpc.CallOption) (*DashboardTemplateInfo, error)
	Update(ctx context.Context, in *UpdateDashboardTemplateRequest, opts ...grpc.CallOption) (*DashboardTemplateInfo, error)
	Deregister(ctx context.Context, in *DashboardTemplateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Enable(ctx context.Context, in *DashboardTemplateRequest, opts ...grpc.CallOption) (*DashboardTemplateInfo, error)
	Disable(ctx context.Context, in *DashboardTemplateRequest, opts ...grpc.CallOption) (*DashboardTemplateInfo, error)
	Get(ctx context.Context, in *RepositoryDashboardTemplateRequest, opts ...grpc.CallOption) (*DashboardTemplateInfo, error)
	List(ctx context.Context, in *DashboardTemplateQuery, opts ...grpc.CallOption) (*DashboardTemplatesInfo, error)
}

type dashboardTemplateClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardTemplateClient(cc grpc.ClientConnInterface) DashboardTemplateClient {
	return &dashboardTemplateClient{cc}
}

func (c *dashboardTemplateClient) Register(ctx context.Context, in *RegisterDashboardTemplateRequest, opts ...grpc.CallOption) (*DashboardTemplateInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DashboardTemplateInfo)
	err := c.cc.Invoke(ctx, DashboardTemplate_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardTemplateClient) Update(ctx context.Context, in *UpdateDashboardTemplateRequest, opts ...grpc.CallOption) (*DashboardTemplateInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DashboardTemplateInfo)
	err := c.cc.Invoke(ctx, DashboardTemplate_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardTemplateClient) Deregister(ctx context.Context, in *DashboardTemplateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, DashboardTemplate_Deregister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardTemplateClient) Enable(ctx context.Context, in *DashboardTemplateRequest, opts ...grpc.CallOption) (*DashboardTemplateInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DashboardTemplateInfo)
	err := c.cc.Invoke(ctx, DashboardTemplate_Enable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardTemplateClient) Disable(ctx context.Context, in *DashboardTemplateRequest, opts ...grpc.CallOption) (*DashboardTemplateInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DashboardTemplateInfo)
	err := c.cc.Invoke(ctx, DashboardTemplate_Disable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardTemplateClient) Get(ctx context.Context, in *RepositoryDashboardTemplateRequest, opts ...grpc.CallOption) (*DashboardTemplateInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DashboardTemplateInfo)
	err := c.cc.Invoke(ctx, DashboardTemplate_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardTemplateClient) List(ctx context.Context, in *DashboardTemplateQuery, opts ...grpc.CallOption) (*DashboardTemplatesInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DashboardTemplatesInfo)
	err := c.cc.Invoke(ctx, DashboardTemplate_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardTemplateServer is the server API for DashboardTemplate service.
// All implementations must embed UnimplementedDashboardTemplateServer
// for forward compatibility.
type DashboardTemplateServer interface {
	Register(context.Context, *RegisterDashboardTemplateRequest) (*DashboardTemplateInfo, error)
	Update(context.Context, *UpdateDashboardTemplateRequest) (*DashboardTemplateInfo, error)
	Deregister(context.Context, *DashboardTemplateRequest) (*empty.Empty, error)
	Enable(context.Context, *DashboardTemplateRequest) (*DashboardTemplateInfo, error)
	Disable(context.Context, *DashboardTemplateRequest) (*DashboardTemplateInfo, error)
	Get(context.Context, *RepositoryDashboardTemplateRequest) (*DashboardTemplateInfo, error)
	List(context.Context, *DashboardTemplateQuery) (*DashboardTemplatesInfo, error)
	mustEmbedUnimplementedDashboardTemplateServer()
}

// UnimplementedDashboardTemplateServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDashboardTemplateServer struct{}

func (UnimplementedDashboardTemplateServer) Register(context.Context, *RegisterDashboardTemplateRequest) (*DashboardTemplateInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedDashboardTemplateServer) Update(context.Context, *UpdateDashboardTemplateRequest) (*DashboardTemplateInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDashboardTemplateServer) Deregister(context.Context, *DashboardTemplateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deregister not implemented")
}
func (UnimplementedDashboardTemplateServer) Enable(context.Context, *DashboardTemplateRequest) (*DashboardTemplateInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedDashboardTemplateServer) Disable(context.Context, *DashboardTemplateRequest) (*DashboardTemplateInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedDashboardTemplateServer) Get(context.Context, *RepositoryDashboardTemplateRequest) (*DashboardTemplateInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDashboardTemplateServer) List(context.Context, *DashboardTemplateQuery) (*DashboardTemplatesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDashboardTemplateServer) mustEmbedUnimplementedDashboardTemplateServer() {}
func (UnimplementedDashboardTemplateServer) testEmbeddedByValue()                           {}

// UnsafeDashboardTemplateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardTemplateServer will
// result in compilation errors.
type UnsafeDashboardTemplateServer interface {
	mustEmbedUnimplementedDashboardTemplateServer()
}

func RegisterDashboardTemplateServer(s grpc.ServiceRegistrar, srv DashboardTemplateServer) {
	// If the following call pancis, it indicates UnimplementedDashboardTemplateServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DashboardTemplate_ServiceDesc, srv)
}

func _DashboardTemplate_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDashboardTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardTemplateServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardTemplate_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardTemplateServer).Register(ctx, req.(*RegisterDashboardTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardTemplate_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDashboardTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardTemplateServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardTemplate_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardTemplateServer).Update(ctx, req.(*UpdateDashboardTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardTemplate_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardTemplateServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardTemplate_Deregister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardTemplateServer).Deregister(ctx, req.(*DashboardTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardTemplate_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardTemplateServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardTemplate_Enable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardTemplateServer).Enable(ctx, req.(*DashboardTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardTemplate_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardTemplateServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardTemplate_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardTemplateServer).Disable(ctx, req.(*DashboardTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardTemplate_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryDashboardTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardTemplateServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardTemplate_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardTemplateServer).Get(ctx, req.(*RepositoryDashboardTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardTemplate_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardTemplateQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardTemplateServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardTemplate_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardTemplateServer).List(ctx, req.(*DashboardTemplateQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// DashboardTemplate_ServiceDesc is the grpc.ServiceDesc for DashboardTemplate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DashboardTemplate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.repository.v1.DashboardTemplate",
	HandlerType: (*DashboardTemplateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register",
			Handler:    _DashboardTemplate_Register_Handler,
		},
		{
			MethodName: "update",
			Handler:    _DashboardTemplate_Update_Handler,
		},
		{
			MethodName: "deregister",
			Handler:    _DashboardTemplate_Deregister_Handler,
		},
		{
			MethodName: "enable",
			Handler:    _DashboardTemplate_Enable_Handler,
		},
		{
			MethodName: "disable",
			Handler:    _DashboardTemplate_Disable_Handler,
		},
		{
			MethodName: "get",
			Handler:    _DashboardTemplate_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _DashboardTemplate_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/repository/v1/dashboard_template.proto",
}
