// description of dashboard

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.6.1
// source: spaceone/api/dashboard/v1/private_dashboard.proto

package v1

import (
	v2 "github.com/cloudforet-io/api/dist/go/spaceone/api/core/v2"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PrivateDashboardInfo_ResourceGroup int32

const (
	PrivateDashboardInfo_RESOURCE_GROUP_NONE PrivateDashboardInfo_ResourceGroup = 0
	PrivateDashboardInfo_DOMAIN              PrivateDashboardInfo_ResourceGroup = 1
	PrivateDashboardInfo_WORKSPACE           PrivateDashboardInfo_ResourceGroup = 2
	PrivateDashboardInfo_PROJECT             PrivateDashboardInfo_ResourceGroup = 3
)

// Enum value maps for PrivateDashboardInfo_ResourceGroup.
var (
	PrivateDashboardInfo_ResourceGroup_name = map[int32]string{
		0: "RESOURCE_GROUP_NONE",
		1: "DOMAIN",
		2: "WORKSPACE",
		3: "PROJECT",
	}
	PrivateDashboardInfo_ResourceGroup_value = map[string]int32{
		"RESOURCE_GROUP_NONE": 0,
		"DOMAIN":              1,
		"WORKSPACE":           2,
		"PROJECT":             3,
	}
)

func (x PrivateDashboardInfo_ResourceGroup) Enum() *PrivateDashboardInfo_ResourceGroup {
	p := new(PrivateDashboardInfo_ResourceGroup)
	*p = x
	return p
}

func (x PrivateDashboardInfo_ResourceGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrivateDashboardInfo_ResourceGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_dashboard_v1_private_dashboard_proto_enumTypes[0].Descriptor()
}

func (PrivateDashboardInfo_ResourceGroup) Type() protoreflect.EnumType {
	return &file_spaceone_api_dashboard_v1_private_dashboard_proto_enumTypes[0]
}

func (x PrivateDashboardInfo_ResourceGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrivateDashboardInfo_ResourceGroup.Descriptor instead.
func (PrivateDashboardInfo_ResourceGroup) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_private_dashboard_proto_rawDescGZIP(), []int{4, 0}
}

type CreatePrivateDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	Layouts *_struct.ListValue `protobuf:"bytes,2,opt,name=layouts,proto3" json:"layouts,omitempty"`
	// +optional
	Vars *_struct.Struct `protobuf:"bytes,3,opt,name=vars,proto3" json:"vars,omitempty"`
	// +optional
	Settings *_struct.Struct `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	// +optional
	Variables *_struct.Struct `protobuf:"bytes,5,opt,name=variables,proto3" json:"variables,omitempty"`
	// +optional
	VariablesSchema *_struct.Struct `protobuf:"bytes,6,opt,name=variables_schema,json=variablesSchema,proto3" json:"variables_schema,omitempty"`
	// +optional
	Labels *_struct.ListValue `protobuf:"bytes,7,opt,name=labels,proto3" json:"labels,omitempty"`
	// +optional
	Tags        *_struct.Struct `protobuf:"bytes,8,opt,name=tags,proto3" json:"tags,omitempty"`
	WorkspaceId string          `protobuf:"bytes,20,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *CreatePrivateDashboardRequest) Reset() {
	*x = CreatePrivateDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePrivateDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePrivateDashboardRequest) ProtoMessage() {}

func (x *CreatePrivateDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePrivateDashboardRequest.ProtoReflect.Descriptor instead.
func (*CreatePrivateDashboardRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_private_dashboard_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePrivateDashboardRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePrivateDashboardRequest) GetLayouts() *_struct.ListValue {
	if x != nil {
		return x.Layouts
	}
	return nil
}

func (x *CreatePrivateDashboardRequest) GetVars() *_struct.Struct {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *CreatePrivateDashboardRequest) GetSettings() *_struct.Struct {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CreatePrivateDashboardRequest) GetVariables() *_struct.Struct {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *CreatePrivateDashboardRequest) GetVariablesSchema() *_struct.Struct {
	if x != nil {
		return x.VariablesSchema
	}
	return nil
}

func (x *CreatePrivateDashboardRequest) GetLabels() *_struct.ListValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreatePrivateDashboardRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreatePrivateDashboardRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type UpdatePrivateDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateDashboardId string `protobuf:"bytes,1,opt,name=private_dashboard_id,json=privateDashboardId,proto3" json:"private_dashboard_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	Layouts *_struct.ListValue `protobuf:"bytes,3,opt,name=layouts,proto3" json:"layouts,omitempty"`
	// +optional
	Vars *_struct.Struct `protobuf:"bytes,4,opt,name=vars,proto3" json:"vars,omitempty"`
	// +optional
	Settings *_struct.Struct `protobuf:"bytes,5,opt,name=settings,proto3" json:"settings,omitempty"`
	// +optional
	Variables *_struct.Struct `protobuf:"bytes,6,opt,name=variables,proto3" json:"variables,omitempty"`
	// +optional
	VariablesSchema *_struct.Struct `protobuf:"bytes,7,opt,name=variables_schema,json=variablesSchema,proto3" json:"variables_schema,omitempty"`
	// +optional
	Labels *_struct.ListValue `protobuf:"bytes,8,opt,name=labels,proto3" json:"labels,omitempty"`
	// +optional
	Tags *_struct.Struct `protobuf:"bytes,9,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *UpdatePrivateDashboardRequest) Reset() {
	*x = UpdatePrivateDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePrivateDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePrivateDashboardRequest) ProtoMessage() {}

func (x *UpdatePrivateDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePrivateDashboardRequest.ProtoReflect.Descriptor instead.
func (*UpdatePrivateDashboardRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_private_dashboard_proto_rawDescGZIP(), []int{1}
}

func (x *UpdatePrivateDashboardRequest) GetPrivateDashboardId() string {
	if x != nil {
		return x.PrivateDashboardId
	}
	return ""
}

func (x *UpdatePrivateDashboardRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePrivateDashboardRequest) GetLayouts() *_struct.ListValue {
	if x != nil {
		return x.Layouts
	}
	return nil
}

func (x *UpdatePrivateDashboardRequest) GetVars() *_struct.Struct {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *UpdatePrivateDashboardRequest) GetSettings() *_struct.Struct {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *UpdatePrivateDashboardRequest) GetVariables() *_struct.Struct {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *UpdatePrivateDashboardRequest) GetVariablesSchema() *_struct.Struct {
	if x != nil {
		return x.VariablesSchema
	}
	return nil
}

func (x *UpdatePrivateDashboardRequest) GetLabels() *_struct.ListValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdatePrivateDashboardRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

type PrivateDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateDashboardId string `protobuf:"bytes,1,opt,name=private_dashboard_id,json=privateDashboardId,proto3" json:"private_dashboard_id,omitempty"`
}

func (x *PrivateDashboardRequest) Reset() {
	*x = PrivateDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateDashboardRequest) ProtoMessage() {}

func (x *PrivateDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateDashboardRequest.ProtoReflect.Descriptor instead.
func (*PrivateDashboardRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_private_dashboard_proto_rawDescGZIP(), []int{2}
}

func (x *PrivateDashboardRequest) GetPrivateDashboardId() string {
	if x != nil {
		return x.PrivateDashboardId
	}
	return ""
}

type PrivateDashboardQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +optional
	Query *v2.Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// +optional
	PrivateDashboardId string `protobuf:"bytes,2,opt,name=private_dashboard_id,json=privateDashboardId,proto3" json:"private_dashboard_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	WorkspaceId string `protobuf:"bytes,21,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *PrivateDashboardQuery) Reset() {
	*x = PrivateDashboardQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateDashboardQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateDashboardQuery) ProtoMessage() {}

func (x *PrivateDashboardQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateDashboardQuery.ProtoReflect.Descriptor instead.
func (*PrivateDashboardQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_private_dashboard_proto_rawDescGZIP(), []int{3}
}

func (x *PrivateDashboardQuery) GetQuery() *v2.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *PrivateDashboardQuery) GetPrivateDashboardId() string {
	if x != nil {
		return x.PrivateDashboardId
	}
	return ""
}

func (x *PrivateDashboardQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrivateDashboardQuery) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type PrivateDashboardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateDashboardId string             `protobuf:"bytes,1,opt,name=private_dashboard_id,json=privateDashboardId,proto3" json:"private_dashboard_id,omitempty"`
	Name               string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version            string             `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Layouts            *_struct.ListValue `protobuf:"bytes,4,opt,name=layouts,proto3" json:"layouts,omitempty"`
	Vars               *_struct.Struct    `protobuf:"bytes,5,opt,name=vars,proto3" json:"vars,omitempty"`
	Settings           *_struct.Struct    `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
	Variables          *_struct.Struct    `protobuf:"bytes,7,opt,name=variables,proto3" json:"variables,omitempty"`
	VariablesSchema    *_struct.Struct    `protobuf:"bytes,8,opt,name=variables_schema,json=variablesSchema,proto3" json:"variables_schema,omitempty"`
	Labels             *_struct.ListValue `protobuf:"bytes,9,opt,name=labels,proto3" json:"labels,omitempty"`
	Tags               *_struct.Struct    `protobuf:"bytes,10,opt,name=tags,proto3" json:"tags,omitempty"`
	DomainId           string             `protobuf:"bytes,20,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WorkspaceId        string             `protobuf:"bytes,21,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	UserId             string             `protobuf:"bytes,22,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CreatedAt          string             `protobuf:"bytes,31,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          string             `protobuf:"bytes,32,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *PrivateDashboardInfo) Reset() {
	*x = PrivateDashboardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateDashboardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateDashboardInfo) ProtoMessage() {}

func (x *PrivateDashboardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateDashboardInfo.ProtoReflect.Descriptor instead.
func (*PrivateDashboardInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_private_dashboard_proto_rawDescGZIP(), []int{4}
}

func (x *PrivateDashboardInfo) GetPrivateDashboardId() string {
	if x != nil {
		return x.PrivateDashboardId
	}
	return ""
}

func (x *PrivateDashboardInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrivateDashboardInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PrivateDashboardInfo) GetLayouts() *_struct.ListValue {
	if x != nil {
		return x.Layouts
	}
	return nil
}

func (x *PrivateDashboardInfo) GetVars() *_struct.Struct {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *PrivateDashboardInfo) GetSettings() *_struct.Struct {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *PrivateDashboardInfo) GetVariables() *_struct.Struct {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *PrivateDashboardInfo) GetVariablesSchema() *_struct.Struct {
	if x != nil {
		return x.VariablesSchema
	}
	return nil
}

func (x *PrivateDashboardInfo) GetLabels() *_struct.ListValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PrivateDashboardInfo) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PrivateDashboardInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *PrivateDashboardInfo) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *PrivateDashboardInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PrivateDashboardInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *PrivateDashboardInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type PrivateDashboardsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results    []*PrivateDashboardInfo `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TotalCount int32                   `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *PrivateDashboardsInfo) Reset() {
	*x = PrivateDashboardsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateDashboardsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateDashboardsInfo) ProtoMessage() {}

func (x *PrivateDashboardsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateDashboardsInfo.ProtoReflect.Descriptor instead.
func (*PrivateDashboardsInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_private_dashboard_proto_rawDescGZIP(), []int{5}
}

func (x *PrivateDashboardsInfo) GetResults() []*PrivateDashboardInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *PrivateDashboardsInfo) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type PrivateDashboardStatQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *v2.StatisticsQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *PrivateDashboardStatQuery) Reset() {
	*x = PrivateDashboardStatQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateDashboardStatQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateDashboardStatQuery) ProtoMessage() {}

func (x *PrivateDashboardStatQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateDashboardStatQuery.ProtoReflect.Descriptor instead.
func (*PrivateDashboardStatQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_private_dashboard_proto_rawDescGZIP(), []int{6}
}

func (x *PrivateDashboardStatQuery) GetQuery() *v2.StatisticsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

var File_spaceone_api_dashboard_v1_private_dashboard_proto protoreflect.FileDescriptor

var file_spaceone_api_dashboard_v1_private_dashboard_proto_rawDesc = []byte{
	0x0a, 0x31, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x19, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca, 0x03, 0x0a, 0x1d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x07, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x76, 0x61,
	0x72, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x42,
	0x0a, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x0f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x32, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xd9, 0x03, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x76, 0x61, 0x72,
	0x73, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a,
	0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x32, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x22, 0x4b, 0x0a, 0x17, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22,
	0xb3, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x14,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xd3, 0x05, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x07, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x76, 0x61, 0x72,
	0x73, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a,
	0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x32, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x50, 0x0a, 0x0d, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x03, 0x22, 0x83, 0x01, 0x0a, 0x15,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x58, 0x0a, 0x19, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3b,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x32, 0xb2, 0x07, 0x0a, 0x10,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x12, 0xa6, 0x01, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x38, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01,
	0x2a, 0x22, 0x26, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x38, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x2d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x32, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2d, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x9a, 0x01, 0x0a,
	0x03, 0x67, 0x65, 0x74, 0x12, 0x32, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2d, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x67, 0x65, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x30, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x30, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01,
	0x2a, 0x22, 0x24, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74,
	0x12, 0x34, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22,
	0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x2d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x72, 0x65, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spaceone_api_dashboard_v1_private_dashboard_proto_rawDescOnce sync.Once
	file_spaceone_api_dashboard_v1_private_dashboard_proto_rawDescData = file_spaceone_api_dashboard_v1_private_dashboard_proto_rawDesc
)

func file_spaceone_api_dashboard_v1_private_dashboard_proto_rawDescGZIP() []byte {
	file_spaceone_api_dashboard_v1_private_dashboard_proto_rawDescOnce.Do(func() {
		file_spaceone_api_dashboard_v1_private_dashboard_proto_rawDescData = protoimpl.X.CompressGZIP(file_spaceone_api_dashboard_v1_private_dashboard_proto_rawDescData)
	})
	return file_spaceone_api_dashboard_v1_private_dashboard_proto_rawDescData
}

var file_spaceone_api_dashboard_v1_private_dashboard_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_spaceone_api_dashboard_v1_private_dashboard_proto_goTypes = []interface{}{
	(PrivateDashboardInfo_ResourceGroup)(0), // 0: spaceone.api.dashboard.v1.PrivateDashboardInfo.ResourceGroup
	(*CreatePrivateDashboardRequest)(nil),   // 1: spaceone.api.dashboard.v1.CreatePrivateDashboardRequest
	(*UpdatePrivateDashboardRequest)(nil),   // 2: spaceone.api.dashboard.v1.UpdatePrivateDashboardRequest
	(*PrivateDashboardRequest)(nil),         // 3: spaceone.api.dashboard.v1.PrivateDashboardRequest
	(*PrivateDashboardQuery)(nil),           // 4: spaceone.api.dashboard.v1.PrivateDashboardQuery
	(*PrivateDashboardInfo)(nil),            // 5: spaceone.api.dashboard.v1.PrivateDashboardInfo
	(*PrivateDashboardsInfo)(nil),           // 6: spaceone.api.dashboard.v1.PrivateDashboardsInfo
	(*PrivateDashboardStatQuery)(nil),       // 7: spaceone.api.dashboard.v1.PrivateDashboardStatQuery
	(*_struct.ListValue)(nil),               // 8: google.protobuf.ListValue
	(*_struct.Struct)(nil),                  // 9: google.protobuf.Struct
	(*v2.Query)(nil),                        // 10: spaceone.api.core.v2.Query
	(*v2.StatisticsQuery)(nil),              // 11: spaceone.api.core.v2.StatisticsQuery
	(*empty.Empty)(nil),                     // 12: google.protobuf.Empty
}
var file_spaceone_api_dashboard_v1_private_dashboard_proto_depIdxs = []int32{
	8,  // 0: spaceone.api.dashboard.v1.CreatePrivateDashboardRequest.layouts:type_name -> google.protobuf.ListValue
	9,  // 1: spaceone.api.dashboard.v1.CreatePrivateDashboardRequest.vars:type_name -> google.protobuf.Struct
	9,  // 2: spaceone.api.dashboard.v1.CreatePrivateDashboardRequest.settings:type_name -> google.protobuf.Struct
	9,  // 3: spaceone.api.dashboard.v1.CreatePrivateDashboardRequest.variables:type_name -> google.protobuf.Struct
	9,  // 4: spaceone.api.dashboard.v1.CreatePrivateDashboardRequest.variables_schema:type_name -> google.protobuf.Struct
	8,  // 5: spaceone.api.dashboard.v1.CreatePrivateDashboardRequest.labels:type_name -> google.protobuf.ListValue
	9,  // 6: spaceone.api.dashboard.v1.CreatePrivateDashboardRequest.tags:type_name -> google.protobuf.Struct
	8,  // 7: spaceone.api.dashboard.v1.UpdatePrivateDashboardRequest.layouts:type_name -> google.protobuf.ListValue
	9,  // 8: spaceone.api.dashboard.v1.UpdatePrivateDashboardRequest.vars:type_name -> google.protobuf.Struct
	9,  // 9: spaceone.api.dashboard.v1.UpdatePrivateDashboardRequest.settings:type_name -> google.protobuf.Struct
	9,  // 10: spaceone.api.dashboard.v1.UpdatePrivateDashboardRequest.variables:type_name -> google.protobuf.Struct
	9,  // 11: spaceone.api.dashboard.v1.UpdatePrivateDashboardRequest.variables_schema:type_name -> google.protobuf.Struct
	8,  // 12: spaceone.api.dashboard.v1.UpdatePrivateDashboardRequest.labels:type_name -> google.protobuf.ListValue
	9,  // 13: spaceone.api.dashboard.v1.UpdatePrivateDashboardRequest.tags:type_name -> google.protobuf.Struct
	10, // 14: spaceone.api.dashboard.v1.PrivateDashboardQuery.query:type_name -> spaceone.api.core.v2.Query
	8,  // 15: spaceone.api.dashboard.v1.PrivateDashboardInfo.layouts:type_name -> google.protobuf.ListValue
	9,  // 16: spaceone.api.dashboard.v1.PrivateDashboardInfo.vars:type_name -> google.protobuf.Struct
	9,  // 17: spaceone.api.dashboard.v1.PrivateDashboardInfo.settings:type_name -> google.protobuf.Struct
	9,  // 18: spaceone.api.dashboard.v1.PrivateDashboardInfo.variables:type_name -> google.protobuf.Struct
	9,  // 19: spaceone.api.dashboard.v1.PrivateDashboardInfo.variables_schema:type_name -> google.protobuf.Struct
	8,  // 20: spaceone.api.dashboard.v1.PrivateDashboardInfo.labels:type_name -> google.protobuf.ListValue
	9,  // 21: spaceone.api.dashboard.v1.PrivateDashboardInfo.tags:type_name -> google.protobuf.Struct
	5,  // 22: spaceone.api.dashboard.v1.PrivateDashboardsInfo.results:type_name -> spaceone.api.dashboard.v1.PrivateDashboardInfo
	11, // 23: spaceone.api.dashboard.v1.PrivateDashboardStatQuery.query:type_name -> spaceone.api.core.v2.StatisticsQuery
	1,  // 24: spaceone.api.dashboard.v1.PrivateDashboard.create:input_type -> spaceone.api.dashboard.v1.CreatePrivateDashboardRequest
	2,  // 25: spaceone.api.dashboard.v1.PrivateDashboard.update:input_type -> spaceone.api.dashboard.v1.UpdatePrivateDashboardRequest
	3,  // 26: spaceone.api.dashboard.v1.PrivateDashboard.delete:input_type -> spaceone.api.dashboard.v1.PrivateDashboardRequest
	3,  // 27: spaceone.api.dashboard.v1.PrivateDashboard.get:input_type -> spaceone.api.dashboard.v1.PrivateDashboardRequest
	4,  // 28: spaceone.api.dashboard.v1.PrivateDashboard.list:input_type -> spaceone.api.dashboard.v1.PrivateDashboardQuery
	7,  // 29: spaceone.api.dashboard.v1.PrivateDashboard.stat:input_type -> spaceone.api.dashboard.v1.PrivateDashboardStatQuery
	5,  // 30: spaceone.api.dashboard.v1.PrivateDashboard.create:output_type -> spaceone.api.dashboard.v1.PrivateDashboardInfo
	5,  // 31: spaceone.api.dashboard.v1.PrivateDashboard.update:output_type -> spaceone.api.dashboard.v1.PrivateDashboardInfo
	12, // 32: spaceone.api.dashboard.v1.PrivateDashboard.delete:output_type -> google.protobuf.Empty
	5,  // 33: spaceone.api.dashboard.v1.PrivateDashboard.get:output_type -> spaceone.api.dashboard.v1.PrivateDashboardInfo
	6,  // 34: spaceone.api.dashboard.v1.PrivateDashboard.list:output_type -> spaceone.api.dashboard.v1.PrivateDashboardsInfo
	9,  // 35: spaceone.api.dashboard.v1.PrivateDashboard.stat:output_type -> google.protobuf.Struct
	30, // [30:36] is the sub-list for method output_type
	24, // [24:30] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_spaceone_api_dashboard_v1_private_dashboard_proto_init() }
func file_spaceone_api_dashboard_v1_private_dashboard_proto_init() {
	if File_spaceone_api_dashboard_v1_private_dashboard_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePrivateDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePrivateDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateDashboardQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateDashboardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateDashboardsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateDashboardStatQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spaceone_api_dashboard_v1_private_dashboard_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spaceone_api_dashboard_v1_private_dashboard_proto_goTypes,
		DependencyIndexes: file_spaceone_api_dashboard_v1_private_dashboard_proto_depIdxs,
		EnumInfos:         file_spaceone_api_dashboard_v1_private_dashboard_proto_enumTypes,
		MessageInfos:      file_spaceone_api_dashboard_v1_private_dashboard_proto_msgTypes,
	}.Build()
	File_spaceone_api_dashboard_v1_private_dashboard_proto = out.File
	file_spaceone_api_dashboard_v1_private_dashboard_proto_rawDesc = nil
	file_spaceone_api_dashboard_v1_private_dashboard_proto_goTypes = nil
	file_spaceone_api_dashboard_v1_private_dashboard_proto_depIdxs = nil
}
