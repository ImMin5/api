// description of data table

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.6.1
// source: spaceone/api/dashboard/v1/public_data_table.proto

package v1

import (
	v2 "github.com/cloudforet-io/api/dist/go/spaceone/api/core/v2"
	_ "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataType int32

const (
	DataType_DATA_TYPE_NONE DataType = 0
	DataType_ADDED          DataType = 1
	DataType_TRANSFORMED    DataType = 2
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0: "DATA_TYPE_NONE",
		1: "ADDED",
		2: "TRANSFORMED",
	}
	DataType_value = map[string]int32{
		"DATA_TYPE_NONE": 0,
		"ADDED":          1,
		"TRANSFORMED":    2,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_enumTypes[0].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_spaceone_api_dashboard_v1_public_data_table_proto_enumTypes[0]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{0}
}

type SourceType int32

const (
	SourceType_SOURCE_TYPE_NONE SourceType = 0
	SourceType_ASSET            SourceType = 1
	SourceType_COST             SourceType = 2
)

// Enum value maps for SourceType.
var (
	SourceType_name = map[int32]string{
		0: "SOURCE_TYPE_NONE",
		1: "ASSET",
		2: "COST",
	}
	SourceType_value = map[string]int32{
		"SOURCE_TYPE_NONE": 0,
		"ASSET":            1,
		"COST":             2,
	}
)

func (x SourceType) Enum() *SourceType {
	p := new(SourceType)
	*p = x
	return p
}

func (x SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_enumTypes[1].Descriptor()
}

func (SourceType) Type() protoreflect.EnumType {
	return &file_spaceone_api_dashboard_v1_public_data_table_proto_enumTypes[1]
}

func (x SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceType.Descriptor instead.
func (SourceType) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{1}
}

type Operator int32

const (
	Operator_OPERATOR_NONE Operator = 0
	Operator_JOIN          Operator = 1
	Operator_CONCAT        Operator = 2
	Operator_AGGREGATE     Operator = 3
	Operator_QUERY         Operator = 4
	Operator_EVAL          Operator = 5
	Operator_PIVOT         Operator = 6
)

// Enum value maps for Operator.
var (
	Operator_name = map[int32]string{
		0: "OPERATOR_NONE",
		1: "JOIN",
		2: "CONCAT",
		3: "AGGREGATE",
		4: "QUERY",
		5: "EVAL",
		6: "PIVOT",
	}
	Operator_value = map[string]int32{
		"OPERATOR_NONE": 0,
		"JOIN":          1,
		"CONCAT":        2,
		"AGGREGATE":     3,
		"QUERY":         4,
		"EVAL":          5,
		"PIVOT":         6,
	}
)

func (x Operator) Enum() *Operator {
	p := new(Operator)
	*p = x
	return p
}

func (x Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_enumTypes[2].Descriptor()
}

func (Operator) Type() protoreflect.EnumType {
	return &file_spaceone_api_dashboard_v1_public_data_table_proto_enumTypes[2]
}

func (x Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operator.Descriptor instead.
func (Operator) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{2}
}

type JoinOperator_JoinType int32

const (
	JoinOperator_JOIN_TYPE_NONE JoinOperator_JoinType = 0
	JoinOperator_inner          JoinOperator_JoinType = 1
	JoinOperator_left           JoinOperator_JoinType = 2
	JoinOperator_right          JoinOperator_JoinType = 3
	JoinOperator_outer          JoinOperator_JoinType = 4
)

// Enum value maps for JoinOperator_JoinType.
var (
	JoinOperator_JoinType_name = map[int32]string{
		0: "JOIN_TYPE_NONE",
		1: "inner",
		2: "left",
		3: "right",
		4: "outer",
	}
	JoinOperator_JoinType_value = map[string]int32{
		"JOIN_TYPE_NONE": 0,
		"inner":          1,
		"left":           2,
		"right":          3,
		"outer":          4,
	}
)

func (x JoinOperator_JoinType) Enum() *JoinOperator_JoinType {
	p := new(JoinOperator_JoinType)
	*p = x
	return p
}

func (x JoinOperator_JoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinOperator_JoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_enumTypes[3].Descriptor()
}

func (JoinOperator_JoinType) Type() protoreflect.EnumType {
	return &file_spaceone_api_dashboard_v1_public_data_table_proto_enumTypes[3]
}

func (x JoinOperator_JoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinOperator_JoinType.Descriptor instead.
func (JoinOperator_JoinType) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{2, 0}
}

type AddOptions_DateFormat int32

const (
	AddOptions_DATE_FORMAT_NONE AddOptions_DateFormat = 0
	AddOptions_SINGLE           AddOptions_DateFormat = 1
	AddOptions_SEPARATE         AddOptions_DateFormat = 2
)

// Enum value maps for AddOptions_DateFormat.
var (
	AddOptions_DateFormat_name = map[int32]string{
		0: "DATE_FORMAT_NONE",
		1: "SINGLE",
		2: "SEPARATE",
	}
	AddOptions_DateFormat_value = map[string]int32{
		"DATE_FORMAT_NONE": 0,
		"SINGLE":           1,
		"SEPARATE":         2,
	}
)

func (x AddOptions_DateFormat) Enum() *AddOptions_DateFormat {
	p := new(AddOptions_DateFormat)
	*p = x
	return p
}

func (x AddOptions_DateFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddOptions_DateFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_enumTypes[4].Descriptor()
}

func (AddOptions_DateFormat) Type() protoreflect.EnumType {
	return &file_spaceone_api_dashboard_v1_public_data_table_proto_enumTypes[4]
}

func (x AddOptions_DateFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddOptions_DateFormat.Descriptor instead.
func (AddOptions_DateFormat) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{9, 0}
}

type LoadPublicDataTableRequest_Granularity int32

const (
	LoadPublicDataTableRequest_GRANULARITY_NONE LoadPublicDataTableRequest_Granularity = 0
	LoadPublicDataTableRequest_DAILY            LoadPublicDataTableRequest_Granularity = 1
	LoadPublicDataTableRequest_MONTHLY          LoadPublicDataTableRequest_Granularity = 2
	LoadPublicDataTableRequest_YEARLY           LoadPublicDataTableRequest_Granularity = 3
)

// Enum value maps for LoadPublicDataTableRequest_Granularity.
var (
	LoadPublicDataTableRequest_Granularity_name = map[int32]string{
		0: "GRANULARITY_NONE",
		1: "DAILY",
		2: "MONTHLY",
		3: "YEARLY",
	}
	LoadPublicDataTableRequest_Granularity_value = map[string]int32{
		"GRANULARITY_NONE": 0,
		"DAILY":            1,
		"MONTHLY":          2,
		"YEARLY":           3,
	}
)

func (x LoadPublicDataTableRequest_Granularity) Enum() *LoadPublicDataTableRequest_Granularity {
	p := new(LoadPublicDataTableRequest_Granularity)
	*p = x
	return p
}

func (x LoadPublicDataTableRequest_Granularity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoadPublicDataTableRequest_Granularity) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_enumTypes[5].Descriptor()
}

func (LoadPublicDataTableRequest_Granularity) Type() protoreflect.EnumType {
	return &file_spaceone_api_dashboard_v1_public_data_table_proto_enumTypes[5]
}

func (x LoadPublicDataTableRequest_Granularity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoadPublicDataTableRequest_Granularity.Descriptor instead.
func (LoadPublicDataTableRequest_Granularity) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{15, 0}
}

type PublicDataTableInfo_ResourceGroup int32

const (
	PublicDataTableInfo_RESOURCE_GROUP_NONE PublicDataTableInfo_ResourceGroup = 0
	PublicDataTableInfo_DOMAIN              PublicDataTableInfo_ResourceGroup = 1
	PublicDataTableInfo_WORKSPACE           PublicDataTableInfo_ResourceGroup = 2
	PublicDataTableInfo_PROJECT             PublicDataTableInfo_ResourceGroup = 3
)

// Enum value maps for PublicDataTableInfo_ResourceGroup.
var (
	PublicDataTableInfo_ResourceGroup_name = map[int32]string{
		0: "RESOURCE_GROUP_NONE",
		1: "DOMAIN",
		2: "WORKSPACE",
		3: "PROJECT",
	}
	PublicDataTableInfo_ResourceGroup_value = map[string]int32{
		"RESOURCE_GROUP_NONE": 0,
		"DOMAIN":              1,
		"WORKSPACE":           2,
		"PROJECT":             3,
	}
)

func (x PublicDataTableInfo_ResourceGroup) Enum() *PublicDataTableInfo_ResourceGroup {
	p := new(PublicDataTableInfo_ResourceGroup)
	*p = x
	return p
}

func (x PublicDataTableInfo_ResourceGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicDataTableInfo_ResourceGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_enumTypes[6].Descriptor()
}

func (PublicDataTableInfo_ResourceGroup) Type() protoreflect.EnumType {
	return &file_spaceone_api_dashboard_v1_public_data_table_proto_enumTypes[6]
}

func (x PublicDataTableInfo_ResourceGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicDataTableInfo_ResourceGroup.Descriptor instead.
func (PublicDataTableInfo_ResourceGroup) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{17, 0}
}

type PublicDataTableInfo_State int32

const (
	PublicDataTableInfo_STATE_NONE  PublicDataTableInfo_State = 0
	PublicDataTableInfo_AVAILABLE   PublicDataTableInfo_State = 1
	PublicDataTableInfo_UNAVAILABLE PublicDataTableInfo_State = 2
)

// Enum value maps for PublicDataTableInfo_State.
var (
	PublicDataTableInfo_State_name = map[int32]string{
		0: "STATE_NONE",
		1: "AVAILABLE",
		2: "UNAVAILABLE",
	}
	PublicDataTableInfo_State_value = map[string]int32{
		"STATE_NONE":  0,
		"AVAILABLE":   1,
		"UNAVAILABLE": 2,
	}
)

func (x PublicDataTableInfo_State) Enum() *PublicDataTableInfo_State {
	p := new(PublicDataTableInfo_State)
	*p = x
	return p
}

func (x PublicDataTableInfo_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicDataTableInfo_State) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_enumTypes[7].Descriptor()
}

func (PublicDataTableInfo_State) Type() protoreflect.EnumType {
	return &file_spaceone_api_dashboard_v1_public_data_table_proto_enumTypes[7]
}

func (x PublicDataTableInfo_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicDataTableInfo_State.Descriptor instead.
func (PublicDataTableInfo_State) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{17, 1}
}

type AssetSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricId string `protobuf:"bytes,1,opt,name=metric_id,json=metricId,proto3" json:"metric_id,omitempty"`
}

func (x *AssetSource) Reset() {
	*x = AssetSource{}
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetSource) ProtoMessage() {}

func (x *AssetSource) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetSource.ProtoReflect.Descriptor instead.
func (*AssetSource) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{0}
}

func (x *AssetSource) GetMetricId() string {
	if x != nil {
		return x.MetricId
	}
	return ""
}

type CostSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CostSource:
	//
	//	*CostSource_DataSourceId
	//	*CostSource_PluginId
	CostSource isCostSource_CostSource `protobuf_oneof:"cost_source"`
	DataKey    string                  `protobuf:"bytes,3,opt,name=data_key,json=dataKey,proto3" json:"data_key,omitempty"`
}

func (x *CostSource) Reset() {
	*x = CostSource{}
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostSource) ProtoMessage() {}

func (x *CostSource) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostSource.ProtoReflect.Descriptor instead.
func (*CostSource) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{1}
}

func (m *CostSource) GetCostSource() isCostSource_CostSource {
	if m != nil {
		return m.CostSource
	}
	return nil
}

func (x *CostSource) GetDataSourceId() string {
	if x, ok := x.GetCostSource().(*CostSource_DataSourceId); ok {
		return x.DataSourceId
	}
	return ""
}

func (x *CostSource) GetPluginId() string {
	if x, ok := x.GetCostSource().(*CostSource_PluginId); ok {
		return x.PluginId
	}
	return ""
}

func (x *CostSource) GetDataKey() string {
	if x != nil {
		return x.DataKey
	}
	return ""
}

type isCostSource_CostSource interface {
	isCostSource_CostSource()
}

type CostSource_DataSourceId struct {
	DataSourceId string `protobuf:"bytes,1,opt,name=data_source_id,json=dataSourceId,proto3,oneof"`
}

type CostSource_PluginId struct {
	PluginId string `protobuf:"bytes,2,opt,name=plugin_id,json=pluginId,proto3,oneof"`
}

func (*CostSource_DataSourceId) isCostSource_CostSource() {}

func (*CostSource_PluginId) isCostSource_CostSource() {}

type JoinOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataTables []string `protobuf:"bytes,1,rep,name=data_tables,json=dataTables,proto3" json:"data_tables,omitempty"`
	// +optional
	How JoinOperator_JoinType `protobuf:"varint,2,opt,name=how,proto3,enum=spaceone.api.dashboard.v1.JoinOperator_JoinType" json:"how,omitempty"`
}

func (x *JoinOperator) Reset() {
	*x = JoinOperator{}
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinOperator) ProtoMessage() {}

func (x *JoinOperator) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinOperator.ProtoReflect.Descriptor instead.
func (*JoinOperator) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{2}
}

func (x *JoinOperator) GetDataTables() []string {
	if x != nil {
		return x.DataTables
	}
	return nil
}

func (x *JoinOperator) GetHow() JoinOperator_JoinType {
	if x != nil {
		return x.How
	}
	return JoinOperator_JOIN_TYPE_NONE
}

type ConcatOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataTables []string `protobuf:"bytes,1,rep,name=data_tables,json=dataTables,proto3" json:"data_tables,omitempty"`
}

func (x *ConcatOperator) Reset() {
	*x = ConcatOperator{}
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConcatOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcatOperator) ProtoMessage() {}

func (x *ConcatOperator) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcatOperator.ProtoReflect.Descriptor instead.
func (*ConcatOperator) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{3}
}

func (x *ConcatOperator) GetDataTables() []string {
	if x != nil {
		return x.DataTables
	}
	return nil
}

type AggregateOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataTableId string          `protobuf:"bytes,1,opt,name=data_table_id,json=dataTableId,proto3" json:"data_table_id,omitempty"`
	Function    *_struct.Struct `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	// +optional
	GroupBy string `protobuf:"bytes,3,opt,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
}

func (x *AggregateOperator) Reset() {
	*x = AggregateOperator{}
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateOperator) ProtoMessage() {}

func (x *AggregateOperator) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateOperator.ProtoReflect.Descriptor instead.
func (*AggregateOperator) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{4}
}

func (x *AggregateOperator) GetDataTableId() string {
	if x != nil {
		return x.DataTableId
	}
	return ""
}

func (x *AggregateOperator) GetFunction() *_struct.Struct {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *AggregateOperator) GetGroupBy() string {
	if x != nil {
		return x.GroupBy
	}
	return ""
}

type QueryOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataTableId string   `protobuf:"bytes,1,opt,name=data_table_id,json=dataTableId,proto3" json:"data_table_id,omitempty"`
	Conditions  []string `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *QueryOperator) Reset() {
	*x = QueryOperator{}
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOperator) ProtoMessage() {}

func (x *QueryOperator) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOperator.ProtoReflect.Descriptor instead.
func (*QueryOperator) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{5}
}

func (x *QueryOperator) GetDataTableId() string {
	if x != nil {
		return x.DataTableId
	}
	return ""
}

func (x *QueryOperator) GetConditions() []string {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type EvaluateOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataTableId string             `protobuf:"bytes,1,opt,name=data_table_id,json=dataTableId,proto3" json:"data_table_id,omitempty"`
	Expressions *_struct.ListValue `protobuf:"bytes,2,opt,name=expressions,proto3" json:"expressions,omitempty"`
}

func (x *EvaluateOperator) Reset() {
	*x = EvaluateOperator{}
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluateOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateOperator) ProtoMessage() {}

func (x *EvaluateOperator) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateOperator.ProtoReflect.Descriptor instead.
func (*EvaluateOperator) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{6}
}

func (x *EvaluateOperator) GetDataTableId() string {
	if x != nil {
		return x.DataTableId
	}
	return ""
}

func (x *EvaluateOperator) GetExpressions() *_struct.ListValue {
	if x != nil {
		return x.Expressions
	}
	return nil
}

type PivotOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataTableId string   `protobuf:"bytes,1,opt,name=data_table_id,json=dataTableId,proto3" json:"data_table_id,omitempty"`
	Index       []string `protobuf:"bytes,2,rep,name=index,proto3" json:"index,omitempty"`
	Columns     []string `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
	Values      []string `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"`
	// +optional
	Aggregation string `protobuf:"bytes,5,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
}

func (x *PivotOperator) Reset() {
	*x = PivotOperator{}
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PivotOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PivotOperator) ProtoMessage() {}

func (x *PivotOperator) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PivotOperator.ProtoReflect.Descriptor instead.
func (*PivotOperator) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{7}
}

func (x *PivotOperator) GetDataTableId() string {
	if x != nil {
		return x.DataTableId
	}
	return ""
}

func (x *PivotOperator) GetIndex() []string {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *PivotOperator) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *PivotOperator) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PivotOperator) GetAggregation() string {
	if x != nil {
		return x.Aggregation
	}
	return ""
}

type TimeDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Timediff:
	//
	//	*TimeDiff_Years
	//	*TimeDiff_Months
	Timediff isTimeDiff_Timediff `protobuf_oneof:"timediff"`
}

func (x *TimeDiff) Reset() {
	*x = TimeDiff{}
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeDiff) ProtoMessage() {}

func (x *TimeDiff) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeDiff.ProtoReflect.Descriptor instead.
func (*TimeDiff) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{8}
}

func (m *TimeDiff) GetTimediff() isTimeDiff_Timediff {
	if m != nil {
		return m.Timediff
	}
	return nil
}

func (x *TimeDiff) GetYears() int32 {
	if x, ok := x.GetTimediff().(*TimeDiff_Years); ok {
		return x.Years
	}
	return 0
}

func (x *TimeDiff) GetMonths() int32 {
	if x, ok := x.GetTimediff().(*TimeDiff_Months); ok {
		return x.Months
	}
	return 0
}

type isTimeDiff_Timediff interface {
	isTimeDiff_Timediff()
}

type TimeDiff_Years struct {
	Years int32 `protobuf:"varint,1,opt,name=years,proto3,oneof"`
}

type TimeDiff_Months struct {
	Months int32 `protobuf:"varint,2,opt,name=months,proto3,oneof"`
}

func (*TimeDiff_Years) isTimeDiff_Timediff() {}

func (*TimeDiff_Months) isTimeDiff_Timediff() {}

type AddOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//
	//	*AddOptions_ASSET
	//	*AddOptions_COST
	Source   isAddOptions_Source `protobuf_oneof:"source"`
	DataName string              `protobuf:"bytes,3,opt,name=data_name,json=dataName,proto3" json:"data_name,omitempty"`
	// +optional
	DataUnit string `protobuf:"bytes,4,opt,name=data_unit,json=dataUnit,proto3" json:"data_unit,omitempty"`
	// +optional
	GroupBy *_struct.ListValue `protobuf:"bytes,5,opt,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	// +optional
	Filter []*v2.Filter `protobuf:"bytes,6,rep,name=filter,proto3" json:"filter,omitempty"`
	// +optional
	FilterOr []*v2.Filter `protobuf:"bytes,7,rep,name=filter_or,json=filterOr,proto3" json:"filter_or,omitempty"`
	// +optional
	DateFormat AddOptions_DateFormat `protobuf:"varint,8,opt,name=date_format,json=dateFormat,proto3,enum=spaceone.api.dashboard.v1.AddOptions_DateFormat" json:"date_format,omitempty"`
	// +optional
	AdditionalLabels *_struct.Struct `protobuf:"bytes,9,opt,name=additional_labels,json=additionalLabels,proto3" json:"additional_labels,omitempty"`
	// +optional
	Timediff *TimeDiff `protobuf:"bytes,10,opt,name=timediff,proto3" json:"timediff,omitempty"`
}

func (x *AddOptions) Reset() {
	*x = AddOptions{}
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOptions) ProtoMessage() {}

func (x *AddOptions) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOptions.ProtoReflect.Descriptor instead.
func (*AddOptions) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{9}
}

func (m *AddOptions) GetSource() isAddOptions_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *AddOptions) GetASSET() *AssetSource {
	if x, ok := x.GetSource().(*AddOptions_ASSET); ok {
		return x.ASSET
	}
	return nil
}

func (x *AddOptions) GetCOST() *CostSource {
	if x, ok := x.GetSource().(*AddOptions_COST); ok {
		return x.COST
	}
	return nil
}

func (x *AddOptions) GetDataName() string {
	if x != nil {
		return x.DataName
	}
	return ""
}

func (x *AddOptions) GetDataUnit() string {
	if x != nil {
		return x.DataUnit
	}
	return ""
}

func (x *AddOptions) GetGroupBy() *_struct.ListValue {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *AddOptions) GetFilter() []*v2.Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *AddOptions) GetFilterOr() []*v2.Filter {
	if x != nil {
		return x.FilterOr
	}
	return nil
}

func (x *AddOptions) GetDateFormat() AddOptions_DateFormat {
	if x != nil {
		return x.DateFormat
	}
	return AddOptions_DATE_FORMAT_NONE
}

func (x *AddOptions) GetAdditionalLabels() *_struct.Struct {
	if x != nil {
		return x.AdditionalLabels
	}
	return nil
}

func (x *AddOptions) GetTimediff() *TimeDiff {
	if x != nil {
		return x.Timediff
	}
	return nil
}

type isAddOptions_Source interface {
	isAddOptions_Source()
}

type AddOptions_ASSET struct {
	ASSET *AssetSource `protobuf:"bytes,1,opt,name=ASSET,proto3,oneof"`
}

type AddOptions_COST struct {
	COST *CostSource `protobuf:"bytes,2,opt,name=COST,proto3,oneof"`
}

func (*AddOptions_ASSET) isAddOptions_Source() {}

func (*AddOptions_COST) isAddOptions_Source() {}

type TransformOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Operator:
	//
	//	*TransformOptions_JOIN
	//	*TransformOptions_CONCAT
	//	*TransformOptions_AGGREGATE
	//	*TransformOptions_QUERY
	//	*TransformOptions_EVAL
	//	*TransformOptions_PIVOT
	Operator isTransformOptions_Operator `protobuf_oneof:"operator"`
}

func (x *TransformOptions) Reset() {
	*x = TransformOptions{}
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformOptions) ProtoMessage() {}

func (x *TransformOptions) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformOptions.ProtoReflect.Descriptor instead.
func (*TransformOptions) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{10}
}

func (m *TransformOptions) GetOperator() isTransformOptions_Operator {
	if m != nil {
		return m.Operator
	}
	return nil
}

func (x *TransformOptions) GetJOIN() *JoinOperator {
	if x, ok := x.GetOperator().(*TransformOptions_JOIN); ok {
		return x.JOIN
	}
	return nil
}

func (x *TransformOptions) GetCONCAT() *ConcatOperator {
	if x, ok := x.GetOperator().(*TransformOptions_CONCAT); ok {
		return x.CONCAT
	}
	return nil
}

func (x *TransformOptions) GetAGGREGATE() *AggregateOperator {
	if x, ok := x.GetOperator().(*TransformOptions_AGGREGATE); ok {
		return x.AGGREGATE
	}
	return nil
}

func (x *TransformOptions) GetQUERY() *QueryOperator {
	if x, ok := x.GetOperator().(*TransformOptions_QUERY); ok {
		return x.QUERY
	}
	return nil
}

func (x *TransformOptions) GetEVAL() *EvaluateOperator {
	if x, ok := x.GetOperator().(*TransformOptions_EVAL); ok {
		return x.EVAL
	}
	return nil
}

func (x *TransformOptions) GetPIVOT() *PivotOperator {
	if x, ok := x.GetOperator().(*TransformOptions_PIVOT); ok {
		return x.PIVOT
	}
	return nil
}

type isTransformOptions_Operator interface {
	isTransformOptions_Operator()
}

type TransformOptions_JOIN struct {
	JOIN *JoinOperator `protobuf:"bytes,1,opt,name=JOIN,proto3,oneof"`
}

type TransformOptions_CONCAT struct {
	CONCAT *ConcatOperator `protobuf:"bytes,2,opt,name=CONCAT,proto3,oneof"`
}

type TransformOptions_AGGREGATE struct {
	AGGREGATE *AggregateOperator `protobuf:"bytes,3,opt,name=AGGREGATE,proto3,oneof"`
}

type TransformOptions_QUERY struct {
	QUERY *QueryOperator `protobuf:"bytes,4,opt,name=QUERY,proto3,oneof"`
}

type TransformOptions_EVAL struct {
	EVAL *EvaluateOperator `protobuf:"bytes,5,opt,name=EVAL,proto3,oneof"`
}

type TransformOptions_PIVOT struct {
	PIVOT *PivotOperator `protobuf:"bytes,6,opt,name=PIVOT,proto3,oneof"`
}

func (*TransformOptions_JOIN) isTransformOptions_Operator() {}

func (*TransformOptions_CONCAT) isTransformOptions_Operator() {}

func (*TransformOptions_AGGREGATE) isTransformOptions_Operator() {}

func (*TransformOptions_QUERY) isTransformOptions_Operator() {}

func (*TransformOptions_EVAL) isTransformOptions_Operator() {}

func (*TransformOptions_PIVOT) isTransformOptions_Operator() {}

type AddPublicDataTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WidgetId string `protobuf:"bytes,1,opt,name=widget_id,json=widgetId,proto3" json:"widget_id,omitempty"`
	// +optional
	Name       string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SourceType SourceType  `protobuf:"varint,3,opt,name=source_type,json=sourceType,proto3,enum=spaceone.api.dashboard.v1.SourceType" json:"source_type,omitempty"`
	Options    *AddOptions `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
	// +optional
	Vars *_struct.Struct `protobuf:"bytes,5,opt,name=vars,proto3" json:"vars,omitempty"`
	// +optional
	Tags *_struct.Struct `protobuf:"bytes,6,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *AddPublicDataTableRequest) Reset() {
	*x = AddPublicDataTableRequest{}
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPublicDataTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPublicDataTableRequest) ProtoMessage() {}

func (x *AddPublicDataTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPublicDataTableRequest.ProtoReflect.Descriptor instead.
func (*AddPublicDataTableRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{11}
}

func (x *AddPublicDataTableRequest) GetWidgetId() string {
	if x != nil {
		return x.WidgetId
	}
	return ""
}

func (x *AddPublicDataTableRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddPublicDataTableRequest) GetSourceType() SourceType {
	if x != nil {
		return x.SourceType
	}
	return SourceType_SOURCE_TYPE_NONE
}

func (x *AddPublicDataTableRequest) GetOptions() *AddOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *AddPublicDataTableRequest) GetVars() *_struct.Struct {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *AddPublicDataTableRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

type TransformPublicDataTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WidgetId string `protobuf:"bytes,1,opt,name=widget_id,json=widgetId,proto3" json:"widget_id,omitempty"`
	// +optional
	Name     string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Operator Operator          `protobuf:"varint,3,opt,name=operator,proto3,enum=spaceone.api.dashboard.v1.Operator" json:"operator,omitempty"`
	Options  *TransformOptions `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
	// +optional
	Vars *_struct.Struct `protobuf:"bytes,5,opt,name=vars,proto3" json:"vars,omitempty"`
	// +optional
	Tags *_struct.Struct `protobuf:"bytes,6,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *TransformPublicDataTableRequest) Reset() {
	*x = TransformPublicDataTableRequest{}
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformPublicDataTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformPublicDataTableRequest) ProtoMessage() {}

func (x *TransformPublicDataTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformPublicDataTableRequest.ProtoReflect.Descriptor instead.
func (*TransformPublicDataTableRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{12}
}

func (x *TransformPublicDataTableRequest) GetWidgetId() string {
	if x != nil {
		return x.WidgetId
	}
	return ""
}

func (x *TransformPublicDataTableRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TransformPublicDataTableRequest) GetOperator() Operator {
	if x != nil {
		return x.Operator
	}
	return Operator_OPERATOR_NONE
}

func (x *TransformPublicDataTableRequest) GetOptions() *TransformOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *TransformPublicDataTableRequest) GetVars() *_struct.Struct {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *TransformPublicDataTableRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

type UpdatePublicDataTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataTableId string `protobuf:"bytes,1,opt,name=data_table_id,json=dataTableId,proto3" json:"data_table_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	Options *_struct.Struct `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	// +optional
	Vars *_struct.Struct `protobuf:"bytes,4,opt,name=vars,proto3" json:"vars,omitempty"`
	// +optional
	Tags *_struct.Struct `protobuf:"bytes,5,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *UpdatePublicDataTableRequest) Reset() {
	*x = UpdatePublicDataTableRequest{}
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePublicDataTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePublicDataTableRequest) ProtoMessage() {}

func (x *UpdatePublicDataTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePublicDataTableRequest.ProtoReflect.Descriptor instead.
func (*UpdatePublicDataTableRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{13}
}

func (x *UpdatePublicDataTableRequest) GetDataTableId() string {
	if x != nil {
		return x.DataTableId
	}
	return ""
}

func (x *UpdatePublicDataTableRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePublicDataTableRequest) GetOptions() *_struct.Struct {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *UpdatePublicDataTableRequest) GetVars() *_struct.Struct {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *UpdatePublicDataTableRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

type PublicDataTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataTableId string `protobuf:"bytes,1,opt,name=data_table_id,json=dataTableId,proto3" json:"data_table_id,omitempty"`
}

func (x *PublicDataTableRequest) Reset() {
	*x = PublicDataTableRequest{}
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicDataTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicDataTableRequest) ProtoMessage() {}

func (x *PublicDataTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicDataTableRequest.ProtoReflect.Descriptor instead.
func (*PublicDataTableRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{14}
}

func (x *PublicDataTableRequest) GetDataTableId() string {
	if x != nil {
		return x.DataTableId
	}
	return ""
}

type LoadPublicDataTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataTableId string                                 `protobuf:"bytes,1,opt,name=data_table_id,json=dataTableId,proto3" json:"data_table_id,omitempty"`
	Granularity LoadPublicDataTableRequest_Granularity `protobuf:"varint,2,opt,name=granularity,proto3,enum=spaceone.api.dashboard.v1.LoadPublicDataTableRequest_Granularity" json:"granularity,omitempty"`
	// +optional
	Start string `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	// +optional
	End string `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	// +optional
	Sort []*v2.Sort `protobuf:"bytes,5,rep,name=sort,proto3" json:"sort,omitempty"`
	// +optional
	Page *v2.Page `protobuf:"bytes,6,opt,name=page,proto3" json:"page,omitempty"`
	// +optional
	Vars *_struct.Struct `protobuf:"bytes,7,opt,name=vars,proto3" json:"vars,omitempty"`
}

func (x *LoadPublicDataTableRequest) Reset() {
	*x = LoadPublicDataTableRequest{}
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadPublicDataTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadPublicDataTableRequest) ProtoMessage() {}

func (x *LoadPublicDataTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadPublicDataTableRequest.ProtoReflect.Descriptor instead.
func (*LoadPublicDataTableRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{15}
}

func (x *LoadPublicDataTableRequest) GetDataTableId() string {
	if x != nil {
		return x.DataTableId
	}
	return ""
}

func (x *LoadPublicDataTableRequest) GetGranularity() LoadPublicDataTableRequest_Granularity {
	if x != nil {
		return x.Granularity
	}
	return LoadPublicDataTableRequest_GRANULARITY_NONE
}

func (x *LoadPublicDataTableRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *LoadPublicDataTableRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *LoadPublicDataTableRequest) GetSort() []*v2.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *LoadPublicDataTableRequest) GetPage() *v2.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *LoadPublicDataTableRequest) GetVars() *_struct.Struct {
	if x != nil {
		return x.Vars
	}
	return nil
}

type PublicDataTableQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +optional
	Query    *v2.Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	WidgetId string    `protobuf:"bytes,2,opt,name=widget_id,json=widgetId,proto3" json:"widget_id,omitempty"`
	// +optional
	DataTableId string `protobuf:"bytes,3,opt,name=data_table_id,json=dataTableId,proto3" json:"data_table_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	DataType DataType `protobuf:"varint,5,opt,name=data_type,json=dataType,proto3,enum=spaceone.api.dashboard.v1.DataType" json:"data_type,omitempty"`
	// +optional
	SourceType SourceType `protobuf:"varint,6,opt,name=source_type,json=sourceType,proto3,enum=spaceone.api.dashboard.v1.SourceType" json:"source_type,omitempty"`
	// +optional
	Operator Operator `protobuf:"varint,7,opt,name=operator,proto3,enum=spaceone.api.dashboard.v1.Operator" json:"operator,omitempty"`
}

func (x *PublicDataTableQuery) Reset() {
	*x = PublicDataTableQuery{}
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicDataTableQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicDataTableQuery) ProtoMessage() {}

func (x *PublicDataTableQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicDataTableQuery.ProtoReflect.Descriptor instead.
func (*PublicDataTableQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{16}
}

func (x *PublicDataTableQuery) GetQuery() *v2.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *PublicDataTableQuery) GetWidgetId() string {
	if x != nil {
		return x.WidgetId
	}
	return ""
}

func (x *PublicDataTableQuery) GetDataTableId() string {
	if x != nil {
		return x.DataTableId
	}
	return ""
}

func (x *PublicDataTableQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublicDataTableQuery) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_DATA_TYPE_NONE
}

func (x *PublicDataTableQuery) GetSourceType() SourceType {
	if x != nil {
		return x.SourceType
	}
	return SourceType_SOURCE_TYPE_NONE
}

func (x *PublicDataTableQuery) GetOperator() Operator {
	if x != nil {
		return x.Operator
	}
	return Operator_OPERATOR_NONE
}

type PublicDataTableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataTableId   string                            `protobuf:"bytes,1,opt,name=data_table_id,json=dataTableId,proto3" json:"data_table_id,omitempty"`
	Name          string                            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	State         PublicDataTableInfo_State         `protobuf:"varint,3,opt,name=state,proto3,enum=spaceone.api.dashboard.v1.PublicDataTableInfo_State" json:"state,omitempty"`
	DataType      DataType                          `protobuf:"varint,4,opt,name=data_type,json=dataType,proto3,enum=spaceone.api.dashboard.v1.DataType" json:"data_type,omitempty"`
	SourceType    SourceType                        `protobuf:"varint,5,opt,name=source_type,json=sourceType,proto3,enum=spaceone.api.dashboard.v1.SourceType" json:"source_type,omitempty"`
	Operator      Operator                          `protobuf:"varint,6,opt,name=operator,proto3,enum=spaceone.api.dashboard.v1.Operator" json:"operator,omitempty"`
	Options       *_struct.Struct                   `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
	Tags          *_struct.Struct                   `protobuf:"bytes,8,opt,name=tags,proto3" json:"tags,omitempty"`
	LabelsInfo    *_struct.Struct                   `protobuf:"bytes,9,opt,name=labels_info,json=labelsInfo,proto3" json:"labels_info,omitempty"`
	DataInfo      *_struct.Struct                   `protobuf:"bytes,10,opt,name=data_info,json=dataInfo,proto3" json:"data_info,omitempty"`
	ErrorMessage  string                            `protobuf:"bytes,11,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ResourceGroup PublicDataTableInfo_ResourceGroup `protobuf:"varint,20,opt,name=resource_group,json=resourceGroup,proto3,enum=spaceone.api.dashboard.v1.PublicDataTableInfo_ResourceGroup" json:"resource_group,omitempty"`
	DomainId      string                            `protobuf:"bytes,21,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WorkspaceId   string                            `protobuf:"bytes,22,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	ProjectId     string                            `protobuf:"bytes,23,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DashboardId   string                            `protobuf:"bytes,24,opt,name=dashboard_id,json=dashboardId,proto3" json:"dashboard_id,omitempty"`
	WidgetId      string                            `protobuf:"bytes,25,opt,name=widget_id,json=widgetId,proto3" json:"widget_id,omitempty"`
	CreatedAt     string                            `protobuf:"bytes,31,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     string                            `protobuf:"bytes,32,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *PublicDataTableInfo) Reset() {
	*x = PublicDataTableInfo{}
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicDataTableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicDataTableInfo) ProtoMessage() {}

func (x *PublicDataTableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicDataTableInfo.ProtoReflect.Descriptor instead.
func (*PublicDataTableInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{17}
}

func (x *PublicDataTableInfo) GetDataTableId() string {
	if x != nil {
		return x.DataTableId
	}
	return ""
}

func (x *PublicDataTableInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublicDataTableInfo) GetState() PublicDataTableInfo_State {
	if x != nil {
		return x.State
	}
	return PublicDataTableInfo_STATE_NONE
}

func (x *PublicDataTableInfo) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_DATA_TYPE_NONE
}

func (x *PublicDataTableInfo) GetSourceType() SourceType {
	if x != nil {
		return x.SourceType
	}
	return SourceType_SOURCE_TYPE_NONE
}

func (x *PublicDataTableInfo) GetOperator() Operator {
	if x != nil {
		return x.Operator
	}
	return Operator_OPERATOR_NONE
}

func (x *PublicDataTableInfo) GetOptions() *_struct.Struct {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *PublicDataTableInfo) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PublicDataTableInfo) GetLabelsInfo() *_struct.Struct {
	if x != nil {
		return x.LabelsInfo
	}
	return nil
}

func (x *PublicDataTableInfo) GetDataInfo() *_struct.Struct {
	if x != nil {
		return x.DataInfo
	}
	return nil
}

func (x *PublicDataTableInfo) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *PublicDataTableInfo) GetResourceGroup() PublicDataTableInfo_ResourceGroup {
	if x != nil {
		return x.ResourceGroup
	}
	return PublicDataTableInfo_RESOURCE_GROUP_NONE
}

func (x *PublicDataTableInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *PublicDataTableInfo) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *PublicDataTableInfo) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PublicDataTableInfo) GetDashboardId() string {
	if x != nil {
		return x.DashboardId
	}
	return ""
}

func (x *PublicDataTableInfo) GetWidgetId() string {
	if x != nil {
		return x.WidgetId
	}
	return ""
}

func (x *PublicDataTableInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *PublicDataTableInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type PublicDataTablesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results    []*PublicDataTableInfo `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TotalCount int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *PublicDataTablesInfo) Reset() {
	*x = PublicDataTablesInfo{}
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicDataTablesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicDataTablesInfo) ProtoMessage() {}

func (x *PublicDataTablesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicDataTablesInfo.ProtoReflect.Descriptor instead.
func (*PublicDataTablesInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP(), []int{18}
}

func (x *PublicDataTablesInfo) GetResults() []*PublicDataTableInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *PublicDataTablesInfo) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

var File_spaceone_api_dashboard_v1_public_data_table_proto protoreflect.FileDescriptor

var file_spaceone_api_dashboard_v1_public_data_table_proto_rawDesc = []byte{
	0x0a, 0x31, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x19, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64,
	0x22, 0x7d, 0x0a, 0x0a, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79,
	0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0xbe, 0x01, 0x0a, 0x0c, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x03, 0x68, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x03, 0x68, 0x6f, 0x77, 0x22, 0x49, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x10, 0x04,
	0x22, 0x31, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x22, 0x53, 0x0a,
	0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x74, 0x0a, 0x10, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x0d, 0x50, 0x69, 0x76,
	0x6f, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65,
	0x44, 0x69, 0x66, 0x66, 0x12, 0x16, 0x0a, 0x05, 0x79, 0x65, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x79, 0x65, 0x61, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x06,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69,
	0x66, 0x66, 0x22, 0x8d, 0x05, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3e, 0x0a, 0x05, 0x41, 0x53, 0x53, 0x45, 0x54, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x05, 0x41, 0x53, 0x53, 0x45,
	0x54, 0x12, 0x3b, 0x0a, 0x04, 0x43, 0x4f, 0x53, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x04, 0x43, 0x4f, 0x53, 0x54, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12,
	0x34, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x6f, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x72,
	0x12, 0x51, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x64, 0x69, 0x66, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x66, 0x66,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x66, 0x66, 0x22, 0x3c, 0x0a, 0x0a, 0x44, 0x61,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45,
	0x50, 0x41, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0xb7, 0x03, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x4a, 0x4f, 0x49, 0x4e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x04, 0x4a, 0x4f, 0x49, 0x4e, 0x12, 0x43, 0x0a, 0x06, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x06, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54, 0x12, 0x4c, 0x0a, 0x09, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x09,
	0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x12, 0x40, 0x0a, 0x05, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x51, 0x55, 0x45, 0x52, 0x59, 0x12, 0x41, 0x0a, 0x04, 0x45,
	0x56, 0x41, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x04, 0x45, 0x56, 0x41, 0x4c, 0x12, 0x40,
	0x0a, 0x05, 0x50, 0x49, 0x56, 0x4f, 0x54, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x50, 0x49, 0x56, 0x4f, 0x54,
	0x42, 0x0a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xaf, 0x02, 0x0a,
	0x19, 0x41, 0x64, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x76, 0x61, 0x72,
	0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xb4,
	0x02, 0x0a, 0x1f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x76,
	0x61, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2b, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x12, 0x2b,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x3c, 0x0a, 0x16, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xa3, 0x03, 0x0a, 0x1a, 0x4c, 0x6f,
	0x61, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x0b,
	0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x41, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x76, 0x61, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x22, 0x47, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x52, 0x41, 0x4e, 0x55, 0x4c, 0x41,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44,
	0x41, 0x49, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c,
	0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x59, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x10, 0x03, 0x22,
	0xe9, 0x02, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xa6, 0x08, 0x0a, 0x13,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3f, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x50, 0x0a, 0x0d, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x03, 0x22, 0x37, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x02, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x3a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x44, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0x37, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x53, 0x53, 0x45,
	0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x2a, 0x62, 0x0a,
	0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04,
	0x45, 0x56, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x49, 0x56, 0x4f, 0x54, 0x10,
	0x06, 0x32, 0xd0, 0x08, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x12, 0x34, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23,
	0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f,
	0x61, 0x64, 0x64, 0x12, 0xad, 0x01, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x3a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x34, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x64,
	0x61, 0x74, 0x61, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0xa4, 0x01, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x37,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a,
	0x01, 0x2a, 0x22, 0x26, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x06, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x35, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x2f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x64, 0x61,
	0x74, 0x61, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x98, 0x01,
	0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28,
	0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x12, 0x99, 0x01, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x1a, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24,
	0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x72, 0x65, 0x74, 0x2d, 0x69, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescOnce sync.Once
	file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescData = file_spaceone_api_dashboard_v1_public_data_table_proto_rawDesc
)

func file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescGZIP() []byte {
	file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescOnce.Do(func() {
		file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescData = protoimpl.X.CompressGZIP(file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescData)
	})
	return file_spaceone_api_dashboard_v1_public_data_table_proto_rawDescData
}

var file_spaceone_api_dashboard_v1_public_data_table_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_spaceone_api_dashboard_v1_public_data_table_proto_goTypes = []any{
	(DataType)(0),                               // 0: spaceone.api.dashboard.v1.DataType
	(SourceType)(0),                             // 1: spaceone.api.dashboard.v1.SourceType
	(Operator)(0),                               // 2: spaceone.api.dashboard.v1.Operator
	(JoinOperator_JoinType)(0),                  // 3: spaceone.api.dashboard.v1.JoinOperator.JoinType
	(AddOptions_DateFormat)(0),                  // 4: spaceone.api.dashboard.v1.AddOptions.DateFormat
	(LoadPublicDataTableRequest_Granularity)(0), // 5: spaceone.api.dashboard.v1.LoadPublicDataTableRequest.Granularity
	(PublicDataTableInfo_ResourceGroup)(0),      // 6: spaceone.api.dashboard.v1.PublicDataTableInfo.ResourceGroup
	(PublicDataTableInfo_State)(0),              // 7: spaceone.api.dashboard.v1.PublicDataTableInfo.State
	(*AssetSource)(nil),                         // 8: spaceone.api.dashboard.v1.AssetSource
	(*CostSource)(nil),                          // 9: spaceone.api.dashboard.v1.CostSource
	(*JoinOperator)(nil),                        // 10: spaceone.api.dashboard.v1.JoinOperator
	(*ConcatOperator)(nil),                      // 11: spaceone.api.dashboard.v1.ConcatOperator
	(*AggregateOperator)(nil),                   // 12: spaceone.api.dashboard.v1.AggregateOperator
	(*QueryOperator)(nil),                       // 13: spaceone.api.dashboard.v1.QueryOperator
	(*EvaluateOperator)(nil),                    // 14: spaceone.api.dashboard.v1.EvaluateOperator
	(*PivotOperator)(nil),                       // 15: spaceone.api.dashboard.v1.PivotOperator
	(*TimeDiff)(nil),                            // 16: spaceone.api.dashboard.v1.TimeDiff
	(*AddOptions)(nil),                          // 17: spaceone.api.dashboard.v1.AddOptions
	(*TransformOptions)(nil),                    // 18: spaceone.api.dashboard.v1.TransformOptions
	(*AddPublicDataTableRequest)(nil),           // 19: spaceone.api.dashboard.v1.AddPublicDataTableRequest
	(*TransformPublicDataTableRequest)(nil),     // 20: spaceone.api.dashboard.v1.TransformPublicDataTableRequest
	(*UpdatePublicDataTableRequest)(nil),        // 21: spaceone.api.dashboard.v1.UpdatePublicDataTableRequest
	(*PublicDataTableRequest)(nil),              // 22: spaceone.api.dashboard.v1.PublicDataTableRequest
	(*LoadPublicDataTableRequest)(nil),          // 23: spaceone.api.dashboard.v1.LoadPublicDataTableRequest
	(*PublicDataTableQuery)(nil),                // 24: spaceone.api.dashboard.v1.PublicDataTableQuery
	(*PublicDataTableInfo)(nil),                 // 25: spaceone.api.dashboard.v1.PublicDataTableInfo
	(*PublicDataTablesInfo)(nil),                // 26: spaceone.api.dashboard.v1.PublicDataTablesInfo
	(*_struct.Struct)(nil),                      // 27: google.protobuf.Struct
	(*_struct.ListValue)(nil),                   // 28: google.protobuf.ListValue
	(*v2.Filter)(nil),                           // 29: spaceone.api.core.v2.Filter
	(*v2.Sort)(nil),                             // 30: spaceone.api.core.v2.Sort
	(*v2.Page)(nil),                             // 31: spaceone.api.core.v2.Page
	(*v2.Query)(nil),                            // 32: spaceone.api.core.v2.Query
	(*empty.Empty)(nil),                         // 33: google.protobuf.Empty
}
var file_spaceone_api_dashboard_v1_public_data_table_proto_depIdxs = []int32{
	3,  // 0: spaceone.api.dashboard.v1.JoinOperator.how:type_name -> spaceone.api.dashboard.v1.JoinOperator.JoinType
	27, // 1: spaceone.api.dashboard.v1.AggregateOperator.function:type_name -> google.protobuf.Struct
	28, // 2: spaceone.api.dashboard.v1.EvaluateOperator.expressions:type_name -> google.protobuf.ListValue
	8,  // 3: spaceone.api.dashboard.v1.AddOptions.ASSET:type_name -> spaceone.api.dashboard.v1.AssetSource
	9,  // 4: spaceone.api.dashboard.v1.AddOptions.COST:type_name -> spaceone.api.dashboard.v1.CostSource
	28, // 5: spaceone.api.dashboard.v1.AddOptions.group_by:type_name -> google.protobuf.ListValue
	29, // 6: spaceone.api.dashboard.v1.AddOptions.filter:type_name -> spaceone.api.core.v2.Filter
	29, // 7: spaceone.api.dashboard.v1.AddOptions.filter_or:type_name -> spaceone.api.core.v2.Filter
	4,  // 8: spaceone.api.dashboard.v1.AddOptions.date_format:type_name -> spaceone.api.dashboard.v1.AddOptions.DateFormat
	27, // 9: spaceone.api.dashboard.v1.AddOptions.additional_labels:type_name -> google.protobuf.Struct
	16, // 10: spaceone.api.dashboard.v1.AddOptions.timediff:type_name -> spaceone.api.dashboard.v1.TimeDiff
	10, // 11: spaceone.api.dashboard.v1.TransformOptions.JOIN:type_name -> spaceone.api.dashboard.v1.JoinOperator
	11, // 12: spaceone.api.dashboard.v1.TransformOptions.CONCAT:type_name -> spaceone.api.dashboard.v1.ConcatOperator
	12, // 13: spaceone.api.dashboard.v1.TransformOptions.AGGREGATE:type_name -> spaceone.api.dashboard.v1.AggregateOperator
	13, // 14: spaceone.api.dashboard.v1.TransformOptions.QUERY:type_name -> spaceone.api.dashboard.v1.QueryOperator
	14, // 15: spaceone.api.dashboard.v1.TransformOptions.EVAL:type_name -> spaceone.api.dashboard.v1.EvaluateOperator
	15, // 16: spaceone.api.dashboard.v1.TransformOptions.PIVOT:type_name -> spaceone.api.dashboard.v1.PivotOperator
	1,  // 17: spaceone.api.dashboard.v1.AddPublicDataTableRequest.source_type:type_name -> spaceone.api.dashboard.v1.SourceType
	17, // 18: spaceone.api.dashboard.v1.AddPublicDataTableRequest.options:type_name -> spaceone.api.dashboard.v1.AddOptions
	27, // 19: spaceone.api.dashboard.v1.AddPublicDataTableRequest.vars:type_name -> google.protobuf.Struct
	27, // 20: spaceone.api.dashboard.v1.AddPublicDataTableRequest.tags:type_name -> google.protobuf.Struct
	2,  // 21: spaceone.api.dashboard.v1.TransformPublicDataTableRequest.operator:type_name -> spaceone.api.dashboard.v1.Operator
	18, // 22: spaceone.api.dashboard.v1.TransformPublicDataTableRequest.options:type_name -> spaceone.api.dashboard.v1.TransformOptions
	27, // 23: spaceone.api.dashboard.v1.TransformPublicDataTableRequest.vars:type_name -> google.protobuf.Struct
	27, // 24: spaceone.api.dashboard.v1.TransformPublicDataTableRequest.tags:type_name -> google.protobuf.Struct
	27, // 25: spaceone.api.dashboard.v1.UpdatePublicDataTableRequest.options:type_name -> google.protobuf.Struct
	27, // 26: spaceone.api.dashboard.v1.UpdatePublicDataTableRequest.vars:type_name -> google.protobuf.Struct
	27, // 27: spaceone.api.dashboard.v1.UpdatePublicDataTableRequest.tags:type_name -> google.protobuf.Struct
	5,  // 28: spaceone.api.dashboard.v1.LoadPublicDataTableRequest.granularity:type_name -> spaceone.api.dashboard.v1.LoadPublicDataTableRequest.Granularity
	30, // 29: spaceone.api.dashboard.v1.LoadPublicDataTableRequest.sort:type_name -> spaceone.api.core.v2.Sort
	31, // 30: spaceone.api.dashboard.v1.LoadPublicDataTableRequest.page:type_name -> spaceone.api.core.v2.Page
	27, // 31: spaceone.api.dashboard.v1.LoadPublicDataTableRequest.vars:type_name -> google.protobuf.Struct
	32, // 32: spaceone.api.dashboard.v1.PublicDataTableQuery.query:type_name -> spaceone.api.core.v2.Query
	0,  // 33: spaceone.api.dashboard.v1.PublicDataTableQuery.data_type:type_name -> spaceone.api.dashboard.v1.DataType
	1,  // 34: spaceone.api.dashboard.v1.PublicDataTableQuery.source_type:type_name -> spaceone.api.dashboard.v1.SourceType
	2,  // 35: spaceone.api.dashboard.v1.PublicDataTableQuery.operator:type_name -> spaceone.api.dashboard.v1.Operator
	7,  // 36: spaceone.api.dashboard.v1.PublicDataTableInfo.state:type_name -> spaceone.api.dashboard.v1.PublicDataTableInfo.State
	0,  // 37: spaceone.api.dashboard.v1.PublicDataTableInfo.data_type:type_name -> spaceone.api.dashboard.v1.DataType
	1,  // 38: spaceone.api.dashboard.v1.PublicDataTableInfo.source_type:type_name -> spaceone.api.dashboard.v1.SourceType
	2,  // 39: spaceone.api.dashboard.v1.PublicDataTableInfo.operator:type_name -> spaceone.api.dashboard.v1.Operator
	27, // 40: spaceone.api.dashboard.v1.PublicDataTableInfo.options:type_name -> google.protobuf.Struct
	27, // 41: spaceone.api.dashboard.v1.PublicDataTableInfo.tags:type_name -> google.protobuf.Struct
	27, // 42: spaceone.api.dashboard.v1.PublicDataTableInfo.labels_info:type_name -> google.protobuf.Struct
	27, // 43: spaceone.api.dashboard.v1.PublicDataTableInfo.data_info:type_name -> google.protobuf.Struct
	6,  // 44: spaceone.api.dashboard.v1.PublicDataTableInfo.resource_group:type_name -> spaceone.api.dashboard.v1.PublicDataTableInfo.ResourceGroup
	25, // 45: spaceone.api.dashboard.v1.PublicDataTablesInfo.results:type_name -> spaceone.api.dashboard.v1.PublicDataTableInfo
	19, // 46: spaceone.api.dashboard.v1.PublicDataTable.add:input_type -> spaceone.api.dashboard.v1.AddPublicDataTableRequest
	20, // 47: spaceone.api.dashboard.v1.PublicDataTable.transform:input_type -> spaceone.api.dashboard.v1.TransformPublicDataTableRequest
	21, // 48: spaceone.api.dashboard.v1.PublicDataTable.update:input_type -> spaceone.api.dashboard.v1.UpdatePublicDataTableRequest
	22, // 49: spaceone.api.dashboard.v1.PublicDataTable.delete:input_type -> spaceone.api.dashboard.v1.PublicDataTableRequest
	23, // 50: spaceone.api.dashboard.v1.PublicDataTable.load:input_type -> spaceone.api.dashboard.v1.LoadPublicDataTableRequest
	22, // 51: spaceone.api.dashboard.v1.PublicDataTable.get:input_type -> spaceone.api.dashboard.v1.PublicDataTableRequest
	24, // 52: spaceone.api.dashboard.v1.PublicDataTable.list:input_type -> spaceone.api.dashboard.v1.PublicDataTableQuery
	25, // 53: spaceone.api.dashboard.v1.PublicDataTable.add:output_type -> spaceone.api.dashboard.v1.PublicDataTableInfo
	25, // 54: spaceone.api.dashboard.v1.PublicDataTable.transform:output_type -> spaceone.api.dashboard.v1.PublicDataTableInfo
	25, // 55: spaceone.api.dashboard.v1.PublicDataTable.update:output_type -> spaceone.api.dashboard.v1.PublicDataTableInfo
	33, // 56: spaceone.api.dashboard.v1.PublicDataTable.delete:output_type -> google.protobuf.Empty
	27, // 57: spaceone.api.dashboard.v1.PublicDataTable.load:output_type -> google.protobuf.Struct
	25, // 58: spaceone.api.dashboard.v1.PublicDataTable.get:output_type -> spaceone.api.dashboard.v1.PublicDataTableInfo
	26, // 59: spaceone.api.dashboard.v1.PublicDataTable.list:output_type -> spaceone.api.dashboard.v1.PublicDataTablesInfo
	53, // [53:60] is the sub-list for method output_type
	46, // [46:53] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_spaceone_api_dashboard_v1_public_data_table_proto_init() }
func file_spaceone_api_dashboard_v1_public_data_table_proto_init() {
	if File_spaceone_api_dashboard_v1_public_data_table_proto != nil {
		return
	}
	file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[1].OneofWrappers = []any{
		(*CostSource_DataSourceId)(nil),
		(*CostSource_PluginId)(nil),
	}
	file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[8].OneofWrappers = []any{
		(*TimeDiff_Years)(nil),
		(*TimeDiff_Months)(nil),
	}
	file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[9].OneofWrappers = []any{
		(*AddOptions_ASSET)(nil),
		(*AddOptions_COST)(nil),
	}
	file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes[10].OneofWrappers = []any{
		(*TransformOptions_JOIN)(nil),
		(*TransformOptions_CONCAT)(nil),
		(*TransformOptions_AGGREGATE)(nil),
		(*TransformOptions_QUERY)(nil),
		(*TransformOptions_EVAL)(nil),
		(*TransformOptions_PIVOT)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spaceone_api_dashboard_v1_public_data_table_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spaceone_api_dashboard_v1_public_data_table_proto_goTypes,
		DependencyIndexes: file_spaceone_api_dashboard_v1_public_data_table_proto_depIdxs,
		EnumInfos:         file_spaceone_api_dashboard_v1_public_data_table_proto_enumTypes,
		MessageInfos:      file_spaceone_api_dashboard_v1_public_data_table_proto_msgTypes,
	}.Build()
	File_spaceone_api_dashboard_v1_public_data_table_proto = out.File
	file_spaceone_api_dashboard_v1_public_data_table_proto_rawDesc = nil
	file_spaceone_api_dashboard_v1_public_data_table_proto_goTypes = nil
	file_spaceone_api_dashboard_v1_public_data_table_proto_depIdxs = nil
}
