// description of dashboard

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: spaceone/api/dashboard/v1/dashboard.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dashboard_Create_FullMethodName        = "/spaceone.api.dashboard.v1.Dashboard/create"
	Dashboard_Update_FullMethodName        = "/spaceone.api.dashboard.v1.Dashboard/update"
	Dashboard_Delete_FullMethodName        = "/spaceone.api.dashboard.v1.Dashboard/delete"
	Dashboard_Get_FullMethodName           = "/spaceone.api.dashboard.v1.Dashboard/get"
	Dashboard_DeleteVersion_FullMethodName = "/spaceone.api.dashboard.v1.Dashboard/delete_version"
	Dashboard_RevertVersion_FullMethodName = "/spaceone.api.dashboard.v1.Dashboard/revert_version"
	Dashboard_GetVersion_FullMethodName    = "/spaceone.api.dashboard.v1.Dashboard/get_version"
	Dashboard_ListVersions_FullMethodName  = "/spaceone.api.dashboard.v1.Dashboard/list_versions"
	Dashboard_List_FullMethodName          = "/spaceone.api.dashboard.v1.Dashboard/list"
	Dashboard_Stat_FullMethodName          = "/spaceone.api.dashboard.v1.Dashboard/stat"
)

// DashboardClient is the client API for Dashboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardClient interface {
	Create(ctx context.Context, in *CreateDashboardRequest, opts ...grpc.CallOption) (*DashboardInfo, error)
	Update(ctx context.Context, in *UpdateDashboardRequest, opts ...grpc.CallOption) (*DashboardInfo, error)
	Delete(ctx context.Context, in *DashboardRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *DashboardRequest, opts ...grpc.CallOption) (*DashboardInfo, error)
	DeleteVersion(ctx context.Context, in *DashboardVersionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RevertVersion(ctx context.Context, in *DashboardVersionRequest, opts ...grpc.CallOption) (*DashboardInfo, error)
	GetVersion(ctx context.Context, in *DashboardVersionRequest, opts ...grpc.CallOption) (*DashboardVersionInfo, error)
	ListVersions(ctx context.Context, in *DashboardVersionSearchQuery, opts ...grpc.CallOption) (*DashboardVersionsInfo, error)
	List(ctx context.Context, in *DashboardQuery, opts ...grpc.CallOption) (*DashboardsInfo, error)
	Stat(ctx context.Context, in *DashboardStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type dashboardClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardClient(cc grpc.ClientConnInterface) DashboardClient {
	return &dashboardClient{cc}
}

func (c *dashboardClient) Create(ctx context.Context, in *CreateDashboardRequest, opts ...grpc.CallOption) (*DashboardInfo, error) {
	out := new(DashboardInfo)
	err := c.cc.Invoke(ctx, Dashboard_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) Update(ctx context.Context, in *UpdateDashboardRequest, opts ...grpc.CallOption) (*DashboardInfo, error) {
	out := new(DashboardInfo)
	err := c.cc.Invoke(ctx, Dashboard_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) Delete(ctx context.Context, in *DashboardRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Dashboard_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) Get(ctx context.Context, in *DashboardRequest, opts ...grpc.CallOption) (*DashboardInfo, error) {
	out := new(DashboardInfo)
	err := c.cc.Invoke(ctx, Dashboard_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) DeleteVersion(ctx context.Context, in *DashboardVersionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Dashboard_DeleteVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) RevertVersion(ctx context.Context, in *DashboardVersionRequest, opts ...grpc.CallOption) (*DashboardInfo, error) {
	out := new(DashboardInfo)
	err := c.cc.Invoke(ctx, Dashboard_RevertVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) GetVersion(ctx context.Context, in *DashboardVersionRequest, opts ...grpc.CallOption) (*DashboardVersionInfo, error) {
	out := new(DashboardVersionInfo)
	err := c.cc.Invoke(ctx, Dashboard_GetVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) ListVersions(ctx context.Context, in *DashboardVersionSearchQuery, opts ...grpc.CallOption) (*DashboardVersionsInfo, error) {
	out := new(DashboardVersionsInfo)
	err := c.cc.Invoke(ctx, Dashboard_ListVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) List(ctx context.Context, in *DashboardQuery, opts ...grpc.CallOption) (*DashboardsInfo, error) {
	out := new(DashboardsInfo)
	err := c.cc.Invoke(ctx, Dashboard_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) Stat(ctx context.Context, in *DashboardStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Dashboard_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardServer is the server API for Dashboard service.
// All implementations must embed UnimplementedDashboardServer
// for forward compatibility
type DashboardServer interface {
	Create(context.Context, *CreateDashboardRequest) (*DashboardInfo, error)
	Update(context.Context, *UpdateDashboardRequest) (*DashboardInfo, error)
	Delete(context.Context, *DashboardRequest) (*empty.Empty, error)
	Get(context.Context, *DashboardRequest) (*DashboardInfo, error)
	DeleteVersion(context.Context, *DashboardVersionRequest) (*empty.Empty, error)
	RevertVersion(context.Context, *DashboardVersionRequest) (*DashboardInfo, error)
	GetVersion(context.Context, *DashboardVersionRequest) (*DashboardVersionInfo, error)
	ListVersions(context.Context, *DashboardVersionSearchQuery) (*DashboardVersionsInfo, error)
	List(context.Context, *DashboardQuery) (*DashboardsInfo, error)
	Stat(context.Context, *DashboardStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedDashboardServer()
}

// UnimplementedDashboardServer must be embedded to have forward compatible implementations.
type UnimplementedDashboardServer struct {
}

func (UnimplementedDashboardServer) Create(context.Context, *CreateDashboardRequest) (*DashboardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDashboardServer) Update(context.Context, *UpdateDashboardRequest) (*DashboardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDashboardServer) Delete(context.Context, *DashboardRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDashboardServer) Get(context.Context, *DashboardRequest) (*DashboardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDashboardServer) DeleteVersion(context.Context, *DashboardVersionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVersion not implemented")
}
func (UnimplementedDashboardServer) RevertVersion(context.Context, *DashboardVersionRequest) (*DashboardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertVersion not implemented")
}
func (UnimplementedDashboardServer) GetVersion(context.Context, *DashboardVersionRequest) (*DashboardVersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedDashboardServer) ListVersions(context.Context, *DashboardVersionSearchQuery) (*DashboardVersionsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVersions not implemented")
}
func (UnimplementedDashboardServer) List(context.Context, *DashboardQuery) (*DashboardsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDashboardServer) Stat(context.Context, *DashboardStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedDashboardServer) mustEmbedUnimplementedDashboardServer() {}

// UnsafeDashboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardServer will
// result in compilation errors.
type UnsafeDashboardServer interface {
	mustEmbedUnimplementedDashboardServer()
}

func RegisterDashboardServer(s grpc.ServiceRegistrar, srv DashboardServer) {
	s.RegisterService(&Dashboard_ServiceDesc, srv)
}

func _Dashboard_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).Create(ctx, req.(*CreateDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).Update(ctx, req.(*UpdateDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).Delete(ctx, req.(*DashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).Get(ctx, req.(*DashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_DeleteVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).DeleteVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_DeleteVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).DeleteVersion(ctx, req.(*DashboardVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_RevertVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).RevertVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_RevertVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).RevertVersion(ctx, req.(*DashboardVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).GetVersion(ctx, req.(*DashboardVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_ListVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardVersionSearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).ListVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_ListVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).ListVersions(ctx, req.(*DashboardVersionSearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).List(ctx, req.(*DashboardQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).Stat(ctx, req.(*DashboardStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Dashboard_ServiceDesc is the grpc.ServiceDesc for Dashboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dashboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.dashboard.v1.Dashboard",
	HandlerType: (*DashboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Dashboard_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _Dashboard_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Dashboard_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Dashboard_Get_Handler,
		},
		{
			MethodName: "delete_version",
			Handler:    _Dashboard_DeleteVersion_Handler,
		},
		{
			MethodName: "revert_version",
			Handler:    _Dashboard_RevertVersion_Handler,
		},
		{
			MethodName: "get_version",
			Handler:    _Dashboard_GetVersion_Handler,
		},
		{
			MethodName: "list_versions",
			Handler:    _Dashboard_ListVersions_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Dashboard_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _Dashboard_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/dashboard/v1/dashboard.proto",
}
