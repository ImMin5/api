// description of dashboard

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.6.1
// source: spaceone/api/dashboard/v1/private_dashboard.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PrivateDashboard_Create_FullMethodName = "/spaceone.api.dashboard.v1.PrivateDashboard/create"
	PrivateDashboard_Update_FullMethodName = "/spaceone.api.dashboard.v1.PrivateDashboard/update"
	PrivateDashboard_Delete_FullMethodName = "/spaceone.api.dashboard.v1.PrivateDashboard/delete"
	PrivateDashboard_Get_FullMethodName    = "/spaceone.api.dashboard.v1.PrivateDashboard/get"
	PrivateDashboard_List_FullMethodName   = "/spaceone.api.dashboard.v1.PrivateDashboard/list"
	PrivateDashboard_Stat_FullMethodName   = "/spaceone.api.dashboard.v1.PrivateDashboard/stat"
)

// PrivateDashboardClient is the client API for PrivateDashboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrivateDashboardClient interface {
	Create(ctx context.Context, in *CreatePrivateDashboardRequest, opts ...grpc.CallOption) (*PrivateDashboardInfo, error)
	Update(ctx context.Context, in *UpdatePrivateDashboardRequest, opts ...grpc.CallOption) (*PrivateDashboardInfo, error)
	Delete(ctx context.Context, in *PrivateDashboardRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *PrivateDashboardRequest, opts ...grpc.CallOption) (*PrivateDashboardInfo, error)
	List(ctx context.Context, in *PrivateDashboardQuery, opts ...grpc.CallOption) (*PrivateDashboardsInfo, error)
	Stat(ctx context.Context, in *PrivateDashboardStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type privateDashboardClient struct {
	cc grpc.ClientConnInterface
}

func NewPrivateDashboardClient(cc grpc.ClientConnInterface) PrivateDashboardClient {
	return &privateDashboardClient{cc}
}

func (c *privateDashboardClient) Create(ctx context.Context, in *CreatePrivateDashboardRequest, opts ...grpc.CallOption) (*PrivateDashboardInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrivateDashboardInfo)
	err := c.cc.Invoke(ctx, PrivateDashboard_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateDashboardClient) Update(ctx context.Context, in *UpdatePrivateDashboardRequest, opts ...grpc.CallOption) (*PrivateDashboardInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrivateDashboardInfo)
	err := c.cc.Invoke(ctx, PrivateDashboard_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateDashboardClient) Delete(ctx context.Context, in *PrivateDashboardRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, PrivateDashboard_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateDashboardClient) Get(ctx context.Context, in *PrivateDashboardRequest, opts ...grpc.CallOption) (*PrivateDashboardInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrivateDashboardInfo)
	err := c.cc.Invoke(ctx, PrivateDashboard_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateDashboardClient) List(ctx context.Context, in *PrivateDashboardQuery, opts ...grpc.CallOption) (*PrivateDashboardsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrivateDashboardsInfo)
	err := c.cc.Invoke(ctx, PrivateDashboard_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateDashboardClient) Stat(ctx context.Context, in *PrivateDashboardStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, PrivateDashboard_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateDashboardServer is the server API for PrivateDashboard service.
// All implementations must embed UnimplementedPrivateDashboardServer
// for forward compatibility
type PrivateDashboardServer interface {
	Create(context.Context, *CreatePrivateDashboardRequest) (*PrivateDashboardInfo, error)
	Update(context.Context, *UpdatePrivateDashboardRequest) (*PrivateDashboardInfo, error)
	Delete(context.Context, *PrivateDashboardRequest) (*empty.Empty, error)
	Get(context.Context, *PrivateDashboardRequest) (*PrivateDashboardInfo, error)
	List(context.Context, *PrivateDashboardQuery) (*PrivateDashboardsInfo, error)
	Stat(context.Context, *PrivateDashboardStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedPrivateDashboardServer()
}

// UnimplementedPrivateDashboardServer must be embedded to have forward compatible implementations.
type UnimplementedPrivateDashboardServer struct {
}

func (UnimplementedPrivateDashboardServer) Create(context.Context, *CreatePrivateDashboardRequest) (*PrivateDashboardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPrivateDashboardServer) Update(context.Context, *UpdatePrivateDashboardRequest) (*PrivateDashboardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPrivateDashboardServer) Delete(context.Context, *PrivateDashboardRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPrivateDashboardServer) Get(context.Context, *PrivateDashboardRequest) (*PrivateDashboardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPrivateDashboardServer) List(context.Context, *PrivateDashboardQuery) (*PrivateDashboardsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPrivateDashboardServer) Stat(context.Context, *PrivateDashboardStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedPrivateDashboardServer) mustEmbedUnimplementedPrivateDashboardServer() {}

// UnsafePrivateDashboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrivateDashboardServer will
// result in compilation errors.
type UnsafePrivateDashboardServer interface {
	mustEmbedUnimplementedPrivateDashboardServer()
}

func RegisterPrivateDashboardServer(s grpc.ServiceRegistrar, srv PrivateDashboardServer) {
	s.RegisterService(&PrivateDashboard_ServiceDesc, srv)
}

func _PrivateDashboard_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrivateDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateDashboardServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateDashboard_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateDashboardServer).Create(ctx, req.(*CreatePrivateDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateDashboard_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrivateDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateDashboardServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateDashboard_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateDashboardServer).Update(ctx, req.(*UpdatePrivateDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateDashboard_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateDashboardServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateDashboard_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateDashboardServer).Delete(ctx, req.(*PrivateDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateDashboard_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateDashboardServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateDashboard_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateDashboardServer).Get(ctx, req.(*PrivateDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateDashboard_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateDashboardQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateDashboardServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateDashboard_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateDashboardServer).List(ctx, req.(*PrivateDashboardQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateDashboard_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateDashboardStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateDashboardServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateDashboard_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateDashboardServer).Stat(ctx, req.(*PrivateDashboardStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// PrivateDashboard_ServiceDesc is the grpc.ServiceDesc for PrivateDashboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrivateDashboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.dashboard.v1.PrivateDashboard",
	HandlerType: (*PrivateDashboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _PrivateDashboard_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _PrivateDashboard_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _PrivateDashboard_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _PrivateDashboard_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _PrivateDashboard_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _PrivateDashboard_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/dashboard/v1/private_dashboard.proto",
}
