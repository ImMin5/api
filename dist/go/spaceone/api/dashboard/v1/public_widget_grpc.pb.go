// description of widget

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: spaceone/api/dashboard/v1/public_widget.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PublicWidget_Create_FullMethodName = "/spaceone.api.widget.v1.PublicWidget/create"
	PublicWidget_Update_FullMethodName = "/spaceone.api.widget.v1.PublicWidget/update"
	PublicWidget_Delete_FullMethodName = "/spaceone.api.widget.v1.PublicWidget/delete"
	PublicWidget_Load_FullMethodName   = "/spaceone.api.widget.v1.PublicWidget/load"
	PublicWidget_Get_FullMethodName    = "/spaceone.api.widget.v1.PublicWidget/get"
	PublicWidget_List_FullMethodName   = "/spaceone.api.widget.v1.PublicWidget/list"
)

// PublicWidgetClient is the client API for PublicWidget service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicWidgetClient interface {
	Create(ctx context.Context, in *CreatePublicWidgetRequest, opts ...grpc.CallOption) (*PublicWidgetInfo, error)
	Update(ctx context.Context, in *UpdatePublicWidgetRequest, opts ...grpc.CallOption) (*PublicWidgetInfo, error)
	Delete(ctx context.Context, in *PublicWidgetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Load(ctx context.Context, in *LoadPublicWidgetRequest, opts ...grpc.CallOption) (*PublicWidgetInfo, error)
	Get(ctx context.Context, in *PublicWidgetRequest, opts ...grpc.CallOption) (*PublicWidgetInfo, error)
	List(ctx context.Context, in *PublicWidgetQuery, opts ...grpc.CallOption) (*PublicWidgetsInfo, error)
}

type publicWidgetClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicWidgetClient(cc grpc.ClientConnInterface) PublicWidgetClient {
	return &publicWidgetClient{cc}
}

func (c *publicWidgetClient) Create(ctx context.Context, in *CreatePublicWidgetRequest, opts ...grpc.CallOption) (*PublicWidgetInfo, error) {
	out := new(PublicWidgetInfo)
	err := c.cc.Invoke(ctx, PublicWidget_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicWidgetClient) Update(ctx context.Context, in *UpdatePublicWidgetRequest, opts ...grpc.CallOption) (*PublicWidgetInfo, error) {
	out := new(PublicWidgetInfo)
	err := c.cc.Invoke(ctx, PublicWidget_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicWidgetClient) Delete(ctx context.Context, in *PublicWidgetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, PublicWidget_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicWidgetClient) Load(ctx context.Context, in *LoadPublicWidgetRequest, opts ...grpc.CallOption) (*PublicWidgetInfo, error) {
	out := new(PublicWidgetInfo)
	err := c.cc.Invoke(ctx, PublicWidget_Load_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicWidgetClient) Get(ctx context.Context, in *PublicWidgetRequest, opts ...grpc.CallOption) (*PublicWidgetInfo, error) {
	out := new(PublicWidgetInfo)
	err := c.cc.Invoke(ctx, PublicWidget_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicWidgetClient) List(ctx context.Context, in *PublicWidgetQuery, opts ...grpc.CallOption) (*PublicWidgetsInfo, error) {
	out := new(PublicWidgetsInfo)
	err := c.cc.Invoke(ctx, PublicWidget_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicWidgetServer is the server API for PublicWidget service.
// All implementations must embed UnimplementedPublicWidgetServer
// for forward compatibility
type PublicWidgetServer interface {
	Create(context.Context, *CreatePublicWidgetRequest) (*PublicWidgetInfo, error)
	Update(context.Context, *UpdatePublicWidgetRequest) (*PublicWidgetInfo, error)
	Delete(context.Context, *PublicWidgetRequest) (*empty.Empty, error)
	Load(context.Context, *LoadPublicWidgetRequest) (*PublicWidgetInfo, error)
	Get(context.Context, *PublicWidgetRequest) (*PublicWidgetInfo, error)
	List(context.Context, *PublicWidgetQuery) (*PublicWidgetsInfo, error)
	mustEmbedUnimplementedPublicWidgetServer()
}

// UnimplementedPublicWidgetServer must be embedded to have forward compatible implementations.
type UnimplementedPublicWidgetServer struct {
}

func (UnimplementedPublicWidgetServer) Create(context.Context, *CreatePublicWidgetRequest) (*PublicWidgetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPublicWidgetServer) Update(context.Context, *UpdatePublicWidgetRequest) (*PublicWidgetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPublicWidgetServer) Delete(context.Context, *PublicWidgetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPublicWidgetServer) Load(context.Context, *LoadPublicWidgetRequest) (*PublicWidgetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedPublicWidgetServer) Get(context.Context, *PublicWidgetRequest) (*PublicWidgetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPublicWidgetServer) List(context.Context, *PublicWidgetQuery) (*PublicWidgetsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPublicWidgetServer) mustEmbedUnimplementedPublicWidgetServer() {}

// UnsafePublicWidgetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicWidgetServer will
// result in compilation errors.
type UnsafePublicWidgetServer interface {
	mustEmbedUnimplementedPublicWidgetServer()
}

func RegisterPublicWidgetServer(s grpc.ServiceRegistrar, srv PublicWidgetServer) {
	s.RegisterService(&PublicWidget_ServiceDesc, srv)
}

func _PublicWidget_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePublicWidgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicWidgetServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicWidget_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicWidgetServer).Create(ctx, req.(*CreatePublicWidgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicWidget_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePublicWidgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicWidgetServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicWidget_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicWidgetServer).Update(ctx, req.(*UpdatePublicWidgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicWidget_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicWidgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicWidgetServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicWidget_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicWidgetServer).Delete(ctx, req.(*PublicWidgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicWidget_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadPublicWidgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicWidgetServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicWidget_Load_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicWidgetServer).Load(ctx, req.(*LoadPublicWidgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicWidget_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicWidgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicWidgetServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicWidget_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicWidgetServer).Get(ctx, req.(*PublicWidgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicWidget_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicWidgetQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicWidgetServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicWidget_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicWidgetServer).List(ctx, req.(*PublicWidgetQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicWidget_ServiceDesc is the grpc.ServiceDesc for PublicWidget service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicWidget_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.widget.v1.PublicWidget",
	HandlerType: (*PublicWidgetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _PublicWidget_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _PublicWidget_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _PublicWidget_Delete_Handler,
		},
		{
			MethodName: "load",
			Handler:    _PublicWidget_Load_Handler,
		},
		{
			MethodName: "get",
			Handler:    _PublicWidget_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _PublicWidget_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/dashboard/v1/public_widget.proto",
}
