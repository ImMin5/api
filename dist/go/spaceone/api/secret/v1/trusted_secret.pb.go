// Trusted secret is a resource that stores and manages credentials.
// Trusted secret is merged with linked secret and used to access data in other microservices.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v3.6.1
// source: spaceone/api/secret/v1/trusted_secret.proto

package v1

import (
	v2 "github.com/cloudforet-io/api/dist/go/spaceone/api/core/v2"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateTrustedSecretRequest_ResourceGroup int32

const (
	CreateTrustedSecretRequest_RESOURCE_GROUP_NONE CreateTrustedSecretRequest_ResourceGroup = 0
	CreateTrustedSecretRequest_DOMAIN              CreateTrustedSecretRequest_ResourceGroup = 1
	CreateTrustedSecretRequest_WORKSPACE           CreateTrustedSecretRequest_ResourceGroup = 2
)

// Enum value maps for CreateTrustedSecretRequest_ResourceGroup.
var (
	CreateTrustedSecretRequest_ResourceGroup_name = map[int32]string{
		0: "RESOURCE_GROUP_NONE",
		1: "DOMAIN",
		2: "WORKSPACE",
	}
	CreateTrustedSecretRequest_ResourceGroup_value = map[string]int32{
		"RESOURCE_GROUP_NONE": 0,
		"DOMAIN":              1,
		"WORKSPACE":           2,
	}
)

func (x CreateTrustedSecretRequest_ResourceGroup) Enum() *CreateTrustedSecretRequest_ResourceGroup {
	p := new(CreateTrustedSecretRequest_ResourceGroup)
	*p = x
	return p
}

func (x CreateTrustedSecretRequest_ResourceGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateTrustedSecretRequest_ResourceGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_secret_v1_trusted_secret_proto_enumTypes[0].Descriptor()
}

func (CreateTrustedSecretRequest_ResourceGroup) Type() protoreflect.EnumType {
	return &file_spaceone_api_secret_v1_trusted_secret_proto_enumTypes[0]
}

func (x CreateTrustedSecretRequest_ResourceGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateTrustedSecretRequest_ResourceGroup.Descriptor instead.
func (CreateTrustedSecretRequest_ResourceGroup) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_secret_v1_trusted_secret_proto_rawDescGZIP(), []int{0, 0}
}

type TrustedSecretInfo_ResourceGroup int32

const (
	TrustedSecretInfo_RESOURCE_GROUP_NONE TrustedSecretInfo_ResourceGroup = 0
	TrustedSecretInfo_DOMAIN              TrustedSecretInfo_ResourceGroup = 1
	TrustedSecretInfo_WORKSPACE           TrustedSecretInfo_ResourceGroup = 2
)

// Enum value maps for TrustedSecretInfo_ResourceGroup.
var (
	TrustedSecretInfo_ResourceGroup_name = map[int32]string{
		0: "RESOURCE_GROUP_NONE",
		1: "DOMAIN",
		2: "WORKSPACE",
	}
	TrustedSecretInfo_ResourceGroup_value = map[string]int32{
		"RESOURCE_GROUP_NONE": 0,
		"DOMAIN":              1,
		"WORKSPACE":           2,
	}
)

func (x TrustedSecretInfo_ResourceGroup) Enum() *TrustedSecretInfo_ResourceGroup {
	p := new(TrustedSecretInfo_ResourceGroup)
	*p = x
	return p
}

func (x TrustedSecretInfo_ResourceGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrustedSecretInfo_ResourceGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_secret_v1_trusted_secret_proto_enumTypes[1].Descriptor()
}

func (TrustedSecretInfo_ResourceGroup) Type() protoreflect.EnumType {
	return &file_spaceone_api_secret_v1_trusted_secret_proto_enumTypes[1]
}

func (x TrustedSecretInfo_ResourceGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrustedSecretInfo_ResourceGroup.Descriptor instead.
func (TrustedSecretInfo_ResourceGroup) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_secret_v1_trusted_secret_proto_rawDescGZIP(), []int{7, 0}
}

//	{
//	   "name": "Cloudforet Broker Account - Managed",
//	   "data": "********",
//	   "schema_id": "aws_access_key",
//	   "trusted_account_id": "trusted-sa-123456789012",
//	   "tags": {}
//	   "resource_group": "DOMAIN"
//	}
type CreateTrustedSecretRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data  *_struct.Struct        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// +optional
	SchemaId string `protobuf:"bytes,3,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	// +optional
	Tags          *_struct.Struct                          `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
	ResourceGroup CreateTrustedSecretRequest_ResourceGroup `protobuf:"varint,20,opt,name=resource_group,json=resourceGroup,proto3,enum=spaceone.api.secret.v1.CreateTrustedSecretRequest_ResourceGroup" json:"resource_group,omitempty"`
	// +optional
	WorkspaceId string `protobuf:"bytes,21,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// +optional
	TrustedAccountId string `protobuf:"bytes,22,opt,name=trusted_account_id,json=trustedAccountId,proto3" json:"trusted_account_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateTrustedSecretRequest) Reset() {
	*x = CreateTrustedSecretRequest{}
	mi := &file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTrustedSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTrustedSecretRequest) ProtoMessage() {}

func (x *CreateTrustedSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTrustedSecretRequest.ProtoReflect.Descriptor instead.
func (*CreateTrustedSecretRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_secret_v1_trusted_secret_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTrustedSecretRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTrustedSecretRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateTrustedSecretRequest) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *CreateTrustedSecretRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateTrustedSecretRequest) GetResourceGroup() CreateTrustedSecretRequest_ResourceGroup {
	if x != nil {
		return x.ResourceGroup
	}
	return CreateTrustedSecretRequest_RESOURCE_GROUP_NONE
}

func (x *CreateTrustedSecretRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *CreateTrustedSecretRequest) GetTrustedAccountId() string {
	if x != nil {
		return x.TrustedAccountId
	}
	return ""
}

//	{
//	   "trusted_secret_id": "trusted-secret-123456789012",
//	   "name": "aws-dev2",
//	   "tags": { "a": "b"}
//	}
type UpdateTrustedSecretRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TrustedSecretId string                 `protobuf:"bytes,1,opt,name=trusted_secret_id,json=trustedSecretId,proto3" json:"trusted_secret_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	Tags          *_struct.Struct `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTrustedSecretRequest) Reset() {
	*x = UpdateTrustedSecretRequest{}
	mi := &file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTrustedSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTrustedSecretRequest) ProtoMessage() {}

func (x *UpdateTrustedSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTrustedSecretRequest.ProtoReflect.Descriptor instead.
func (*UpdateTrustedSecretRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_secret_v1_trusted_secret_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateTrustedSecretRequest) GetTrustedSecretId() string {
	if x != nil {
		return x.TrustedSecretId
	}
	return ""
}

func (x *UpdateTrustedSecretRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTrustedSecretRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

//	{
//	   "trusted_secret_id": "trusted-secret-123456789012"
//	}
type TrustedSecretRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TrustedSecretId string                 `protobuf:"bytes,1,opt,name=trusted_secret_id,json=trustedSecretId,proto3" json:"trusted_secret_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TrustedSecretRequest) Reset() {
	*x = TrustedSecretRequest{}
	mi := &file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedSecretRequest) ProtoMessage() {}

func (x *TrustedSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedSecretRequest.ProtoReflect.Descriptor instead.
func (*TrustedSecretRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_secret_v1_trusted_secret_proto_rawDescGZIP(), []int{2}
}

func (x *TrustedSecretRequest) GetTrustedSecretId() string {
	if x != nil {
		return x.TrustedSecretId
	}
	return ""
}

//	{
//	   "trusted_secret_id": "ta-123456789012",
//	   "domain_id": "domain-12345abcde"
//	}
type GetTrustedSecretDataRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TrustedSecretId string                 `protobuf:"bytes,1,opt,name=trusted_secret_id,json=trustedSecretId,proto3" json:"trusted_secret_id,omitempty"`
	DomainId        string                 `protobuf:"bytes,21,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetTrustedSecretDataRequest) Reset() {
	*x = GetTrustedSecretDataRequest{}
	mi := &file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTrustedSecretDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrustedSecretDataRequest) ProtoMessage() {}

func (x *GetTrustedSecretDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrustedSecretDataRequest.ProtoReflect.Descriptor instead.
func (*GetTrustedSecretDataRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_secret_v1_trusted_secret_proto_rawDescGZIP(), []int{3}
}

func (x *GetTrustedSecretDataRequest) GetTrustedSecretId() string {
	if x != nil {
		return x.TrustedSecretId
	}
	return ""
}

func (x *GetTrustedSecretDataRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

//	{
//	   "trusted_secret_id": "trusted-secret-12345abcde",
//	   "data": "********",
//	}
type UpdateTrustedSecretDataRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TrustedSecretId string                 `protobuf:"bytes,1,opt,name=trusted_secret_id,json=trustedSecretId,proto3" json:"trusted_secret_id,omitempty"`
	SchemaId        string                 `protobuf:"bytes,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	Data            *_struct.Struct        `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateTrustedSecretDataRequest) Reset() {
	*x = UpdateTrustedSecretDataRequest{}
	mi := &file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTrustedSecretDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTrustedSecretDataRequest) ProtoMessage() {}

func (x *UpdateTrustedSecretDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTrustedSecretDataRequest.ProtoReflect.Descriptor instead.
func (*UpdateTrustedSecretDataRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_secret_v1_trusted_secret_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateTrustedSecretDataRequest) GetTrustedSecretId() string {
	if x != nil {
		return x.TrustedSecretId
	}
	return ""
}

func (x *UpdateTrustedSecretDataRequest) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *UpdateTrustedSecretDataRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

//	{
//	   "query": {}
//	}
type TrustedSecretQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// +optional
	Query *v2.Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// +optional
	TrustedSecretId string `protobuf:"bytes,2,opt,name=trusted_secret_id,json=trustedSecretId,proto3" json:"trusted_secret_id,omitempty"`
	// / +optional
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	SchemaId string `protobuf:"bytes,4,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	// +optional
	Provider string `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	// +optional
	WorkspaceId string `protobuf:"bytes,21,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// +optional
	TrustedAccountId string `protobuf:"bytes,22,opt,name=trusted_account_id,json=trustedAccountId,proto3" json:"trusted_account_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TrustedSecretQuery) Reset() {
	*x = TrustedSecretQuery{}
	mi := &file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedSecretQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedSecretQuery) ProtoMessage() {}

func (x *TrustedSecretQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedSecretQuery.ProtoReflect.Descriptor instead.
func (*TrustedSecretQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_secret_v1_trusted_secret_proto_rawDescGZIP(), []int{5}
}

func (x *TrustedSecretQuery) GetQuery() *v2.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *TrustedSecretQuery) GetTrustedSecretId() string {
	if x != nil {
		return x.TrustedSecretId
	}
	return ""
}

func (x *TrustedSecretQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrustedSecretQuery) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *TrustedSecretQuery) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *TrustedSecretQuery) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *TrustedSecretQuery) GetTrustedAccountId() string {
	if x != nil {
		return x.TrustedAccountId
	}
	return ""
}

type TrustedSecretDataInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Encrypted      bool                   `protobuf:"varint,1,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	EncryptOptions *_struct.Struct        `protobuf:"bytes,2,opt,name=encrypt_options,json=encryptOptions,proto3" json:"encrypt_options,omitempty"`
	Data           *_struct.Struct        `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TrustedSecretDataInfo) Reset() {
	*x = TrustedSecretDataInfo{}
	mi := &file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedSecretDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedSecretDataInfo) ProtoMessage() {}

func (x *TrustedSecretDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedSecretDataInfo.ProtoReflect.Descriptor instead.
func (*TrustedSecretDataInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_secret_v1_trusted_secret_proto_rawDescGZIP(), []int{6}
}

func (x *TrustedSecretDataInfo) GetEncrypted() bool {
	if x != nil {
		return x.Encrypted
	}
	return false
}

func (x *TrustedSecretDataInfo) GetEncryptOptions() *_struct.Struct {
	if x != nil {
		return x.EncryptOptions
	}
	return nil
}

func (x *TrustedSecretDataInfo) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

//	{
//	   "trusted_secret_id": "trusted-secret-123456789012",
//	   "name": "aws-dev",
//	   "tags": {},
//	   "schema": "aws_access_key",
//	   "provider": "aws",
//	   "resource_group": "DOMAIN",
//	   "trusted_account_id": "ta-123456789012",
//	   "domain_id": "domain-123456789012",
//	   "created_at": "2022-01-01T06:10:14.851Z"
//	}
type TrustedSecretInfo struct {
	state            protoimpl.MessageState          `protogen:"open.v1"`
	TrustedSecretId  string                          `protobuf:"bytes,1,opt,name=trusted_secret_id,json=trustedSecretId,proto3" json:"trusted_secret_id,omitempty"`
	Name             string                          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SchemaId         string                          `protobuf:"bytes,3,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	Tags             *_struct.Struct                 `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
	Provider         string                          `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	ResourceGroup    TrustedSecretInfo_ResourceGroup `protobuf:"varint,20,opt,name=resource_group,json=resourceGroup,proto3,enum=spaceone.api.secret.v1.TrustedSecretInfo_ResourceGroup" json:"resource_group,omitempty"`
	DomainId         string                          `protobuf:"bytes,21,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WorkspaceId      string                          `protobuf:"bytes,22,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	TrustedAccountId string                          `protobuf:"bytes,23,opt,name=trusted_account_id,json=trustedAccountId,proto3" json:"trusted_account_id,omitempty"`
	CreatedAt        string                          `protobuf:"bytes,31,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TrustedSecretInfo) Reset() {
	*x = TrustedSecretInfo{}
	mi := &file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedSecretInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedSecretInfo) ProtoMessage() {}

func (x *TrustedSecretInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedSecretInfo.ProtoReflect.Descriptor instead.
func (*TrustedSecretInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_secret_v1_trusted_secret_proto_rawDescGZIP(), []int{7}
}

func (x *TrustedSecretInfo) GetTrustedSecretId() string {
	if x != nil {
		return x.TrustedSecretId
	}
	return ""
}

func (x *TrustedSecretInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrustedSecretInfo) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *TrustedSecretInfo) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TrustedSecretInfo) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *TrustedSecretInfo) GetResourceGroup() TrustedSecretInfo_ResourceGroup {
	if x != nil {
		return x.ResourceGroup
	}
	return TrustedSecretInfo_RESOURCE_GROUP_NONE
}

func (x *TrustedSecretInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *TrustedSecretInfo) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *TrustedSecretInfo) GetTrustedAccountId() string {
	if x != nil {
		return x.TrustedAccountId
	}
	return ""
}

func (x *TrustedSecretInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

//	{
//	   "results": [
//	       {
//	           "trusted_secret_id": "trusted-secret-12345abcde",
//	           "name": "Cloudforet Broker Account - Managed",
//	           "schema_id": "aws-secret-access-key",
//	           "tags": {"foo": "bar"},
//	           "provider": "aws",
//	           "resource_group": "DOMAIN",
//	           "trusted_account_id": "ta-12345abcde",
//	           "domain_id": "domain-12345abcde",
//	           "created_at": "2022-01-01T06:10:14Z"
//	       },
//	       {
//	           "trusted_secret_id": "trusted-secret-56789abcde",
//	           "name": "Customer Broker Account",
//	           "schema_id": "aws-secret-access-key",
//	           "provider": "aws",
//	           "resource_group": "WORKSPACE",
//	           "trusted_account_id": "ta-56789abcde",
//	           "domain_id": "domain-12345abcde",
//	           "workspace_id": "workspace-12345abcde",
//	           "created_at": "2023-11-04T00:00:00Z"
//	       }
//	   ],
//	   "total_count": 2
//	}
type TrustedSecretsInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*TrustedSecretInfo   `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrustedSecretsInfo) Reset() {
	*x = TrustedSecretsInfo{}
	mi := &file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedSecretsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedSecretsInfo) ProtoMessage() {}

func (x *TrustedSecretsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedSecretsInfo.ProtoReflect.Descriptor instead.
func (*TrustedSecretsInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_secret_v1_trusted_secret_proto_rawDescGZIP(), []int{8}
}

func (x *TrustedSecretsInfo) GetResults() []*TrustedSecretInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TrustedSecretsInfo) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type TrustedSecretStatQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *v2.StatisticsQuery    `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	DomainId      string                 `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrustedSecretStatQuery) Reset() {
	*x = TrustedSecretStatQuery{}
	mi := &file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedSecretStatQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedSecretStatQuery) ProtoMessage() {}

func (x *TrustedSecretStatQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedSecretStatQuery.ProtoReflect.Descriptor instead.
func (*TrustedSecretStatQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_secret_v1_trusted_secret_proto_rawDescGZIP(), []int{9}
}

func (x *TrustedSecretStatQuery) GetQuery() *v2.StatisticsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *TrustedSecretStatQuery) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

var File_spaceone_api_secret_v1_trusted_secret_proto protoreflect.FileDescriptor

var file_spaceone_api_secret_v1_trusted_secret_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa6, 0x03, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x67, 0x0a, 0x0e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x40, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x4f,
	0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x02, 0x22, 0x89, 0x01, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x42, 0x0a, 0x14, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x22, 0x96, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x91, 0x02, 0x0a, 0x12, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa4,
	0x01, 0x0a, 0x15, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xeb, 0x03, 0x0a, 0x11, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x5e, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x43,
	0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x4d, 0x41,
	0x49, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x10, 0x02, 0x22, 0x7a, 0x0a, 0x12, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x72, 0x0a, 0x16, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x32, 0xd1, 0x08, 0x0a, 0x0d, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x94, 0x01, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x32, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x2d, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x94, 0x01, 0x0a,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01,
	0x2a, 0x22, 0x20, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x7b, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2c, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20,
	0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x2d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x8f, 0x01, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x36, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x2d,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x70, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x2c, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a,
	0x22, 0x1d, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x12,
	0x89, 0x01, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x2a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x2d,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x04, 0x73,
	0x74, 0x61, 0x74, 0x12, 0x2e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x29, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x72, 0x65, 0x74,
	0x2d, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2f,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spaceone_api_secret_v1_trusted_secret_proto_rawDescOnce sync.Once
	file_spaceone_api_secret_v1_trusted_secret_proto_rawDescData = file_spaceone_api_secret_v1_trusted_secret_proto_rawDesc
)

func file_spaceone_api_secret_v1_trusted_secret_proto_rawDescGZIP() []byte {
	file_spaceone_api_secret_v1_trusted_secret_proto_rawDescOnce.Do(func() {
		file_spaceone_api_secret_v1_trusted_secret_proto_rawDescData = protoimpl.X.CompressGZIP(file_spaceone_api_secret_v1_trusted_secret_proto_rawDescData)
	})
	return file_spaceone_api_secret_v1_trusted_secret_proto_rawDescData
}

var file_spaceone_api_secret_v1_trusted_secret_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_spaceone_api_secret_v1_trusted_secret_proto_goTypes = []any{
	(CreateTrustedSecretRequest_ResourceGroup)(0), // 0: spaceone.api.secret.v1.CreateTrustedSecretRequest.ResourceGroup
	(TrustedSecretInfo_ResourceGroup)(0),          // 1: spaceone.api.secret.v1.TrustedSecretInfo.ResourceGroup
	(*CreateTrustedSecretRequest)(nil),            // 2: spaceone.api.secret.v1.CreateTrustedSecretRequest
	(*UpdateTrustedSecretRequest)(nil),            // 3: spaceone.api.secret.v1.UpdateTrustedSecretRequest
	(*TrustedSecretRequest)(nil),                  // 4: spaceone.api.secret.v1.TrustedSecretRequest
	(*GetTrustedSecretDataRequest)(nil),           // 5: spaceone.api.secret.v1.GetTrustedSecretDataRequest
	(*UpdateTrustedSecretDataRequest)(nil),        // 6: spaceone.api.secret.v1.UpdateTrustedSecretDataRequest
	(*TrustedSecretQuery)(nil),                    // 7: spaceone.api.secret.v1.TrustedSecretQuery
	(*TrustedSecretDataInfo)(nil),                 // 8: spaceone.api.secret.v1.TrustedSecretDataInfo
	(*TrustedSecretInfo)(nil),                     // 9: spaceone.api.secret.v1.TrustedSecretInfo
	(*TrustedSecretsInfo)(nil),                    // 10: spaceone.api.secret.v1.TrustedSecretsInfo
	(*TrustedSecretStatQuery)(nil),                // 11: spaceone.api.secret.v1.TrustedSecretStatQuery
	(*_struct.Struct)(nil),                        // 12: google.protobuf.Struct
	(*v2.Query)(nil),                              // 13: spaceone.api.core.v2.Query
	(*v2.StatisticsQuery)(nil),                    // 14: spaceone.api.core.v2.StatisticsQuery
	(*empty.Empty)(nil),                           // 15: google.protobuf.Empty
}
var file_spaceone_api_secret_v1_trusted_secret_proto_depIdxs = []int32{
	12, // 0: spaceone.api.secret.v1.CreateTrustedSecretRequest.data:type_name -> google.protobuf.Struct
	12, // 1: spaceone.api.secret.v1.CreateTrustedSecretRequest.tags:type_name -> google.protobuf.Struct
	0,  // 2: spaceone.api.secret.v1.CreateTrustedSecretRequest.resource_group:type_name -> spaceone.api.secret.v1.CreateTrustedSecretRequest.ResourceGroup
	12, // 3: spaceone.api.secret.v1.UpdateTrustedSecretRequest.tags:type_name -> google.protobuf.Struct
	12, // 4: spaceone.api.secret.v1.UpdateTrustedSecretDataRequest.data:type_name -> google.protobuf.Struct
	13, // 5: spaceone.api.secret.v1.TrustedSecretQuery.query:type_name -> spaceone.api.core.v2.Query
	12, // 6: spaceone.api.secret.v1.TrustedSecretDataInfo.encrypt_options:type_name -> google.protobuf.Struct
	12, // 7: spaceone.api.secret.v1.TrustedSecretDataInfo.data:type_name -> google.protobuf.Struct
	12, // 8: spaceone.api.secret.v1.TrustedSecretInfo.tags:type_name -> google.protobuf.Struct
	1,  // 9: spaceone.api.secret.v1.TrustedSecretInfo.resource_group:type_name -> spaceone.api.secret.v1.TrustedSecretInfo.ResourceGroup
	9,  // 10: spaceone.api.secret.v1.TrustedSecretsInfo.results:type_name -> spaceone.api.secret.v1.TrustedSecretInfo
	14, // 11: spaceone.api.secret.v1.TrustedSecretStatQuery.query:type_name -> spaceone.api.core.v2.StatisticsQuery
	2,  // 12: spaceone.api.secret.v1.TrustedSecret.create:input_type -> spaceone.api.secret.v1.CreateTrustedSecretRequest
	3,  // 13: spaceone.api.secret.v1.TrustedSecret.update:input_type -> spaceone.api.secret.v1.UpdateTrustedSecretRequest
	4,  // 14: spaceone.api.secret.v1.TrustedSecret.delete:input_type -> spaceone.api.secret.v1.TrustedSecretRequest
	6,  // 15: spaceone.api.secret.v1.TrustedSecret.update_data:input_type -> spaceone.api.secret.v1.UpdateTrustedSecretDataRequest
	5,  // 16: spaceone.api.secret.v1.TrustedSecret.get_data:input_type -> spaceone.api.secret.v1.GetTrustedSecretDataRequest
	4,  // 17: spaceone.api.secret.v1.TrustedSecret.get:input_type -> spaceone.api.secret.v1.TrustedSecretRequest
	7,  // 18: spaceone.api.secret.v1.TrustedSecret.list:input_type -> spaceone.api.secret.v1.TrustedSecretQuery
	11, // 19: spaceone.api.secret.v1.TrustedSecret.stat:input_type -> spaceone.api.secret.v1.TrustedSecretStatQuery
	9,  // 20: spaceone.api.secret.v1.TrustedSecret.create:output_type -> spaceone.api.secret.v1.TrustedSecretInfo
	9,  // 21: spaceone.api.secret.v1.TrustedSecret.update:output_type -> spaceone.api.secret.v1.TrustedSecretInfo
	15, // 22: spaceone.api.secret.v1.TrustedSecret.delete:output_type -> google.protobuf.Empty
	15, // 23: spaceone.api.secret.v1.TrustedSecret.update_data:output_type -> google.protobuf.Empty
	8,  // 24: spaceone.api.secret.v1.TrustedSecret.get_data:output_type -> spaceone.api.secret.v1.TrustedSecretDataInfo
	9,  // 25: spaceone.api.secret.v1.TrustedSecret.get:output_type -> spaceone.api.secret.v1.TrustedSecretInfo
	10, // 26: spaceone.api.secret.v1.TrustedSecret.list:output_type -> spaceone.api.secret.v1.TrustedSecretsInfo
	12, // 27: spaceone.api.secret.v1.TrustedSecret.stat:output_type -> google.protobuf.Struct
	20, // [20:28] is the sub-list for method output_type
	12, // [12:20] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_spaceone_api_secret_v1_trusted_secret_proto_init() }
func file_spaceone_api_secret_v1_trusted_secret_proto_init() {
	if File_spaceone_api_secret_v1_trusted_secret_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spaceone_api_secret_v1_trusted_secret_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spaceone_api_secret_v1_trusted_secret_proto_goTypes,
		DependencyIndexes: file_spaceone_api_secret_v1_trusted_secret_proto_depIdxs,
		EnumInfos:         file_spaceone_api_secret_v1_trusted_secret_proto_enumTypes,
		MessageInfos:      file_spaceone_api_secret_v1_trusted_secret_proto_msgTypes,
	}.Build()
	File_spaceone_api_secret_v1_trusted_secret_proto = out.File
	file_spaceone_api_secret_v1_trusted_secret_proto_rawDesc = nil
	file_spaceone_api_secret_v1_trusted_secret_proto_goTypes = nil
	file_spaceone_api_secret_v1_trusted_secret_proto_depIdxs = nil
}
