// A Asset is data of an `instance` of a `resource`. A Asset follows the pre-created classification system of a AssetType and indicates the property value of the `resource`.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/inventory_v2/v1/asset.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Asset_Create_FullMethodName  = "/spaceone.api.inventory_v2.v1.Asset/create"
	Asset_Update_FullMethodName  = "/spaceone.api.inventory_v2.v1.Asset/update"
	Asset_Delete_FullMethodName  = "/spaceone.api.inventory_v2.v1.Asset/delete"
	Asset_Get_FullMethodName     = "/spaceone.api.inventory_v2.v1.Asset/get"
	Asset_List_FullMethodName    = "/spaceone.api.inventory_v2.v1.Asset/list"
	Asset_Export_FullMethodName  = "/spaceone.api.inventory_v2.v1.Asset/export"
	Asset_History_FullMethodName = "/spaceone.api.inventory_v2.v1.Asset/history"
	Asset_Analyze_FullMethodName = "/spaceone.api.inventory_v2.v1.Asset/analyze"
	Asset_Stat_FullMethodName    = "/spaceone.api.inventory_v2.v1.Asset/stat"
)

// AssetClient is the client API for Asset service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetClient interface {
	// Creates a new Asset. A Asset instance is created based on data including the `resource`'s attribute values. When creating, the classification information defined by AssetType is also needed. The created Asset has collection information which is the collection history for the `resource` by plugin.
	Create(ctx context.Context, in *AssetCreateRequest, opts ...grpc.CallOption) (*AssetInfo, error)
	// Updates a specific Asset. You can make changes in Asset settings, except for the classification system of Asset and the information about the `resource` attribute value.
	Update(ctx context.Context, in *UpdateAssetRequest, opts ...grpc.CallOption) (*AssetInfo, error)
	// Deletes a specific Asset. You must specify the `cloud_service_id` of the Asset to delete.
	Delete(ctx context.Context, in *AssetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Gets a specific Asset. Prints detailed information about the Asset, including its state, classification information, and attribute values.
	Get(ctx context.Context, in *AssetRequest, opts ...grpc.CallOption) (*AssetInfo, error)
	// Gets a list of all Assets. You can use a query to get a filtered list of Assets.
	List(ctx context.Context, in *AssetQuery, opts ...grpc.CallOption) (*AssetsInfo, error)
	Export(ctx context.Context, in *AssetExportRequest, opts ...grpc.CallOption) (*_struct.Struct, error)
	History(ctx context.Context, in *AssetHistoryQuery, opts ...grpc.CallOption) (*AssetHistoriesInfo, error)
	Analyze(ctx context.Context, in *AssetAnalyzeQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
	Stat(ctx context.Context, in *AssetStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type assetClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetClient(cc grpc.ClientConnInterface) AssetClient {
	return &assetClient{cc}
}

func (c *assetClient) Create(ctx context.Context, in *AssetCreateRequest, opts ...grpc.CallOption) (*AssetInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssetInfo)
	err := c.cc.Invoke(ctx, Asset_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) Update(ctx context.Context, in *UpdateAssetRequest, opts ...grpc.CallOption) (*AssetInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssetInfo)
	err := c.cc.Invoke(ctx, Asset_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) Delete(ctx context.Context, in *AssetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Asset_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) Get(ctx context.Context, in *AssetRequest, opts ...grpc.CallOption) (*AssetInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssetInfo)
	err := c.cc.Invoke(ctx, Asset_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) List(ctx context.Context, in *AssetQuery, opts ...grpc.CallOption) (*AssetsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssetsInfo)
	err := c.cc.Invoke(ctx, Asset_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) Export(ctx context.Context, in *AssetExportRequest, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Asset_Export_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) History(ctx context.Context, in *AssetHistoryQuery, opts ...grpc.CallOption) (*AssetHistoriesInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssetHistoriesInfo)
	err := c.cc.Invoke(ctx, Asset_History_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) Analyze(ctx context.Context, in *AssetAnalyzeQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Asset_Analyze_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) Stat(ctx context.Context, in *AssetStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Asset_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetServer is the server API for Asset service.
// All implementations must embed UnimplementedAssetServer
// for forward compatibility.
type AssetServer interface {
	// Creates a new Asset. A Asset instance is created based on data including the `resource`'s attribute values. When creating, the classification information defined by AssetType is also needed. The created Asset has collection information which is the collection history for the `resource` by plugin.
	Create(context.Context, *AssetCreateRequest) (*AssetInfo, error)
	// Updates a specific Asset. You can make changes in Asset settings, except for the classification system of Asset and the information about the `resource` attribute value.
	Update(context.Context, *UpdateAssetRequest) (*AssetInfo, error)
	// Deletes a specific Asset. You must specify the `cloud_service_id` of the Asset to delete.
	Delete(context.Context, *AssetRequest) (*empty.Empty, error)
	// Gets a specific Asset. Prints detailed information about the Asset, including its state, classification information, and attribute values.
	Get(context.Context, *AssetRequest) (*AssetInfo, error)
	// Gets a list of all Assets. You can use a query to get a filtered list of Assets.
	List(context.Context, *AssetQuery) (*AssetsInfo, error)
	Export(context.Context, *AssetExportRequest) (*_struct.Struct, error)
	History(context.Context, *AssetHistoryQuery) (*AssetHistoriesInfo, error)
	Analyze(context.Context, *AssetAnalyzeQuery) (*_struct.Struct, error)
	Stat(context.Context, *AssetStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedAssetServer()
}

// UnimplementedAssetServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAssetServer struct{}

func (UnimplementedAssetServer) Create(context.Context, *AssetCreateRequest) (*AssetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAssetServer) Update(context.Context, *UpdateAssetRequest) (*AssetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAssetServer) Delete(context.Context, *AssetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAssetServer) Get(context.Context, *AssetRequest) (*AssetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAssetServer) List(context.Context, *AssetQuery) (*AssetsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAssetServer) Export(context.Context, *AssetExportRequest) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (UnimplementedAssetServer) History(context.Context, *AssetHistoryQuery) (*AssetHistoriesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method History not implemented")
}
func (UnimplementedAssetServer) Analyze(context.Context, *AssetAnalyzeQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}
func (UnimplementedAssetServer) Stat(context.Context, *AssetStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedAssetServer) mustEmbedUnimplementedAssetServer() {}
func (UnimplementedAssetServer) testEmbeddedByValue()               {}

// UnsafeAssetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetServer will
// result in compilation errors.
type UnsafeAssetServer interface {
	mustEmbedUnimplementedAssetServer()
}

func RegisterAssetServer(s grpc.ServiceRegistrar, srv AssetServer) {
	// If the following call pancis, it indicates UnimplementedAssetServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Asset_ServiceDesc, srv)
}

func _Asset_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).Create(ctx, req.(*AssetCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).Update(ctx, req.(*UpdateAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).Delete(ctx, req.(*AssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).Get(ctx, req.(*AssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).List(ctx, req.(*AssetQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_Export_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).Export(ctx, req.(*AssetExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetHistoryQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_History_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).History(ctx, req.(*AssetHistoryQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetAnalyzeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_Analyze_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).Analyze(ctx, req.(*AssetAnalyzeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).Stat(ctx, req.(*AssetStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Asset_ServiceDesc is the grpc.ServiceDesc for Asset service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Asset_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.inventory_v2.v1.Asset",
	HandlerType: (*AssetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Asset_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _Asset_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Asset_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Asset_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Asset_List_Handler,
		},
		{
			MethodName: "export",
			Handler:    _Asset_Export_Handler,
		},
		{
			MethodName: "history",
			Handler:    _Asset_History_Handler,
		},
		{
			MethodName: "analyze",
			Handler:    _Asset_Analyze_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _Asset_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/inventory_v2/v1/asset.proto",
}
