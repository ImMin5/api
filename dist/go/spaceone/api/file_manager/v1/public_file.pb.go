// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.6.1
// source: spaceone/api/file_manager/v1/public_file.proto

package v1

import (
	v1 "github.com/cloudforet-io/api/dist/go/spaceone/api/core/v1"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PublicFileSearchQuery_PublicFileState int32

const (
	PublicFileSearchQuery_PUBLIC_STATE_NONE PublicFileSearchQuery_PublicFileState = 0
	PublicFileSearchQuery_PENDING           PublicFileSearchQuery_PublicFileState = 1
	PublicFileSearchQuery_DONE              PublicFileSearchQuery_PublicFileState = 2
)

// Enum value maps for PublicFileSearchQuery_PublicFileState.
var (
	PublicFileSearchQuery_PublicFileState_name = map[int32]string{
		0: "PUBLIC_STATE_NONE",
		1: "PENDING",
		2: "DONE",
	}
	PublicFileSearchQuery_PublicFileState_value = map[string]int32{
		"PUBLIC_STATE_NONE": 0,
		"PENDING":           1,
		"DONE":              2,
	}
)

func (x PublicFileSearchQuery_PublicFileState) Enum() *PublicFileSearchQuery_PublicFileState {
	p := new(PublicFileSearchQuery_PublicFileState)
	*p = x
	return p
}

func (x PublicFileSearchQuery_PublicFileState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicFileSearchQuery_PublicFileState) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_file_manager_v1_public_file_proto_enumTypes[0].Descriptor()
}

func (PublicFileSearchQuery_PublicFileState) Type() protoreflect.EnumType {
	return &file_spaceone_api_file_manager_v1_public_file_proto_enumTypes[0]
}

func (x PublicFileSearchQuery_PublicFileState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicFileSearchQuery_PublicFileState.Descriptor instead.
func (PublicFileSearchQuery_PublicFileState) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_file_manager_v1_public_file_proto_rawDescGZIP(), []int{4, 0}
}

type PublicFileInfo_PublicFileState int32

const (
	PublicFileInfo_PUBLIC_STATE_NONE PublicFileInfo_PublicFileState = 0
	PublicFileInfo_PENDING           PublicFileInfo_PublicFileState = 1
	PublicFileInfo_DONE              PublicFileInfo_PublicFileState = 2
)

// Enum value maps for PublicFileInfo_PublicFileState.
var (
	PublicFileInfo_PublicFileState_name = map[int32]string{
		0: "PUBLIC_STATE_NONE",
		1: "PENDING",
		2: "DONE",
	}
	PublicFileInfo_PublicFileState_value = map[string]int32{
		"PUBLIC_STATE_NONE": 0,
		"PENDING":           1,
		"DONE":              2,
	}
)

func (x PublicFileInfo_PublicFileState) Enum() *PublicFileInfo_PublicFileState {
	p := new(PublicFileInfo_PublicFileState)
	*p = x
	return p
}

func (x PublicFileInfo_PublicFileState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicFileInfo_PublicFileState) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_file_manager_v1_public_file_proto_enumTypes[1].Descriptor()
}

func (PublicFileInfo_PublicFileState) Type() protoreflect.EnumType {
	return &file_spaceone_api_file_manager_v1_public_file_proto_enumTypes[1]
}

func (x PublicFileInfo_PublicFileState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicFileInfo_PublicFileState.Descriptor instead.
func (PublicFileInfo_PublicFileState) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_file_manager_v1_public_file_proto_rawDescGZIP(), []int{5, 0}
}

type PublicFileReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType string `protobuf:"bytes,1,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	ResourceId   string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *PublicFileReference) Reset() {
	*x = PublicFileReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicFileReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicFileReference) ProtoMessage() {}

func (x *PublicFileReference) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicFileReference.ProtoReflect.Descriptor instead.
func (*PublicFileReference) Descriptor() ([]byte, []int) {
	return file_spaceone_api_file_manager_v1_public_file_proto_rawDescGZIP(), []int{0}
}

func (x *PublicFileReference) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *PublicFileReference) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

type CreatePublicFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	Tags *_struct.Struct `protobuf:"bytes,2,opt,name=tags,proto3" json:"tags,omitempty"`
	// +optional
	Reference *PublicFileReference `protobuf:"bytes,3,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *CreatePublicFileRequest) Reset() {
	*x = CreatePublicFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePublicFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePublicFileRequest) ProtoMessage() {}

func (x *CreatePublicFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePublicFileRequest.ProtoReflect.Descriptor instead.
func (*CreatePublicFileRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_file_manager_v1_public_file_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePublicFileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePublicFileRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreatePublicFileRequest) GetReference() *PublicFileReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

type UpdatePublicFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicFileId string `protobuf:"bytes,1,opt,name=public_file_id,json=publicFileId,proto3" json:"public_file_id,omitempty"`
	// +optional
	Tags *_struct.Struct `protobuf:"bytes,2,opt,name=tags,proto3" json:"tags,omitempty"`
	// +optional
	Reference *PublicFileReference `protobuf:"bytes,3,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *UpdatePublicFileRequest) Reset() {
	*x = UpdatePublicFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePublicFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePublicFileRequest) ProtoMessage() {}

func (x *UpdatePublicFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePublicFileRequest.ProtoReflect.Descriptor instead.
func (*UpdatePublicFileRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_file_manager_v1_public_file_proto_rawDescGZIP(), []int{2}
}

func (x *UpdatePublicFileRequest) GetPublicFileId() string {
	if x != nil {
		return x.PublicFileId
	}
	return ""
}

func (x *UpdatePublicFileRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdatePublicFileRequest) GetReference() *PublicFileReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

type PublicFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicFileId string `protobuf:"bytes,1,opt,name=public_file_id,json=publicFileId,proto3" json:"public_file_id,omitempty"`
}

func (x *PublicFileRequest) Reset() {
	*x = PublicFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicFileRequest) ProtoMessage() {}

func (x *PublicFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicFileRequest.ProtoReflect.Descriptor instead.
func (*PublicFileRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_file_manager_v1_public_file_proto_rawDescGZIP(), []int{3}
}

func (x *PublicFileRequest) GetPublicFileId() string {
	if x != nil {
		return x.PublicFileId
	}
	return ""
}

type PublicFileSearchQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +optional
	Query *v1.Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// +optional
	PublicFileId string `protobuf:"bytes,2,opt,name=public_file_id,json=publicFileId,proto3" json:"public_file_id,omitempty"`
	// / +optional
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	State PublicFileSearchQuery_PublicFileState `protobuf:"varint,4,opt,name=state,proto3,enum=spaceone.api.file_manager.v1.PublicFileSearchQuery_PublicFileState" json:"state,omitempty"`
	// +optional
	FileType string `protobuf:"bytes,6,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	// +optional
	ResourceType string `protobuf:"bytes,7,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// +optional
	ResourceId string `protobuf:"bytes,8,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *PublicFileSearchQuery) Reset() {
	*x = PublicFileSearchQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicFileSearchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicFileSearchQuery) ProtoMessage() {}

func (x *PublicFileSearchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicFileSearchQuery.ProtoReflect.Descriptor instead.
func (*PublicFileSearchQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_file_manager_v1_public_file_proto_rawDescGZIP(), []int{4}
}

func (x *PublicFileSearchQuery) GetQuery() *v1.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *PublicFileSearchQuery) GetPublicFileId() string {
	if x != nil {
		return x.PublicFileId
	}
	return ""
}

func (x *PublicFileSearchQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublicFileSearchQuery) GetState() PublicFileSearchQuery_PublicFileState {
	if x != nil {
		return x.State
	}
	return PublicFileSearchQuery_PUBLIC_STATE_NONE
}

func (x *PublicFileSearchQuery) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *PublicFileSearchQuery) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *PublicFileSearchQuery) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

type PublicFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicFileId  string                         `protobuf:"bytes,1,opt,name=public_file_id,json=publicFileId,proto3" json:"public_file_id,omitempty"`
	Name          string                         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	State         PublicFileInfo_PublicFileState `protobuf:"varint,3,opt,name=state,proto3,enum=spaceone.api.file_manager.v1.PublicFileInfo_PublicFileState" json:"state,omitempty"`
	FileType      string                         `protobuf:"bytes,5,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	UploadUrl     string                         `protobuf:"bytes,6,opt,name=upload_url,json=uploadUrl,proto3" json:"upload_url,omitempty"`
	UploadOptions *_struct.Struct                `protobuf:"bytes,7,opt,name=upload_options,json=uploadOptions,proto3" json:"upload_options,omitempty"`
	DownloadUrl   string                         `protobuf:"bytes,8,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"`
	Tags          *_struct.Struct                `protobuf:"bytes,9,opt,name=tags,proto3" json:"tags,omitempty"`
	Reference     *PublicFileReference           `protobuf:"bytes,10,opt,name=reference,proto3" json:"reference,omitempty"`
	CreatedAt     string                         `protobuf:"bytes,31,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *PublicFileInfo) Reset() {
	*x = PublicFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicFileInfo) ProtoMessage() {}

func (x *PublicFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicFileInfo.ProtoReflect.Descriptor instead.
func (*PublicFileInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_file_manager_v1_public_file_proto_rawDescGZIP(), []int{5}
}

func (x *PublicFileInfo) GetPublicFileId() string {
	if x != nil {
		return x.PublicFileId
	}
	return ""
}

func (x *PublicFileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublicFileInfo) GetState() PublicFileInfo_PublicFileState {
	if x != nil {
		return x.State
	}
	return PublicFileInfo_PUBLIC_STATE_NONE
}

func (x *PublicFileInfo) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *PublicFileInfo) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

func (x *PublicFileInfo) GetUploadOptions() *_struct.Struct {
	if x != nil {
		return x.UploadOptions
	}
	return nil
}

func (x *PublicFileInfo) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

func (x *PublicFileInfo) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PublicFileInfo) GetReference() *PublicFileReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *PublicFileInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type PublicFilesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results    []*PublicFileInfo `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TotalCount int32             `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *PublicFilesInfo) Reset() {
	*x = PublicFilesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicFilesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicFilesInfo) ProtoMessage() {}

func (x *PublicFilesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicFilesInfo.ProtoReflect.Descriptor instead.
func (*PublicFilesInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_file_manager_v1_public_file_proto_rawDescGZIP(), []int{6}
}

func (x *PublicFilesInfo) GetResults() []*PublicFileInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *PublicFilesInfo) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type PublicFileStatQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    *v1.StatisticsQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	DomainId string              `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *PublicFileStatQuery) Reset() {
	*x = PublicFileStatQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicFileStatQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicFileStatQuery) ProtoMessage() {}

func (x *PublicFileStatQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicFileStatQuery.ProtoReflect.Descriptor instead.
func (*PublicFileStatQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_file_manager_v1_public_file_proto_rawDescGZIP(), []int{7}
}

func (x *PublicFileStatQuery) GetQuery() *v1.StatisticsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *PublicFileStatQuery) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

var File_spaceone_api_file_manager_v1_public_file_proto protoreflect.FileDescriptor

var file_spaceone_api_file_manager_v1_public_file_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x13, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x4f, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x4f, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x22, 0x39, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0x83, 0x03, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x4f, 0x4e, 0x45, 0x10, 0x02, 0x22, 0x9b, 0x04, 0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x72, 0x6c, 0x12, 0x3e, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x4f, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x3f, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e,
	0x45, 0x10, 0x02, 0x22, 0x7a, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x6f, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x32, 0xaa, 0x08, 0x0a, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x97, 0x01, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x12, 0x35, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2d, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x64, 0x12, 0x9d, 0x01, 0x0a, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x66, 0x69,
	0x6c, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x06, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xab, 0x01,
	0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75,
	0x72, 0x6c, 0x12, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x66,
	0x69, 0x6c, 0x65, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x75, 0x72, 0x6c, 0x12, 0x91, 0x01, 0x0a, 0x03,
	0x67, 0x65, 0x74, 0x12, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f,
	0x66, 0x69, 0x6c, 0x65, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x12,
	0x98, 0x01, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x2d, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2d, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x04, 0x73,
	0x74, 0x61, 0x74, 0x12, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22,
	0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x66, 0x69, 0x6c,
	0x65, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x42, 0x43, 0x5a,
	0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x66, 0x6f, 0x72, 0x65, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69,
	0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spaceone_api_file_manager_v1_public_file_proto_rawDescOnce sync.Once
	file_spaceone_api_file_manager_v1_public_file_proto_rawDescData = file_spaceone_api_file_manager_v1_public_file_proto_rawDesc
)

func file_spaceone_api_file_manager_v1_public_file_proto_rawDescGZIP() []byte {
	file_spaceone_api_file_manager_v1_public_file_proto_rawDescOnce.Do(func() {
		file_spaceone_api_file_manager_v1_public_file_proto_rawDescData = protoimpl.X.CompressGZIP(file_spaceone_api_file_manager_v1_public_file_proto_rawDescData)
	})
	return file_spaceone_api_file_manager_v1_public_file_proto_rawDescData
}

var file_spaceone_api_file_manager_v1_public_file_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_spaceone_api_file_manager_v1_public_file_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_spaceone_api_file_manager_v1_public_file_proto_goTypes = []interface{}{
	(PublicFileSearchQuery_PublicFileState)(0), // 0: spaceone.api.file_manager.v1.PublicFileSearchQuery.PublicFileState
	(PublicFileInfo_PublicFileState)(0),        // 1: spaceone.api.file_manager.v1.PublicFileInfo.PublicFileState
	(*PublicFileReference)(nil),                // 2: spaceone.api.file_manager.v1.PublicFileReference
	(*CreatePublicFileRequest)(nil),            // 3: spaceone.api.file_manager.v1.CreatePublicFileRequest
	(*UpdatePublicFileRequest)(nil),            // 4: spaceone.api.file_manager.v1.UpdatePublicFileRequest
	(*PublicFileRequest)(nil),                  // 5: spaceone.api.file_manager.v1.PublicFileRequest
	(*PublicFileSearchQuery)(nil),              // 6: spaceone.api.file_manager.v1.PublicFileSearchQuery
	(*PublicFileInfo)(nil),                     // 7: spaceone.api.file_manager.v1.PublicFileInfo
	(*PublicFilesInfo)(nil),                    // 8: spaceone.api.file_manager.v1.PublicFilesInfo
	(*PublicFileStatQuery)(nil),                // 9: spaceone.api.file_manager.v1.PublicFileStatQuery
	(*_struct.Struct)(nil),                     // 10: google.protobuf.Struct
	(*v1.Query)(nil),                           // 11: spaceone.api.core.v1.Query
	(*v1.StatisticsQuery)(nil),                 // 12: spaceone.api.core.v1.StatisticsQuery
	(*empty.Empty)(nil),                        // 13: google.protobuf.Empty
}
var file_spaceone_api_file_manager_v1_public_file_proto_depIdxs = []int32{
	10, // 0: spaceone.api.file_manager.v1.CreatePublicFileRequest.tags:type_name -> google.protobuf.Struct
	2,  // 1: spaceone.api.file_manager.v1.CreatePublicFileRequest.reference:type_name -> spaceone.api.file_manager.v1.PublicFileReference
	10, // 2: spaceone.api.file_manager.v1.UpdatePublicFileRequest.tags:type_name -> google.protobuf.Struct
	2,  // 3: spaceone.api.file_manager.v1.UpdatePublicFileRequest.reference:type_name -> spaceone.api.file_manager.v1.PublicFileReference
	11, // 4: spaceone.api.file_manager.v1.PublicFileSearchQuery.query:type_name -> spaceone.api.core.v1.Query
	0,  // 5: spaceone.api.file_manager.v1.PublicFileSearchQuery.state:type_name -> spaceone.api.file_manager.v1.PublicFileSearchQuery.PublicFileState
	1,  // 6: spaceone.api.file_manager.v1.PublicFileInfo.state:type_name -> spaceone.api.file_manager.v1.PublicFileInfo.PublicFileState
	10, // 7: spaceone.api.file_manager.v1.PublicFileInfo.upload_options:type_name -> google.protobuf.Struct
	10, // 8: spaceone.api.file_manager.v1.PublicFileInfo.tags:type_name -> google.protobuf.Struct
	2,  // 9: spaceone.api.file_manager.v1.PublicFileInfo.reference:type_name -> spaceone.api.file_manager.v1.PublicFileReference
	7,  // 10: spaceone.api.file_manager.v1.PublicFilesInfo.results:type_name -> spaceone.api.file_manager.v1.PublicFileInfo
	12, // 11: spaceone.api.file_manager.v1.PublicFileStatQuery.query:type_name -> spaceone.api.core.v1.StatisticsQuery
	3,  // 12: spaceone.api.file_manager.v1.PublicFile.add:input_type -> spaceone.api.file_manager.v1.CreatePublicFileRequest
	4,  // 13: spaceone.api.file_manager.v1.PublicFile.update:input_type -> spaceone.api.file_manager.v1.UpdatePublicFileRequest
	5,  // 14: spaceone.api.file_manager.v1.PublicFile.delete:input_type -> spaceone.api.file_manager.v1.PublicFileRequest
	5,  // 15: spaceone.api.file_manager.v1.PublicFile.get_download_url:input_type -> spaceone.api.file_manager.v1.PublicFileRequest
	5,  // 16: spaceone.api.file_manager.v1.PublicFile.get:input_type -> spaceone.api.file_manager.v1.PublicFileRequest
	6,  // 17: spaceone.api.file_manager.v1.PublicFile.list:input_type -> spaceone.api.file_manager.v1.PublicFileSearchQuery
	9,  // 18: spaceone.api.file_manager.v1.PublicFile.stat:input_type -> spaceone.api.file_manager.v1.PublicFileStatQuery
	7,  // 19: spaceone.api.file_manager.v1.PublicFile.add:output_type -> spaceone.api.file_manager.v1.PublicFileInfo
	7,  // 20: spaceone.api.file_manager.v1.PublicFile.update:output_type -> spaceone.api.file_manager.v1.PublicFileInfo
	13, // 21: spaceone.api.file_manager.v1.PublicFile.delete:output_type -> google.protobuf.Empty
	7,  // 22: spaceone.api.file_manager.v1.PublicFile.get_download_url:output_type -> spaceone.api.file_manager.v1.PublicFileInfo
	7,  // 23: spaceone.api.file_manager.v1.PublicFile.get:output_type -> spaceone.api.file_manager.v1.PublicFileInfo
	8,  // 24: spaceone.api.file_manager.v1.PublicFile.list:output_type -> spaceone.api.file_manager.v1.PublicFilesInfo
	10, // 25: spaceone.api.file_manager.v1.PublicFile.stat:output_type -> google.protobuf.Struct
	19, // [19:26] is the sub-list for method output_type
	12, // [12:19] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_spaceone_api_file_manager_v1_public_file_proto_init() }
func file_spaceone_api_file_manager_v1_public_file_proto_init() {
	if File_spaceone_api_file_manager_v1_public_file_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicFileReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePublicFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePublicFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicFileSearchQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicFilesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spaceone_api_file_manager_v1_public_file_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicFileStatQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spaceone_api_file_manager_v1_public_file_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spaceone_api_file_manager_v1_public_file_proto_goTypes,
		DependencyIndexes: file_spaceone_api_file_manager_v1_public_file_proto_depIdxs,
		EnumInfos:         file_spaceone_api_file_manager_v1_public_file_proto_enumTypes,
		MessageInfos:      file_spaceone_api_file_manager_v1_public_file_proto_msgTypes,
	}.Build()
	File_spaceone_api_file_manager_v1_public_file_proto = out.File
	file_spaceone_api_file_manager_v1_public_file_proto_rawDesc = nil
	file_spaceone_api_file_manager_v1_public_file_proto_goTypes = nil
	file_spaceone_api_file_manager_v1_public_file_proto_depIdxs = nil
}
