// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: spaceone/api/file_manager/v1/public_file.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PublicFile_Add_FullMethodName            = "/spaceone.api.file_manager.v1.PublicFile/add"
	PublicFile_Update_FullMethodName         = "/spaceone.api.file_manager.v1.PublicFile/update"
	PublicFile_Delete_FullMethodName         = "/spaceone.api.file_manager.v1.PublicFile/delete"
	PublicFile_GetDownloadUrl_FullMethodName = "/spaceone.api.file_manager.v1.PublicFile/get_download_url"
	PublicFile_Get_FullMethodName            = "/spaceone.api.file_manager.v1.PublicFile/get"
	PublicFile_List_FullMethodName           = "/spaceone.api.file_manager.v1.PublicFile/list"
	PublicFile_Stat_FullMethodName           = "/spaceone.api.file_manager.v1.PublicFile/stat"
)

// PublicFileClient is the client API for PublicFile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicFileClient interface {
	Add(ctx context.Context, in *CreatePublicFileRequest, opts ...grpc.CallOption) (*PublicFileInfo, error)
	Update(ctx context.Context, in *UpdatePublicFileRequest, opts ...grpc.CallOption) (*PublicFileInfo, error)
	Delete(ctx context.Context, in *PublicFileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetDownloadUrl(ctx context.Context, in *PublicFileRequest, opts ...grpc.CallOption) (*PublicFileInfo, error)
	Get(ctx context.Context, in *PublicFileRequest, opts ...grpc.CallOption) (*PublicFileInfo, error)
	List(ctx context.Context, in *PublicFileSearchQuery, opts ...grpc.CallOption) (*PublicFilesInfo, error)
	Stat(ctx context.Context, in *PublicFileStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type publicFileClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicFileClient(cc grpc.ClientConnInterface) PublicFileClient {
	return &publicFileClient{cc}
}

func (c *publicFileClient) Add(ctx context.Context, in *CreatePublicFileRequest, opts ...grpc.CallOption) (*PublicFileInfo, error) {
	out := new(PublicFileInfo)
	err := c.cc.Invoke(ctx, PublicFile_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicFileClient) Update(ctx context.Context, in *UpdatePublicFileRequest, opts ...grpc.CallOption) (*PublicFileInfo, error) {
	out := new(PublicFileInfo)
	err := c.cc.Invoke(ctx, PublicFile_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicFileClient) Delete(ctx context.Context, in *PublicFileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, PublicFile_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicFileClient) GetDownloadUrl(ctx context.Context, in *PublicFileRequest, opts ...grpc.CallOption) (*PublicFileInfo, error) {
	out := new(PublicFileInfo)
	err := c.cc.Invoke(ctx, PublicFile_GetDownloadUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicFileClient) Get(ctx context.Context, in *PublicFileRequest, opts ...grpc.CallOption) (*PublicFileInfo, error) {
	out := new(PublicFileInfo)
	err := c.cc.Invoke(ctx, PublicFile_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicFileClient) List(ctx context.Context, in *PublicFileSearchQuery, opts ...grpc.CallOption) (*PublicFilesInfo, error) {
	out := new(PublicFilesInfo)
	err := c.cc.Invoke(ctx, PublicFile_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicFileClient) Stat(ctx context.Context, in *PublicFileStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, PublicFile_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicFileServer is the server API for PublicFile service.
// All implementations must embed UnimplementedPublicFileServer
// for forward compatibility
type PublicFileServer interface {
	Add(context.Context, *CreatePublicFileRequest) (*PublicFileInfo, error)
	Update(context.Context, *UpdatePublicFileRequest) (*PublicFileInfo, error)
	Delete(context.Context, *PublicFileRequest) (*empty.Empty, error)
	GetDownloadUrl(context.Context, *PublicFileRequest) (*PublicFileInfo, error)
	Get(context.Context, *PublicFileRequest) (*PublicFileInfo, error)
	List(context.Context, *PublicFileSearchQuery) (*PublicFilesInfo, error)
	Stat(context.Context, *PublicFileStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedPublicFileServer()
}

// UnimplementedPublicFileServer must be embedded to have forward compatible implementations.
type UnimplementedPublicFileServer struct {
}

func (UnimplementedPublicFileServer) Add(context.Context, *CreatePublicFileRequest) (*PublicFileInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedPublicFileServer) Update(context.Context, *UpdatePublicFileRequest) (*PublicFileInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPublicFileServer) Delete(context.Context, *PublicFileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPublicFileServer) GetDownloadUrl(context.Context, *PublicFileRequest) (*PublicFileInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadUrl not implemented")
}
func (UnimplementedPublicFileServer) Get(context.Context, *PublicFileRequest) (*PublicFileInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPublicFileServer) List(context.Context, *PublicFileSearchQuery) (*PublicFilesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPublicFileServer) Stat(context.Context, *PublicFileStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedPublicFileServer) mustEmbedUnimplementedPublicFileServer() {}

// UnsafePublicFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicFileServer will
// result in compilation errors.
type UnsafePublicFileServer interface {
	mustEmbedUnimplementedPublicFileServer()
}

func RegisterPublicFileServer(s grpc.ServiceRegistrar, srv PublicFileServer) {
	s.RegisterService(&PublicFile_ServiceDesc, srv)
}

func _PublicFile_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePublicFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicFileServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicFile_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicFileServer).Add(ctx, req.(*CreatePublicFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicFile_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePublicFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicFileServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicFile_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicFileServer).Update(ctx, req.(*UpdatePublicFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicFile_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicFileServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicFile_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicFileServer).Delete(ctx, req.(*PublicFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicFile_GetDownloadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicFileServer).GetDownloadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicFile_GetDownloadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicFileServer).GetDownloadUrl(ctx, req.(*PublicFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicFile_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicFileServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicFile_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicFileServer).Get(ctx, req.(*PublicFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicFile_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicFileSearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicFileServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicFile_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicFileServer).List(ctx, req.(*PublicFileSearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicFile_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicFileStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicFileServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicFile_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicFileServer).Stat(ctx, req.(*PublicFileStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicFile_ServiceDesc is the grpc.ServiceDesc for PublicFile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicFile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.file_manager.v1.PublicFile",
	HandlerType: (*PublicFileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _PublicFile_Add_Handler,
		},
		{
			MethodName: "update",
			Handler:    _PublicFile_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _PublicFile_Delete_Handler,
		},
		{
			MethodName: "get_download_url",
			Handler:    _PublicFile_GetDownloadUrl_Handler,
		},
		{
			MethodName: "get",
			Handler:    _PublicFile_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _PublicFile_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _PublicFile_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/file_manager/v1/public_file.proto",
}
