// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/file_manager/v1/user_file.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserFile_Update_FullMethodName = "/spaceone.api.file_manager.v1.UserFile/update"
	UserFile_Delete_FullMethodName = "/spaceone.api.file_manager.v1.UserFile/delete"
	UserFile_Get_FullMethodName    = "/spaceone.api.file_manager.v1.UserFile/get"
	UserFile_List_FullMethodName   = "/spaceone.api.file_manager.v1.UserFile/list"
	UserFile_Stat_FullMethodName   = "/spaceone.api.file_manager.v1.UserFile/stat"
)

// UserFileClient is the client API for UserFile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserFileClient interface {
	Update(ctx context.Context, in *UpdateUserFileRequest, opts ...grpc.CallOption) (*UserFileInfo, error)
	Delete(ctx context.Context, in *UserFileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *UserFileRequest, opts ...grpc.CallOption) (*UserFileInfo, error)
	List(ctx context.Context, in *UserFileSearchQuery, opts ...grpc.CallOption) (*UserFilesInfo, error)
	Stat(ctx context.Context, in *UserFileStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type userFileClient struct {
	cc grpc.ClientConnInterface
}

func NewUserFileClient(cc grpc.ClientConnInterface) UserFileClient {
	return &userFileClient{cc}
}

func (c *userFileClient) Update(ctx context.Context, in *UpdateUserFileRequest, opts ...grpc.CallOption) (*UserFileInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFileInfo)
	err := c.cc.Invoke(ctx, UserFile_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFileClient) Delete(ctx context.Context, in *UserFileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, UserFile_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFileClient) Get(ctx context.Context, in *UserFileRequest, opts ...grpc.CallOption) (*UserFileInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFileInfo)
	err := c.cc.Invoke(ctx, UserFile_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFileClient) List(ctx context.Context, in *UserFileSearchQuery, opts ...grpc.CallOption) (*UserFilesInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFilesInfo)
	err := c.cc.Invoke(ctx, UserFile_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFileClient) Stat(ctx context.Context, in *UserFileStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, UserFile_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserFileServer is the server API for UserFile service.
// All implementations must embed UnimplementedUserFileServer
// for forward compatibility.
type UserFileServer interface {
	Update(context.Context, *UpdateUserFileRequest) (*UserFileInfo, error)
	Delete(context.Context, *UserFileRequest) (*empty.Empty, error)
	Get(context.Context, *UserFileRequest) (*UserFileInfo, error)
	List(context.Context, *UserFileSearchQuery) (*UserFilesInfo, error)
	Stat(context.Context, *UserFileStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedUserFileServer()
}

// UnimplementedUserFileServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserFileServer struct{}

func (UnimplementedUserFileServer) Update(context.Context, *UpdateUserFileRequest) (*UserFileInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserFileServer) Delete(context.Context, *UserFileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserFileServer) Get(context.Context, *UserFileRequest) (*UserFileInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserFileServer) List(context.Context, *UserFileSearchQuery) (*UserFilesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedUserFileServer) Stat(context.Context, *UserFileStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedUserFileServer) mustEmbedUnimplementedUserFileServer() {}
func (UnimplementedUserFileServer) testEmbeddedByValue()                  {}

// UnsafeUserFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserFileServer will
// result in compilation errors.
type UnsafeUserFileServer interface {
	mustEmbedUnimplementedUserFileServer()
}

func RegisterUserFileServer(s grpc.ServiceRegistrar, srv UserFileServer) {
	// If the following call pancis, it indicates UnimplementedUserFileServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserFile_ServiceDesc, srv)
}

func _UserFile_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFileServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFile_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFileServer).Update(ctx, req.(*UpdateUserFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFile_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFileServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFile_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFileServer).Delete(ctx, req.(*UserFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFile_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFileServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFile_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFileServer).Get(ctx, req.(*UserFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFile_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFileSearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFileServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFile_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFileServer).List(ctx, req.(*UserFileSearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFile_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFileStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFileServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFile_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFileServer).Stat(ctx, req.(*UserFileStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// UserFile_ServiceDesc is the grpc.ServiceDesc for UserFile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserFile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.file_manager.v1.UserFile",
	HandlerType: (*UserFileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "update",
			Handler:    _UserFile_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _UserFile_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _UserFile_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _UserFile_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _UserFile_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/file_manager/v1/user_file.proto",
}
