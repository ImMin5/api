// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v3.6.1
// source: spaceone/api/alert_manager/v1/service_channel.proto

package v1

import (
	v2 "github.com/cloudforet-io/api/dist/go/spaceone/api/core/v2"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChannelSchedule_ChannelScheduleType int32

const (
	ChannelSchedule_CHANNEL_SCHEDULE_TYPE_NONE ChannelSchedule_ChannelScheduleType = 0
	ChannelSchedule_ALL_DAY                    ChannelSchedule_ChannelScheduleType = 1
	ChannelSchedule_WEEK_DAY                   ChannelSchedule_ChannelScheduleType = 2
	ChannelSchedule_WEEKEND                    ChannelSchedule_ChannelScheduleType = 3
	ChannelSchedule_CUSTOM                     ChannelSchedule_ChannelScheduleType = 4
)

// Enum value maps for ChannelSchedule_ChannelScheduleType.
var (
	ChannelSchedule_ChannelScheduleType_name = map[int32]string{
		0: "CHANNEL_SCHEDULE_TYPE_NONE",
		1: "ALL_DAY",
		2: "WEEK_DAY",
		3: "WEEKEND",
		4: "CUSTOM",
	}
	ChannelSchedule_ChannelScheduleType_value = map[string]int32{
		"CHANNEL_SCHEDULE_TYPE_NONE": 0,
		"ALL_DAY":                    1,
		"WEEK_DAY":                   2,
		"WEEKEND":                    3,
		"CUSTOM":                     4,
	}
)

func (x ChannelSchedule_ChannelScheduleType) Enum() *ChannelSchedule_ChannelScheduleType {
	p := new(ChannelSchedule_ChannelScheduleType)
	*p = x
	return p
}

func (x ChannelSchedule_ChannelScheduleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelSchedule_ChannelScheduleType) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_alert_manager_v1_service_channel_proto_enumTypes[0].Descriptor()
}

func (ChannelSchedule_ChannelScheduleType) Type() protoreflect.EnumType {
	return &file_spaceone_api_alert_manager_v1_service_channel_proto_enumTypes[0]
}

func (x ChannelSchedule_ChannelScheduleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelSchedule_ChannelScheduleType.Descriptor instead.
func (ChannelSchedule_ChannelScheduleType) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescGZIP(), []int{1, 0}
}

type ServiceChannelSearchQuery_ServiceChannelType int32

const (
	ServiceChannelSearchQuery_CHANNEL_TYPE_NONE ServiceChannelSearchQuery_ServiceChannelType = 0
	ServiceChannelSearchQuery_DIRECT            ServiceChannelSearchQuery_ServiceChannelType = 1
	ServiceChannelSearchQuery_FORWARD           ServiceChannelSearchQuery_ServiceChannelType = 2
)

// Enum value maps for ServiceChannelSearchQuery_ServiceChannelType.
var (
	ServiceChannelSearchQuery_ServiceChannelType_name = map[int32]string{
		0: "CHANNEL_TYPE_NONE",
		1: "DIRECT",
		2: "FORWARD",
	}
	ServiceChannelSearchQuery_ServiceChannelType_value = map[string]int32{
		"CHANNEL_TYPE_NONE": 0,
		"DIRECT":            1,
		"FORWARD":           2,
	}
)

func (x ServiceChannelSearchQuery_ServiceChannelType) Enum() *ServiceChannelSearchQuery_ServiceChannelType {
	p := new(ServiceChannelSearchQuery_ServiceChannelType)
	*p = x
	return p
}

func (x ServiceChannelSearchQuery_ServiceChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceChannelSearchQuery_ServiceChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_alert_manager_v1_service_channel_proto_enumTypes[1].Descriptor()
}

func (ServiceChannelSearchQuery_ServiceChannelType) Type() protoreflect.EnumType {
	return &file_spaceone_api_alert_manager_v1_service_channel_proto_enumTypes[1]
}

func (x ServiceChannelSearchQuery_ServiceChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceChannelSearchQuery_ServiceChannelType.Descriptor instead.
func (ServiceChannelSearchQuery_ServiceChannelType) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescGZIP(), []int{6, 0}
}

type ServiceChannelSearchQuery_ChannelState int32

const (
	ServiceChannelSearchQuery_CHANNEL_STATE_NONE ServiceChannelSearchQuery_ChannelState = 0
	ServiceChannelSearchQuery_ENABLED            ServiceChannelSearchQuery_ChannelState = 1
	ServiceChannelSearchQuery_DISABLED           ServiceChannelSearchQuery_ChannelState = 2
)

// Enum value maps for ServiceChannelSearchQuery_ChannelState.
var (
	ServiceChannelSearchQuery_ChannelState_name = map[int32]string{
		0: "CHANNEL_STATE_NONE",
		1: "ENABLED",
		2: "DISABLED",
	}
	ServiceChannelSearchQuery_ChannelState_value = map[string]int32{
		"CHANNEL_STATE_NONE": 0,
		"ENABLED":            1,
		"DISABLED":           2,
	}
)

func (x ServiceChannelSearchQuery_ChannelState) Enum() *ServiceChannelSearchQuery_ChannelState {
	p := new(ServiceChannelSearchQuery_ChannelState)
	*p = x
	return p
}

func (x ServiceChannelSearchQuery_ChannelState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceChannelSearchQuery_ChannelState) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_alert_manager_v1_service_channel_proto_enumTypes[2].Descriptor()
}

func (ServiceChannelSearchQuery_ChannelState) Type() protoreflect.EnumType {
	return &file_spaceone_api_alert_manager_v1_service_channel_proto_enumTypes[2]
}

func (x ServiceChannelSearchQuery_ChannelState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceChannelSearchQuery_ChannelState.Descriptor instead.
func (ServiceChannelSearchQuery_ChannelState) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescGZIP(), []int{6, 1}
}

type ServiceChannelInfo_ServiceChannelType int32

const (
	ServiceChannelInfo_CHANNEL_TYPE_NONE ServiceChannelInfo_ServiceChannelType = 0
	ServiceChannelInfo_DIRECT            ServiceChannelInfo_ServiceChannelType = 1
	ServiceChannelInfo_FORWARD           ServiceChannelInfo_ServiceChannelType = 2
)

// Enum value maps for ServiceChannelInfo_ServiceChannelType.
var (
	ServiceChannelInfo_ServiceChannelType_name = map[int32]string{
		0: "CHANNEL_TYPE_NONE",
		1: "DIRECT",
		2: "FORWARD",
	}
	ServiceChannelInfo_ServiceChannelType_value = map[string]int32{
		"CHANNEL_TYPE_NONE": 0,
		"DIRECT":            1,
		"FORWARD":           2,
	}
)

func (x ServiceChannelInfo_ServiceChannelType) Enum() *ServiceChannelInfo_ServiceChannelType {
	p := new(ServiceChannelInfo_ServiceChannelType)
	*p = x
	return p
}

func (x ServiceChannelInfo_ServiceChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceChannelInfo_ServiceChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_alert_manager_v1_service_channel_proto_enumTypes[3].Descriptor()
}

func (ServiceChannelInfo_ServiceChannelType) Type() protoreflect.EnumType {
	return &file_spaceone_api_alert_manager_v1_service_channel_proto_enumTypes[3]
}

func (x ServiceChannelInfo_ServiceChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceChannelInfo_ServiceChannelType.Descriptor instead.
func (ServiceChannelInfo_ServiceChannelType) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescGZIP(), []int{8, 0}
}

type ServiceChannelInfo_ChannelState int32

const (
	ServiceChannelInfo_CHANNEL_STATE_NONE ServiceChannelInfo_ChannelState = 0
	ServiceChannelInfo_ENABLED            ServiceChannelInfo_ChannelState = 1
	ServiceChannelInfo_DISABLED           ServiceChannelInfo_ChannelState = 2
)

// Enum value maps for ServiceChannelInfo_ChannelState.
var (
	ServiceChannelInfo_ChannelState_name = map[int32]string{
		0: "CHANNEL_STATE_NONE",
		1: "ENABLED",
		2: "DISABLED",
	}
	ServiceChannelInfo_ChannelState_value = map[string]int32{
		"CHANNEL_STATE_NONE": 0,
		"ENABLED":            1,
		"DISABLED":           2,
	}
)

func (x ServiceChannelInfo_ChannelState) Enum() *ServiceChannelInfo_ChannelState {
	p := new(ServiceChannelInfo_ChannelState)
	*p = x
	return p
}

func (x ServiceChannelInfo_ChannelState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceChannelInfo_ChannelState) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_alert_manager_v1_service_channel_proto_enumTypes[4].Descriptor()
}

func (ServiceChannelInfo_ChannelState) Type() protoreflect.EnumType {
	return &file_spaceone_api_alert_manager_v1_service_channel_proto_enumTypes[4]
}

func (x ServiceChannelInfo_ChannelState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceChannelInfo_ChannelState.Descriptor instead.
func (ServiceChannelInfo_ChannelState) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescGZIP(), []int{8, 1}
}

type ChannelScheduleInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsScheduled   bool                   `protobuf:"varint,1,opt,name=is_scheduled,json=isScheduled,proto3" json:"is_scheduled,omitempty"`
	Start         int32                  `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	End           int32                  `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelScheduleInfo) Reset() {
	*x = ChannelScheduleInfo{}
	mi := &file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelScheduleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelScheduleInfo) ProtoMessage() {}

func (x *ChannelScheduleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelScheduleInfo.ProtoReflect.Descriptor instead.
func (*ChannelScheduleInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescGZIP(), []int{0}
}

func (x *ChannelScheduleInfo) GetIsScheduled() bool {
	if x != nil {
		return x.IsScheduled
	}
	return false
}

func (x *ChannelScheduleInfo) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ChannelScheduleInfo) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type ChannelSchedule struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	SCHEDULE_TYPE ChannelSchedule_ChannelScheduleType `protobuf:"varint,1,opt,name=SCHEDULE_TYPE,json=SCHEDULETYPE,proto3,enum=spaceone.api.alert_manager.v1.ChannelSchedule_ChannelScheduleType" json:"SCHEDULE_TYPE,omitempty"`
	SUN           *ChannelScheduleInfo                `protobuf:"bytes,8,opt,name=SUN,proto3" json:"SUN,omitempty"`
	MON           *ChannelScheduleInfo                `protobuf:"bytes,2,opt,name=MON,proto3" json:"MON,omitempty"`
	TUE           *ChannelScheduleInfo                `protobuf:"bytes,3,opt,name=TUE,proto3" json:"TUE,omitempty"`
	WED           *ChannelScheduleInfo                `protobuf:"bytes,4,opt,name=WED,proto3" json:"WED,omitempty"`
	THU           *ChannelScheduleInfo                `protobuf:"bytes,5,opt,name=THU,proto3" json:"THU,omitempty"`
	FRI           *ChannelScheduleInfo                `protobuf:"bytes,6,opt,name=FRI,proto3" json:"FRI,omitempty"`
	SAT           *ChannelScheduleInfo                `protobuf:"bytes,7,opt,name=SAT,proto3" json:"SAT,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelSchedule) Reset() {
	*x = ChannelSchedule{}
	mi := &file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelSchedule) ProtoMessage() {}

func (x *ChannelSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelSchedule.ProtoReflect.Descriptor instead.
func (*ChannelSchedule) Descriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescGZIP(), []int{1}
}

func (x *ChannelSchedule) GetSCHEDULE_TYPE() ChannelSchedule_ChannelScheduleType {
	if x != nil {
		return x.SCHEDULE_TYPE
	}
	return ChannelSchedule_CHANNEL_SCHEDULE_TYPE_NONE
}

func (x *ChannelSchedule) GetSUN() *ChannelScheduleInfo {
	if x != nil {
		return x.SUN
	}
	return nil
}

func (x *ChannelSchedule) GetMON() *ChannelScheduleInfo {
	if x != nil {
		return x.MON
	}
	return nil
}

func (x *ChannelSchedule) GetTUE() *ChannelScheduleInfo {
	if x != nil {
		return x.TUE
	}
	return nil
}

func (x *ChannelSchedule) GetWED() *ChannelScheduleInfo {
	if x != nil {
		return x.WED
	}
	return nil
}

func (x *ChannelSchedule) GetTHU() *ChannelScheduleInfo {
	if x != nil {
		return x.THU
	}
	return nil
}

func (x *ChannelSchedule) GetFRI() *ChannelScheduleInfo {
	if x != nil {
		return x.FRI
	}
	return nil
}

func (x *ChannelSchedule) GetSAT() *ChannelScheduleInfo {
	if x != nil {
		return x.SAT
	}
	return nil
}

type ServiceChannelCreateRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	ProtocolId string                 `protobuf:"bytes,1,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	Name       string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	Schedule *ChannelSchedule `protobuf:"bytes,3,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Data     *_struct.Struct  `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`
	// +optional
	Tags          *_struct.Struct `protobuf:"bytes,12,opt,name=tags,proto3" json:"tags,omitempty"`
	ServiceId     string          `protobuf:"bytes,21,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceChannelCreateRequest) Reset() {
	*x = ServiceChannelCreateRequest{}
	mi := &file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceChannelCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceChannelCreateRequest) ProtoMessage() {}

func (x *ServiceChannelCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceChannelCreateRequest.ProtoReflect.Descriptor instead.
func (*ServiceChannelCreateRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceChannelCreateRequest) GetProtocolId() string {
	if x != nil {
		return x.ProtocolId
	}
	return ""
}

func (x *ServiceChannelCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceChannelCreateRequest) GetSchedule() *ChannelSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ServiceChannelCreateRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ServiceChannelCreateRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ServiceChannelCreateRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

type ServiceChannelCreateForwardChannelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Schedule      *ChannelSchedule       `protobuf:"bytes,2,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Data          *_struct.Struct        `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`
	Tags          *_struct.Struct        `protobuf:"bytes,12,opt,name=tags,proto3" json:"tags,omitempty"`
	ServiceId     string                 `protobuf:"bytes,21,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceChannelCreateForwardChannelRequest) Reset() {
	*x = ServiceChannelCreateForwardChannelRequest{}
	mi := &file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceChannelCreateForwardChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceChannelCreateForwardChannelRequest) ProtoMessage() {}

func (x *ServiceChannelCreateForwardChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceChannelCreateForwardChannelRequest.ProtoReflect.Descriptor instead.
func (*ServiceChannelCreateForwardChannelRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceChannelCreateForwardChannelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceChannelCreateForwardChannelRequest) GetSchedule() *ChannelSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ServiceChannelCreateForwardChannelRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ServiceChannelCreateForwardChannelRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ServiceChannelCreateForwardChannelRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

type ServiceChannelUpdateRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	ChannelId string                 `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	Schedule *ChannelSchedule `protobuf:"bytes,3,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// +optional
	Data *_struct.Struct `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`
	// +optional
	Tags          *_struct.Struct `protobuf:"bytes,12,opt,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceChannelUpdateRequest) Reset() {
	*x = ServiceChannelUpdateRequest{}
	mi := &file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceChannelUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceChannelUpdateRequest) ProtoMessage() {}

func (x *ServiceChannelUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceChannelUpdateRequest.ProtoReflect.Descriptor instead.
func (*ServiceChannelUpdateRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescGZIP(), []int{4}
}

func (x *ServiceChannelUpdateRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ServiceChannelUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceChannelUpdateRequest) GetSchedule() *ChannelSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ServiceChannelUpdateRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ServiceChannelUpdateRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ServiceChannelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     string                 `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceChannelRequest) Reset() {
	*x = ServiceChannelRequest{}
	mi := &file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceChannelRequest) ProtoMessage() {}

func (x *ServiceChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceChannelRequest.ProtoReflect.Descriptor instead.
func (*ServiceChannelRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescGZIP(), []int{5}
}

func (x *ServiceChannelRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type ServiceChannelSearchQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// +optional
	Query *v2.Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// +optional
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	State ServiceChannelSearchQuery_ChannelState `protobuf:"varint,4,opt,name=state,proto3,enum=spaceone.api.alert_manager.v1.ServiceChannelSearchQuery_ChannelState" json:"state,omitempty"`
	// +optional
	ChannelType ServiceChannelSearchQuery_ServiceChannelType `protobuf:"varint,5,opt,name=channel_type,json=channelType,proto3,enum=spaceone.api.alert_manager.v1.ServiceChannelSearchQuery_ServiceChannelType" json:"channel_type,omitempty"`
	// +optional
	WorkspaceId string `protobuf:"bytes,11,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// +optional
	ServiceId string `protobuf:"bytes,12,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// +optional
	ProtocolId    string `protobuf:"bytes,13,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceChannelSearchQuery) Reset() {
	*x = ServiceChannelSearchQuery{}
	mi := &file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceChannelSearchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceChannelSearchQuery) ProtoMessage() {}

func (x *ServiceChannelSearchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceChannelSearchQuery.ProtoReflect.Descriptor instead.
func (*ServiceChannelSearchQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescGZIP(), []int{6}
}

func (x *ServiceChannelSearchQuery) GetQuery() *v2.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ServiceChannelSearchQuery) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ServiceChannelSearchQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceChannelSearchQuery) GetState() ServiceChannelSearchQuery_ChannelState {
	if x != nil {
		return x.State
	}
	return ServiceChannelSearchQuery_CHANNEL_STATE_NONE
}

func (x *ServiceChannelSearchQuery) GetChannelType() ServiceChannelSearchQuery_ServiceChannelType {
	if x != nil {
		return x.ChannelType
	}
	return ServiceChannelSearchQuery_CHANNEL_TYPE_NONE
}

func (x *ServiceChannelSearchQuery) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *ServiceChannelSearchQuery) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ServiceChannelSearchQuery) GetProtocolId() string {
	if x != nil {
		return x.ProtocolId
	}
	return ""
}

type ServiceChannelStatQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *v2.StatisticsQuery    `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceChannelStatQuery) Reset() {
	*x = ServiceChannelStatQuery{}
	mi := &file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceChannelStatQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceChannelStatQuery) ProtoMessage() {}

func (x *ServiceChannelStatQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceChannelStatQuery.ProtoReflect.Descriptor instead.
func (*ServiceChannelStatQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceChannelStatQuery) GetQuery() *v2.StatisticsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type ServiceChannelInfo struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	ChannelId     string                                `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Name          string                                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	State         ServiceChannelInfo_ChannelState       `protobuf:"varint,3,opt,name=state,proto3,enum=spaceone.api.alert_manager.v1.ServiceChannelInfo_ChannelState" json:"state,omitempty"`
	ChannelType   ServiceChannelInfo_ServiceChannelType `protobuf:"varint,4,opt,name=channel_type,json=channelType,proto3,enum=spaceone.api.alert_manager.v1.ServiceChannelInfo_ServiceChannelType" json:"channel_type,omitempty"`
	Schedule      *ChannelSchedule                      `protobuf:"bytes,5,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Data          *_struct.Struct                       `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`
	Tags          *_struct.Struct                       `protobuf:"bytes,12,opt,name=tags,proto3" json:"tags,omitempty"`
	DomainId      string                                `protobuf:"bytes,21,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	WorkspaceId   string                                `protobuf:"bytes,22,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	ServiceId     string                                `protobuf:"bytes,23,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ProtocolId    string                                `protobuf:"bytes,24,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	SecretId      string                                `protobuf:"bytes,25,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
	CreatedAt     string                                `protobuf:"bytes,31,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceChannelInfo) Reset() {
	*x = ServiceChannelInfo{}
	mi := &file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceChannelInfo) ProtoMessage() {}

func (x *ServiceChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceChannelInfo.ProtoReflect.Descriptor instead.
func (*ServiceChannelInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescGZIP(), []int{8}
}

func (x *ServiceChannelInfo) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ServiceChannelInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceChannelInfo) GetState() ServiceChannelInfo_ChannelState {
	if x != nil {
		return x.State
	}
	return ServiceChannelInfo_CHANNEL_STATE_NONE
}

func (x *ServiceChannelInfo) GetChannelType() ServiceChannelInfo_ServiceChannelType {
	if x != nil {
		return x.ChannelType
	}
	return ServiceChannelInfo_CHANNEL_TYPE_NONE
}

func (x *ServiceChannelInfo) GetSchedule() *ChannelSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ServiceChannelInfo) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ServiceChannelInfo) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ServiceChannelInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *ServiceChannelInfo) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *ServiceChannelInfo) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ServiceChannelInfo) GetProtocolId() string {
	if x != nil {
		return x.ProtocolId
	}
	return ""
}

func (x *ServiceChannelInfo) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

func (x *ServiceChannelInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type ServiceChannelsInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*ServiceChannelInfo  `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceChannelsInfo) Reset() {
	*x = ServiceChannelsInfo{}
	mi := &file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceChannelsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceChannelsInfo) ProtoMessage() {}

func (x *ServiceChannelsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceChannelsInfo.ProtoReflect.Descriptor instead.
func (*ServiceChannelsInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescGZIP(), []int{9}
}

func (x *ServiceChannelsInfo) GetResults() []*ServiceChannelInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ServiceChannelsInfo) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

var File_spaceone_api_alert_manager_v1_service_channel_proto protoreflect.FileDescriptor

var file_spaceone_api_alert_manager_v1_service_channel_proto_rawDesc = []byte{
	0x0a, 0x33, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x60, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x22, 0xcf, 0x05, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x0d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x54, 0x59, 0x50, 0x45, 0x12, 0x44,
	0x0a, 0x03, 0x53, 0x55, 0x4e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x03, 0x53, 0x55, 0x4e, 0x12, 0x44, 0x0a, 0x03, 0x4d, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x4d, 0x4f, 0x4e, 0x12, 0x44, 0x0a, 0x03, 0x54, 0x55,
	0x45, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x54, 0x55, 0x45,
	0x12, 0x44, 0x0a, 0x03, 0x57, 0x45, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x03, 0x57, 0x45, 0x44, 0x12, 0x44, 0x0a, 0x03, 0x54, 0x48, 0x55, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x54, 0x48, 0x55, 0x12, 0x44, 0x0a, 0x03,
	0x46, 0x52, 0x49, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x46,
	0x52, 0x49, 0x12, 0x44, 0x0a, 0x03, 0x53, 0x41, 0x54, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x03, 0x53, 0x41, 0x54, 0x22, 0x69, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x57, 0x45, 0x45, 0x4b, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x45,
	0x45, 0x4b, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x10, 0x04, 0x22, 0x97, 0x02, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x84, 0x02,
	0x0a, 0x29, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x4a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x22, 0xf6, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x36, 0x0a,
	0x15, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xba, 0x04, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6e, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x12, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x02, 0x22,
	0x41, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x22, 0x56, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3b, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xf1, 0x05, 0x0a, 0x12, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x67, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x44, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x44, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x02, 0x22, 0x41, 0x0a, 0x0c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x22, 0x83,
	0x01, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x32, 0xec, 0x0b, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0xac, 0x01, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x3a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x48, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x3a, 0x01, 0x2a, 0x22, 0x38,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0xac, 0x01, 0x0a, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x3a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x34, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x33, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0xa8, 0x01, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a,
	0x22, 0x29, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22,
	0x28, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x03, 0x67, 0x65,
	0x74, 0x12, 0x34, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x67, 0x65, 0x74, 0x12, 0xa7, 0x01, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x32, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x12,
	0x36, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x42, 0x44, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x72, 0x65, 0x74, 0x2d, 0x69, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescOnce sync.Once
	file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescData = file_spaceone_api_alert_manager_v1_service_channel_proto_rawDesc
)

func file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescGZIP() []byte {
	file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescOnce.Do(func() {
		file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescData = protoimpl.X.CompressGZIP(file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescData)
	})
	return file_spaceone_api_alert_manager_v1_service_channel_proto_rawDescData
}

var file_spaceone_api_alert_manager_v1_service_channel_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_spaceone_api_alert_manager_v1_service_channel_proto_goTypes = []any{
	(ChannelSchedule_ChannelScheduleType)(0),          // 0: spaceone.api.alert_manager.v1.ChannelSchedule.ChannelScheduleType
	(ServiceChannelSearchQuery_ServiceChannelType)(0), // 1: spaceone.api.alert_manager.v1.ServiceChannelSearchQuery.ServiceChannelType
	(ServiceChannelSearchQuery_ChannelState)(0),       // 2: spaceone.api.alert_manager.v1.ServiceChannelSearchQuery.ChannelState
	(ServiceChannelInfo_ServiceChannelType)(0),        // 3: spaceone.api.alert_manager.v1.ServiceChannelInfo.ServiceChannelType
	(ServiceChannelInfo_ChannelState)(0),              // 4: spaceone.api.alert_manager.v1.ServiceChannelInfo.ChannelState
	(*ChannelScheduleInfo)(nil),                       // 5: spaceone.api.alert_manager.v1.ChannelScheduleInfo
	(*ChannelSchedule)(nil),                           // 6: spaceone.api.alert_manager.v1.ChannelSchedule
	(*ServiceChannelCreateRequest)(nil),               // 7: spaceone.api.alert_manager.v1.ServiceChannelCreateRequest
	(*ServiceChannelCreateForwardChannelRequest)(nil), // 8: spaceone.api.alert_manager.v1.ServiceChannelCreateForwardChannelRequest
	(*ServiceChannelUpdateRequest)(nil),               // 9: spaceone.api.alert_manager.v1.ServiceChannelUpdateRequest
	(*ServiceChannelRequest)(nil),                     // 10: spaceone.api.alert_manager.v1.ServiceChannelRequest
	(*ServiceChannelSearchQuery)(nil),                 // 11: spaceone.api.alert_manager.v1.ServiceChannelSearchQuery
	(*ServiceChannelStatQuery)(nil),                   // 12: spaceone.api.alert_manager.v1.ServiceChannelStatQuery
	(*ServiceChannelInfo)(nil),                        // 13: spaceone.api.alert_manager.v1.ServiceChannelInfo
	(*ServiceChannelsInfo)(nil),                       // 14: spaceone.api.alert_manager.v1.ServiceChannelsInfo
	(*_struct.Struct)(nil),                            // 15: google.protobuf.Struct
	(*v2.Query)(nil),                                  // 16: spaceone.api.core.v2.Query
	(*v2.StatisticsQuery)(nil),                        // 17: spaceone.api.core.v2.StatisticsQuery
	(*empty.Empty)(nil),                               // 18: google.protobuf.Empty
}
var file_spaceone_api_alert_manager_v1_service_channel_proto_depIdxs = []int32{
	0,  // 0: spaceone.api.alert_manager.v1.ChannelSchedule.SCHEDULE_TYPE:type_name -> spaceone.api.alert_manager.v1.ChannelSchedule.ChannelScheduleType
	5,  // 1: spaceone.api.alert_manager.v1.ChannelSchedule.SUN:type_name -> spaceone.api.alert_manager.v1.ChannelScheduleInfo
	5,  // 2: spaceone.api.alert_manager.v1.ChannelSchedule.MON:type_name -> spaceone.api.alert_manager.v1.ChannelScheduleInfo
	5,  // 3: spaceone.api.alert_manager.v1.ChannelSchedule.TUE:type_name -> spaceone.api.alert_manager.v1.ChannelScheduleInfo
	5,  // 4: spaceone.api.alert_manager.v1.ChannelSchedule.WED:type_name -> spaceone.api.alert_manager.v1.ChannelScheduleInfo
	5,  // 5: spaceone.api.alert_manager.v1.ChannelSchedule.THU:type_name -> spaceone.api.alert_manager.v1.ChannelScheduleInfo
	5,  // 6: spaceone.api.alert_manager.v1.ChannelSchedule.FRI:type_name -> spaceone.api.alert_manager.v1.ChannelScheduleInfo
	5,  // 7: spaceone.api.alert_manager.v1.ChannelSchedule.SAT:type_name -> spaceone.api.alert_manager.v1.ChannelScheduleInfo
	6,  // 8: spaceone.api.alert_manager.v1.ServiceChannelCreateRequest.schedule:type_name -> spaceone.api.alert_manager.v1.ChannelSchedule
	15, // 9: spaceone.api.alert_manager.v1.ServiceChannelCreateRequest.data:type_name -> google.protobuf.Struct
	15, // 10: spaceone.api.alert_manager.v1.ServiceChannelCreateRequest.tags:type_name -> google.protobuf.Struct
	6,  // 11: spaceone.api.alert_manager.v1.ServiceChannelCreateForwardChannelRequest.schedule:type_name -> spaceone.api.alert_manager.v1.ChannelSchedule
	15, // 12: spaceone.api.alert_manager.v1.ServiceChannelCreateForwardChannelRequest.data:type_name -> google.protobuf.Struct
	15, // 13: spaceone.api.alert_manager.v1.ServiceChannelCreateForwardChannelRequest.tags:type_name -> google.protobuf.Struct
	6,  // 14: spaceone.api.alert_manager.v1.ServiceChannelUpdateRequest.schedule:type_name -> spaceone.api.alert_manager.v1.ChannelSchedule
	15, // 15: spaceone.api.alert_manager.v1.ServiceChannelUpdateRequest.data:type_name -> google.protobuf.Struct
	15, // 16: spaceone.api.alert_manager.v1.ServiceChannelUpdateRequest.tags:type_name -> google.protobuf.Struct
	16, // 17: spaceone.api.alert_manager.v1.ServiceChannelSearchQuery.query:type_name -> spaceone.api.core.v2.Query
	2,  // 18: spaceone.api.alert_manager.v1.ServiceChannelSearchQuery.state:type_name -> spaceone.api.alert_manager.v1.ServiceChannelSearchQuery.ChannelState
	1,  // 19: spaceone.api.alert_manager.v1.ServiceChannelSearchQuery.channel_type:type_name -> spaceone.api.alert_manager.v1.ServiceChannelSearchQuery.ServiceChannelType
	17, // 20: spaceone.api.alert_manager.v1.ServiceChannelStatQuery.query:type_name -> spaceone.api.core.v2.StatisticsQuery
	4,  // 21: spaceone.api.alert_manager.v1.ServiceChannelInfo.state:type_name -> spaceone.api.alert_manager.v1.ServiceChannelInfo.ChannelState
	3,  // 22: spaceone.api.alert_manager.v1.ServiceChannelInfo.channel_type:type_name -> spaceone.api.alert_manager.v1.ServiceChannelInfo.ServiceChannelType
	6,  // 23: spaceone.api.alert_manager.v1.ServiceChannelInfo.schedule:type_name -> spaceone.api.alert_manager.v1.ChannelSchedule
	15, // 24: spaceone.api.alert_manager.v1.ServiceChannelInfo.data:type_name -> google.protobuf.Struct
	15, // 25: spaceone.api.alert_manager.v1.ServiceChannelInfo.tags:type_name -> google.protobuf.Struct
	13, // 26: spaceone.api.alert_manager.v1.ServiceChannelsInfo.results:type_name -> spaceone.api.alert_manager.v1.ServiceChannelInfo
	7,  // 27: spaceone.api.alert_manager.v1.ServiceChannel.create:input_type -> spaceone.api.alert_manager.v1.ServiceChannelCreateRequest
	8,  // 28: spaceone.api.alert_manager.v1.ServiceChannel.create_forward_channel:input_type -> spaceone.api.alert_manager.v1.ServiceChannelCreateForwardChannelRequest
	9,  // 29: spaceone.api.alert_manager.v1.ServiceChannel.update:input_type -> spaceone.api.alert_manager.v1.ServiceChannelUpdateRequest
	10, // 30: spaceone.api.alert_manager.v1.ServiceChannel.enable:input_type -> spaceone.api.alert_manager.v1.ServiceChannelRequest
	10, // 31: spaceone.api.alert_manager.v1.ServiceChannel.disable:input_type -> spaceone.api.alert_manager.v1.ServiceChannelRequest
	10, // 32: spaceone.api.alert_manager.v1.ServiceChannel.delete:input_type -> spaceone.api.alert_manager.v1.ServiceChannelRequest
	10, // 33: spaceone.api.alert_manager.v1.ServiceChannel.get:input_type -> spaceone.api.alert_manager.v1.ServiceChannelRequest
	11, // 34: spaceone.api.alert_manager.v1.ServiceChannel.list:input_type -> spaceone.api.alert_manager.v1.ServiceChannelSearchQuery
	12, // 35: spaceone.api.alert_manager.v1.ServiceChannel.stat:input_type -> spaceone.api.alert_manager.v1.ServiceChannelStatQuery
	13, // 36: spaceone.api.alert_manager.v1.ServiceChannel.create:output_type -> spaceone.api.alert_manager.v1.ServiceChannelInfo
	18, // 37: spaceone.api.alert_manager.v1.ServiceChannel.create_forward_channel:output_type -> google.protobuf.Empty
	13, // 38: spaceone.api.alert_manager.v1.ServiceChannel.update:output_type -> spaceone.api.alert_manager.v1.ServiceChannelInfo
	13, // 39: spaceone.api.alert_manager.v1.ServiceChannel.enable:output_type -> spaceone.api.alert_manager.v1.ServiceChannelInfo
	13, // 40: spaceone.api.alert_manager.v1.ServiceChannel.disable:output_type -> spaceone.api.alert_manager.v1.ServiceChannelInfo
	18, // 41: spaceone.api.alert_manager.v1.ServiceChannel.delete:output_type -> google.protobuf.Empty
	13, // 42: spaceone.api.alert_manager.v1.ServiceChannel.get:output_type -> spaceone.api.alert_manager.v1.ServiceChannelInfo
	14, // 43: spaceone.api.alert_manager.v1.ServiceChannel.list:output_type -> spaceone.api.alert_manager.v1.ServiceChannelsInfo
	15, // 44: spaceone.api.alert_manager.v1.ServiceChannel.stat:output_type -> google.protobuf.Struct
	36, // [36:45] is the sub-list for method output_type
	27, // [27:36] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_spaceone_api_alert_manager_v1_service_channel_proto_init() }
func file_spaceone_api_alert_manager_v1_service_channel_proto_init() {
	if File_spaceone_api_alert_manager_v1_service_channel_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spaceone_api_alert_manager_v1_service_channel_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spaceone_api_alert_manager_v1_service_channel_proto_goTypes,
		DependencyIndexes: file_spaceone_api_alert_manager_v1_service_channel_proto_depIdxs,
		EnumInfos:         file_spaceone_api_alert_manager_v1_service_channel_proto_enumTypes,
		MessageInfos:      file_spaceone_api_alert_manager_v1_service_channel_proto_msgTypes,
	}.Build()
	File_spaceone_api_alert_manager_v1_service_channel_proto = out.File
	file_spaceone_api_alert_manager_v1_service_channel_proto_rawDesc = nil
	file_spaceone_api_alert_manager_v1_service_channel_proto_goTypes = nil
	file_spaceone_api_alert_manager_v1_service_channel_proto_depIdxs = nil
}
