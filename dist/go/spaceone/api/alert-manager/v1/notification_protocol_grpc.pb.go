// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/alert_manager/v1/notification_protocol.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationProtocol_Create_FullMethodName       = "/spaceone.api.alert_manager.v1.NotificationProtocol/create"
	NotificationProtocol_Update_FullMethodName       = "/spaceone.api.alert_manager.v1.NotificationProtocol/update"
	NotificationProtocol_UpdatePlugin_FullMethodName = "/spaceone.api.alert_manager.v1.NotificationProtocol/update_plugin"
	NotificationProtocol_VerifyPlugin_FullMethodName = "/spaceone.api.alert_manager.v1.NotificationProtocol/verify_plugin"
	NotificationProtocol_Enable_FullMethodName       = "/spaceone.api.alert_manager.v1.NotificationProtocol/enable"
	NotificationProtocol_Disable_FullMethodName      = "/spaceone.api.alert_manager.v1.NotificationProtocol/disable"
	NotificationProtocol_Delete_FullMethodName       = "/spaceone.api.alert_manager.v1.NotificationProtocol/delete"
	NotificationProtocol_Get_FullMethodName          = "/spaceone.api.alert_manager.v1.NotificationProtocol/get"
	NotificationProtocol_List_FullMethodName         = "/spaceone.api.alert_manager.v1.NotificationProtocol/list"
	NotificationProtocol_Stat_FullMethodName         = "/spaceone.api.alert_manager.v1.NotificationProtocol/stat"
)

// NotificationProtocolClient is the client API for NotificationProtocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationProtocolClient interface {
	Create(ctx context.Context, in *NotificationProtocolCreateRequest, opts ...grpc.CallOption) (*NotificationProtocolInfo, error)
	Update(ctx context.Context, in *NotificationProtocolUpdateRequest, opts ...grpc.CallOption) (*NotificationProtocolInfo, error)
	UpdatePlugin(ctx context.Context, in *NotificationProtocolUpdatePluginRequest, opts ...grpc.CallOption) (*NotificationProtocolInfo, error)
	VerifyPlugin(ctx context.Context, in *NotificationProtocolRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Enable(ctx context.Context, in *NotificationProtocolRequest, opts ...grpc.CallOption) (*NotificationProtocolInfo, error)
	Disable(ctx context.Context, in *NotificationProtocolRequest, opts ...grpc.CallOption) (*NotificationProtocolInfo, error)
	Delete(ctx context.Context, in *NotificationProtocolRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *NotificationProtocolRequest, opts ...grpc.CallOption) (*NotificationProtocolInfo, error)
	List(ctx context.Context, in *NotificationProtocolSearchQuery, opts ...grpc.CallOption) (*NotificationProtocolsInfo, error)
	Stat(ctx context.Context, in *NotificationProtocolStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type notificationProtocolClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationProtocolClient(cc grpc.ClientConnInterface) NotificationProtocolClient {
	return &notificationProtocolClient{cc}
}

func (c *notificationProtocolClient) Create(ctx context.Context, in *NotificationProtocolCreateRequest, opts ...grpc.CallOption) (*NotificationProtocolInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationProtocolInfo)
	err := c.cc.Invoke(ctx, NotificationProtocol_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationProtocolClient) Update(ctx context.Context, in *NotificationProtocolUpdateRequest, opts ...grpc.CallOption) (*NotificationProtocolInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationProtocolInfo)
	err := c.cc.Invoke(ctx, NotificationProtocol_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationProtocolClient) UpdatePlugin(ctx context.Context, in *NotificationProtocolUpdatePluginRequest, opts ...grpc.CallOption) (*NotificationProtocolInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationProtocolInfo)
	err := c.cc.Invoke(ctx, NotificationProtocol_UpdatePlugin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationProtocolClient) VerifyPlugin(ctx context.Context, in *NotificationProtocolRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, NotificationProtocol_VerifyPlugin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationProtocolClient) Enable(ctx context.Context, in *NotificationProtocolRequest, opts ...grpc.CallOption) (*NotificationProtocolInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationProtocolInfo)
	err := c.cc.Invoke(ctx, NotificationProtocol_Enable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationProtocolClient) Disable(ctx context.Context, in *NotificationProtocolRequest, opts ...grpc.CallOption) (*NotificationProtocolInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationProtocolInfo)
	err := c.cc.Invoke(ctx, NotificationProtocol_Disable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationProtocolClient) Delete(ctx context.Context, in *NotificationProtocolRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, NotificationProtocol_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationProtocolClient) Get(ctx context.Context, in *NotificationProtocolRequest, opts ...grpc.CallOption) (*NotificationProtocolInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationProtocolInfo)
	err := c.cc.Invoke(ctx, NotificationProtocol_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationProtocolClient) List(ctx context.Context, in *NotificationProtocolSearchQuery, opts ...grpc.CallOption) (*NotificationProtocolsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationProtocolsInfo)
	err := c.cc.Invoke(ctx, NotificationProtocol_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationProtocolClient) Stat(ctx context.Context, in *NotificationProtocolStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, NotificationProtocol_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationProtocolServer is the server API for NotificationProtocol service.
// All implementations must embed UnimplementedNotificationProtocolServer
// for forward compatibility.
type NotificationProtocolServer interface {
	Create(context.Context, *NotificationProtocolCreateRequest) (*NotificationProtocolInfo, error)
	Update(context.Context, *NotificationProtocolUpdateRequest) (*NotificationProtocolInfo, error)
	UpdatePlugin(context.Context, *NotificationProtocolUpdatePluginRequest) (*NotificationProtocolInfo, error)
	VerifyPlugin(context.Context, *NotificationProtocolRequest) (*empty.Empty, error)
	Enable(context.Context, *NotificationProtocolRequest) (*NotificationProtocolInfo, error)
	Disable(context.Context, *NotificationProtocolRequest) (*NotificationProtocolInfo, error)
	Delete(context.Context, *NotificationProtocolRequest) (*empty.Empty, error)
	Get(context.Context, *NotificationProtocolRequest) (*NotificationProtocolInfo, error)
	List(context.Context, *NotificationProtocolSearchQuery) (*NotificationProtocolsInfo, error)
	Stat(context.Context, *NotificationProtocolStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedNotificationProtocolServer()
}

// UnimplementedNotificationProtocolServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationProtocolServer struct{}

func (UnimplementedNotificationProtocolServer) Create(context.Context, *NotificationProtocolCreateRequest) (*NotificationProtocolInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNotificationProtocolServer) Update(context.Context, *NotificationProtocolUpdateRequest) (*NotificationProtocolInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedNotificationProtocolServer) UpdatePlugin(context.Context, *NotificationProtocolUpdatePluginRequest) (*NotificationProtocolInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlugin not implemented")
}
func (UnimplementedNotificationProtocolServer) VerifyPlugin(context.Context, *NotificationProtocolRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPlugin not implemented")
}
func (UnimplementedNotificationProtocolServer) Enable(context.Context, *NotificationProtocolRequest) (*NotificationProtocolInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedNotificationProtocolServer) Disable(context.Context, *NotificationProtocolRequest) (*NotificationProtocolInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedNotificationProtocolServer) Delete(context.Context, *NotificationProtocolRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNotificationProtocolServer) Get(context.Context, *NotificationProtocolRequest) (*NotificationProtocolInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedNotificationProtocolServer) List(context.Context, *NotificationProtocolSearchQuery) (*NotificationProtocolsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedNotificationProtocolServer) Stat(context.Context, *NotificationProtocolStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedNotificationProtocolServer) mustEmbedUnimplementedNotificationProtocolServer() {}
func (UnimplementedNotificationProtocolServer) testEmbeddedByValue()                              {}

// UnsafeNotificationProtocolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationProtocolServer will
// result in compilation errors.
type UnsafeNotificationProtocolServer interface {
	mustEmbedUnimplementedNotificationProtocolServer()
}

func RegisterNotificationProtocolServer(s grpc.ServiceRegistrar, srv NotificationProtocolServer) {
	// If the following call pancis, it indicates UnimplementedNotificationProtocolServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationProtocol_ServiceDesc, srv)
}

func _NotificationProtocol_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationProtocolCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationProtocolServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationProtocol_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationProtocolServer).Create(ctx, req.(*NotificationProtocolCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationProtocol_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationProtocolUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationProtocolServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationProtocol_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationProtocolServer).Update(ctx, req.(*NotificationProtocolUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationProtocol_UpdatePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationProtocolUpdatePluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationProtocolServer).UpdatePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationProtocol_UpdatePlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationProtocolServer).UpdatePlugin(ctx, req.(*NotificationProtocolUpdatePluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationProtocol_VerifyPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationProtocolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationProtocolServer).VerifyPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationProtocol_VerifyPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationProtocolServer).VerifyPlugin(ctx, req.(*NotificationProtocolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationProtocol_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationProtocolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationProtocolServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationProtocol_Enable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationProtocolServer).Enable(ctx, req.(*NotificationProtocolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationProtocol_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationProtocolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationProtocolServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationProtocol_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationProtocolServer).Disable(ctx, req.(*NotificationProtocolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationProtocol_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationProtocolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationProtocolServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationProtocol_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationProtocolServer).Delete(ctx, req.(*NotificationProtocolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationProtocol_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationProtocolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationProtocolServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationProtocol_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationProtocolServer).Get(ctx, req.(*NotificationProtocolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationProtocol_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationProtocolSearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationProtocolServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationProtocol_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationProtocolServer).List(ctx, req.(*NotificationProtocolSearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationProtocol_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationProtocolStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationProtocolServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationProtocol_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationProtocolServer).Stat(ctx, req.(*NotificationProtocolStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationProtocol_ServiceDesc is the grpc.ServiceDesc for NotificationProtocol service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationProtocol_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.alert_manager.v1.NotificationProtocol",
	HandlerType: (*NotificationProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _NotificationProtocol_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _NotificationProtocol_Update_Handler,
		},
		{
			MethodName: "update_plugin",
			Handler:    _NotificationProtocol_UpdatePlugin_Handler,
		},
		{
			MethodName: "verify_plugin",
			Handler:    _NotificationProtocol_VerifyPlugin_Handler,
		},
		{
			MethodName: "enable",
			Handler:    _NotificationProtocol_Enable_Handler,
		},
		{
			MethodName: "disable",
			Handler:    _NotificationProtocol_Disable_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _NotificationProtocol_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _NotificationProtocol_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _NotificationProtocol_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _NotificationProtocol_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/alert_manager/v1/notification_protocol.proto",
}
