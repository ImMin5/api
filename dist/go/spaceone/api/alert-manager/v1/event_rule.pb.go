// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.6.1
// source: spaceone/api/alert_manager/v1/event_rule.proto

package v1

import (
	v2 "github.com/cloudforet-io/api/dist/go/spaceone/api/core/v2"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Options int32

const (
	Options_NONE  Options = 0
	Options_True  Options = 1
	Options_False Options = 2
)

// Enum value maps for Options.
var (
	Options_name = map[int32]string{
		0: "NONE",
		1: "True",
		2: "False",
	}
	Options_value = map[string]int32{
		"NONE":  0,
		"True":  1,
		"False": 2,
	}
)

func (x Options) Enum() *Options {
	p := new(Options)
	*p = x
	return p
}

func (x Options) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Options) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_alert_manager_v1_event_rule_proto_enumTypes[0].Descriptor()
}

func (Options) Type() protoreflect.EnumType {
	return &file_spaceone_api_alert_manager_v1_event_rule_proto_enumTypes[0]
}

func (x Options) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Options.Descriptor instead.
func (Options) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_event_rule_proto_rawDescGZIP(), []int{0}
}

type ConditionsPolicy int32

const (
	ConditionsPolicy_CONDITION_POLICY_NONE ConditionsPolicy = 0
	ConditionsPolicy_ALL                   ConditionsPolicy = 1
	ConditionsPolicy_ANY                   ConditionsPolicy = 2
	ConditionsPolicy_ALWAYS                ConditionsPolicy = 3
)

// Enum value maps for ConditionsPolicy.
var (
	ConditionsPolicy_name = map[int32]string{
		0: "CONDITION_POLICY_NONE",
		1: "ALL",
		2: "ANY",
		3: "ALWAYS",
	}
	ConditionsPolicy_value = map[string]int32{
		"CONDITION_POLICY_NONE": 0,
		"ALL":                   1,
		"ANY":                   2,
		"ALWAYS":                3,
	}
)

func (x ConditionsPolicy) Enum() *ConditionsPolicy {
	p := new(ConditionsPolicy)
	*p = x
	return p
}

func (x ConditionsPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionsPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_alert_manager_v1_event_rule_proto_enumTypes[1].Descriptor()
}

func (ConditionsPolicy) Type() protoreflect.EnumType {
	return &file_spaceone_api_alert_manager_v1_event_rule_proto_enumTypes[1]
}

func (x ConditionsPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionsPolicy.Descriptor instead.
func (ConditionsPolicy) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_event_rule_proto_rawDescGZIP(), []int{1}
}

// ////////
// Receive
// ////////
type EventRuleCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +optional
	Name             string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Conditions       []*_struct.Struct `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
	ConditionsPolicy ConditionsPolicy  `protobuf:"varint,3,opt,name=conditions_policy,json=conditionsPolicy,proto3,enum=spaceone.api.alert_manager.v1.ConditionsPolicy" json:"conditions_policy,omitempty"`
	Actions          *_struct.Struct   `protobuf:"bytes,4,opt,name=actions,proto3" json:"actions,omitempty"`
	// +optional
	Options Options `protobuf:"varint,5,opt,name=options,proto3,enum=spaceone.api.alert_manager.v1.Options" json:"options,omitempty"`
	// +optional
	Tags      *_struct.Struct `protobuf:"bytes,6,opt,name=tags,proto3" json:"tags,omitempty"`
	ServiceId string          `protobuf:"bytes,7,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (x *EventRuleCreateRequest) Reset() {
	*x = EventRuleCreateRequest{}
	mi := &file_spaceone_api_alert_manager_v1_event_rule_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRuleCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRuleCreateRequest) ProtoMessage() {}

func (x *EventRuleCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_alert_manager_v1_event_rule_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRuleCreateRequest.ProtoReflect.Descriptor instead.
func (*EventRuleCreateRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_event_rule_proto_rawDescGZIP(), []int{0}
}

func (x *EventRuleCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventRuleCreateRequest) GetConditions() []*_struct.Struct {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *EventRuleCreateRequest) GetConditionsPolicy() ConditionsPolicy {
	if x != nil {
		return x.ConditionsPolicy
	}
	return ConditionsPolicy_CONDITION_POLICY_NONE
}

func (x *EventRuleCreateRequest) GetActions() *_struct.Struct {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *EventRuleCreateRequest) GetOptions() Options {
	if x != nil {
		return x.Options
	}
	return Options_NONE
}

func (x *EventRuleCreateRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *EventRuleCreateRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

type EventRuleChangeMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventRuleId string `protobuf:"bytes,1,opt,name=event_rule_id,json=eventRuleId,proto3" json:"event_rule_id,omitempty"`
	Order       int32  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *EventRuleChangeMemberRequest) Reset() {
	*x = EventRuleChangeMemberRequest{}
	mi := &file_spaceone_api_alert_manager_v1_event_rule_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRuleChangeMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRuleChangeMemberRequest) ProtoMessage() {}

func (x *EventRuleChangeMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_alert_manager_v1_event_rule_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRuleChangeMemberRequest.ProtoReflect.Descriptor instead.
func (*EventRuleChangeMemberRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_event_rule_proto_rawDescGZIP(), []int{1}
}

func (x *EventRuleChangeMemberRequest) GetEventRuleId() string {
	if x != nil {
		return x.EventRuleId
	}
	return ""
}

func (x *EventRuleChangeMemberRequest) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type EventRuleUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventRuleId string `protobuf:"bytes,1,opt,name=event_rule_id,json=eventRuleId,proto3" json:"event_rule_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	Conditions []*_struct.Struct `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// +optional
	ConditionsPolicy ConditionsPolicy `protobuf:"varint,4,opt,name=conditions_policy,json=conditionsPolicy,proto3,enum=spaceone.api.alert_manager.v1.ConditionsPolicy" json:"conditions_policy,omitempty"`
	// +optional
	Actions *_struct.Struct `protobuf:"bytes,5,opt,name=actions,proto3" json:"actions,omitempty"`
	// +optional
	Options Options `protobuf:"varint,6,opt,name=options,proto3,enum=spaceone.api.alert_manager.v1.Options" json:"options,omitempty"`
	// +optional
	Tags *_struct.Struct `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *EventRuleUpdateRequest) Reset() {
	*x = EventRuleUpdateRequest{}
	mi := &file_spaceone_api_alert_manager_v1_event_rule_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRuleUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRuleUpdateRequest) ProtoMessage() {}

func (x *EventRuleUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_alert_manager_v1_event_rule_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRuleUpdateRequest.ProtoReflect.Descriptor instead.
func (*EventRuleUpdateRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_event_rule_proto_rawDescGZIP(), []int{2}
}

func (x *EventRuleUpdateRequest) GetEventRuleId() string {
	if x != nil {
		return x.EventRuleId
	}
	return ""
}

func (x *EventRuleUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventRuleUpdateRequest) GetConditions() []*_struct.Struct {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *EventRuleUpdateRequest) GetConditionsPolicy() ConditionsPolicy {
	if x != nil {
		return x.ConditionsPolicy
	}
	return ConditionsPolicy_CONDITION_POLICY_NONE
}

func (x *EventRuleUpdateRequest) GetActions() *_struct.Struct {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *EventRuleUpdateRequest) GetOptions() Options {
	if x != nil {
		return x.Options
	}
	return Options_NONE
}

func (x *EventRuleUpdateRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

type EventRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventRuleId string `protobuf:"bytes,1,opt,name=event_rule_id,json=eventRuleId,proto3" json:"event_rule_id,omitempty"`
}

func (x *EventRuleRequest) Reset() {
	*x = EventRuleRequest{}
	mi := &file_spaceone_api_alert_manager_v1_event_rule_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRuleRequest) ProtoMessage() {}

func (x *EventRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_alert_manager_v1_event_rule_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRuleRequest.ProtoReflect.Descriptor instead.
func (*EventRuleRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_event_rule_proto_rawDescGZIP(), []int{3}
}

func (x *EventRuleRequest) GetEventRuleId() string {
	if x != nil {
		return x.EventRuleId
	}
	return ""
}

type EventRuleSearchQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +optional
	Query *v2.Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// +optional
	EventRuleId string `protobuf:"bytes,2,opt,name=event_rule_id,json=eventRuleId,proto3" json:"event_rule_id,omitempty"`
	// +optional
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// +optional
	ResourceGroup string `protobuf:"bytes,4,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	// +optional
	WorkspaceId string `protobuf:"bytes,5,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// +optional
	ProjectId string `protobuf:"bytes,6,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *EventRuleSearchQuery) Reset() {
	*x = EventRuleSearchQuery{}
	mi := &file_spaceone_api_alert_manager_v1_event_rule_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRuleSearchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRuleSearchQuery) ProtoMessage() {}

func (x *EventRuleSearchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_alert_manager_v1_event_rule_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRuleSearchQuery.ProtoReflect.Descriptor instead.
func (*EventRuleSearchQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_event_rule_proto_rawDescGZIP(), []int{4}
}

func (x *EventRuleSearchQuery) GetQuery() *v2.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *EventRuleSearchQuery) GetEventRuleId() string {
	if x != nil {
		return x.EventRuleId
	}
	return ""
}

func (x *EventRuleSearchQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventRuleSearchQuery) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

func (x *EventRuleSearchQuery) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *EventRuleSearchQuery) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type EventRuleStatQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *v2.StatisticsQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *EventRuleStatQuery) Reset() {
	*x = EventRuleStatQuery{}
	mi := &file_spaceone_api_alert_manager_v1_event_rule_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRuleStatQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRuleStatQuery) ProtoMessage() {}

func (x *EventRuleStatQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_alert_manager_v1_event_rule_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRuleStatQuery.ProtoReflect.Descriptor instead.
func (*EventRuleStatQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_event_rule_proto_rawDescGZIP(), []int{5}
}

func (x *EventRuleStatQuery) GetQuery() *v2.StatisticsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type EventRuleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventRuleId      string            `protobuf:"bytes,1,opt,name=event_rule_id,json=eventRuleId,proto3" json:"event_rule_id,omitempty"`
	Name             string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Order            int32             `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	Conditions       []*_struct.Struct `protobuf:"bytes,4,rep,name=conditions,proto3" json:"conditions,omitempty"`
	ConditionsPolicy ConditionsPolicy  `protobuf:"varint,5,opt,name=conditions_policy,json=conditionsPolicy,proto3,enum=spaceone.api.alert_manager.v1.ConditionsPolicy" json:"conditions_policy,omitempty"`
	Actions          *_struct.Struct   `protobuf:"bytes,6,opt,name=actions,proto3" json:"actions,omitempty"`
	Options          Options           `protobuf:"varint,7,opt,name=options,proto3,enum=spaceone.api.alert_manager.v1.Options" json:"options,omitempty"`
	Tags             *_struct.Struct   `protobuf:"bytes,8,opt,name=tags,proto3" json:"tags,omitempty"`
	ServiceId        string            `protobuf:"bytes,10,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	WorkspaceId      string            `protobuf:"bytes,11,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	DomainId         string            `protobuf:"bytes,12,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	CreatedAt        string            `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *EventRuleInfo) Reset() {
	*x = EventRuleInfo{}
	mi := &file_spaceone_api_alert_manager_v1_event_rule_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRuleInfo) ProtoMessage() {}

func (x *EventRuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_alert_manager_v1_event_rule_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRuleInfo.ProtoReflect.Descriptor instead.
func (*EventRuleInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_event_rule_proto_rawDescGZIP(), []int{6}
}

func (x *EventRuleInfo) GetEventRuleId() string {
	if x != nil {
		return x.EventRuleId
	}
	return ""
}

func (x *EventRuleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventRuleInfo) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *EventRuleInfo) GetConditions() []*_struct.Struct {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *EventRuleInfo) GetConditionsPolicy() ConditionsPolicy {
	if x != nil {
		return x.ConditionsPolicy
	}
	return ConditionsPolicy_CONDITION_POLICY_NONE
}

func (x *EventRuleInfo) GetActions() *_struct.Struct {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *EventRuleInfo) GetOptions() Options {
	if x != nil {
		return x.Options
	}
	return Options_NONE
}

func (x *EventRuleInfo) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *EventRuleInfo) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *EventRuleInfo) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *EventRuleInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *EventRuleInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type EventRulesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results    []*EventRuleInfo `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TotalCount int32            `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *EventRulesInfo) Reset() {
	*x = EventRulesInfo{}
	mi := &file_spaceone_api_alert_manager_v1_event_rule_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRulesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRulesInfo) ProtoMessage() {}

func (x *EventRulesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_alert_manager_v1_event_rule_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRulesInfo.ProtoReflect.Descriptor instead.
func (*EventRulesInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_alert_manager_v1_event_rule_proto_rawDescGZIP(), []int{7}
}

func (x *EventRulesInfo) GetResults() []*EventRuleInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *EventRulesInfo) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

var File_spaceone_api_alert_manager_v1_event_rule_proto protoreflect.FileDescriptor

var file_spaceone_api_alert_manager_v1_event_rule_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x03, 0x0a, 0x16, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x5c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x31, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x58, 0x0a, 0x1c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x89, 0x03, 0x0a, 0x16,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x36, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0xea, 0x01, 0x0a, 0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x12,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22,
	0x94, 0x04, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x79, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x2a, 0x28, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x72, 0x75, 0x65, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x10, 0x02, 0x2a, 0x4b, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c,
	0x4c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x10, 0x03, 0x32, 0x9c, 0x08, 0x0a, 0x09, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x35, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01,
	0x2a, 0x22, 0x20, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x9a, 0x01, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x2e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x7e, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x8e, 0x01, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x2f, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f,
	0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01,
	0x2a, 0x22, 0x1d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74,
	0x12, 0x95, 0x01, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x2d,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x29, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x7d, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74,
	0x12, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x29, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x42, 0x44, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x72, 0x65, 0x74,
	0x2d, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2f,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spaceone_api_alert_manager_v1_event_rule_proto_rawDescOnce sync.Once
	file_spaceone_api_alert_manager_v1_event_rule_proto_rawDescData = file_spaceone_api_alert_manager_v1_event_rule_proto_rawDesc
)

func file_spaceone_api_alert_manager_v1_event_rule_proto_rawDescGZIP() []byte {
	file_spaceone_api_alert_manager_v1_event_rule_proto_rawDescOnce.Do(func() {
		file_spaceone_api_alert_manager_v1_event_rule_proto_rawDescData = protoimpl.X.CompressGZIP(file_spaceone_api_alert_manager_v1_event_rule_proto_rawDescData)
	})
	return file_spaceone_api_alert_manager_v1_event_rule_proto_rawDescData
}

var file_spaceone_api_alert_manager_v1_event_rule_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_spaceone_api_alert_manager_v1_event_rule_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_spaceone_api_alert_manager_v1_event_rule_proto_goTypes = []any{
	(Options)(0),                         // 0: spaceone.api.alert_manager.v1.Options
	(ConditionsPolicy)(0),                // 1: spaceone.api.alert_manager.v1.ConditionsPolicy
	(*EventRuleCreateRequest)(nil),       // 2: spaceone.api.alert_manager.v1.EventRuleCreateRequest
	(*EventRuleChangeMemberRequest)(nil), // 3: spaceone.api.alert_manager.v1.EventRuleChangeMemberRequest
	(*EventRuleUpdateRequest)(nil),       // 4: spaceone.api.alert_manager.v1.EventRuleUpdateRequest
	(*EventRuleRequest)(nil),             // 5: spaceone.api.alert_manager.v1.EventRuleRequest
	(*EventRuleSearchQuery)(nil),         // 6: spaceone.api.alert_manager.v1.EventRuleSearchQuery
	(*EventRuleStatQuery)(nil),           // 7: spaceone.api.alert_manager.v1.EventRuleStatQuery
	(*EventRuleInfo)(nil),                // 8: spaceone.api.alert_manager.v1.EventRuleInfo
	(*EventRulesInfo)(nil),               // 9: spaceone.api.alert_manager.v1.EventRulesInfo
	(*_struct.Struct)(nil),               // 10: google.protobuf.Struct
	(*v2.Query)(nil),                     // 11: spaceone.api.core.v2.Query
	(*v2.StatisticsQuery)(nil),           // 12: spaceone.api.core.v2.StatisticsQuery
	(*empty.Empty)(nil),                  // 13: google.protobuf.Empty
}
var file_spaceone_api_alert_manager_v1_event_rule_proto_depIdxs = []int32{
	10, // 0: spaceone.api.alert_manager.v1.EventRuleCreateRequest.conditions:type_name -> google.protobuf.Struct
	1,  // 1: spaceone.api.alert_manager.v1.EventRuleCreateRequest.conditions_policy:type_name -> spaceone.api.alert_manager.v1.ConditionsPolicy
	10, // 2: spaceone.api.alert_manager.v1.EventRuleCreateRequest.actions:type_name -> google.protobuf.Struct
	0,  // 3: spaceone.api.alert_manager.v1.EventRuleCreateRequest.options:type_name -> spaceone.api.alert_manager.v1.Options
	10, // 4: spaceone.api.alert_manager.v1.EventRuleCreateRequest.tags:type_name -> google.protobuf.Struct
	10, // 5: spaceone.api.alert_manager.v1.EventRuleUpdateRequest.conditions:type_name -> google.protobuf.Struct
	1,  // 6: spaceone.api.alert_manager.v1.EventRuleUpdateRequest.conditions_policy:type_name -> spaceone.api.alert_manager.v1.ConditionsPolicy
	10, // 7: spaceone.api.alert_manager.v1.EventRuleUpdateRequest.actions:type_name -> google.protobuf.Struct
	0,  // 8: spaceone.api.alert_manager.v1.EventRuleUpdateRequest.options:type_name -> spaceone.api.alert_manager.v1.Options
	10, // 9: spaceone.api.alert_manager.v1.EventRuleUpdateRequest.tags:type_name -> google.protobuf.Struct
	11, // 10: spaceone.api.alert_manager.v1.EventRuleSearchQuery.query:type_name -> spaceone.api.core.v2.Query
	12, // 11: spaceone.api.alert_manager.v1.EventRuleStatQuery.query:type_name -> spaceone.api.core.v2.StatisticsQuery
	10, // 12: spaceone.api.alert_manager.v1.EventRuleInfo.conditions:type_name -> google.protobuf.Struct
	1,  // 13: spaceone.api.alert_manager.v1.EventRuleInfo.conditions_policy:type_name -> spaceone.api.alert_manager.v1.ConditionsPolicy
	10, // 14: spaceone.api.alert_manager.v1.EventRuleInfo.actions:type_name -> google.protobuf.Struct
	0,  // 15: spaceone.api.alert_manager.v1.EventRuleInfo.options:type_name -> spaceone.api.alert_manager.v1.Options
	10, // 16: spaceone.api.alert_manager.v1.EventRuleInfo.tags:type_name -> google.protobuf.Struct
	8,  // 17: spaceone.api.alert_manager.v1.EventRulesInfo.results:type_name -> spaceone.api.alert_manager.v1.EventRuleInfo
	2,  // 18: spaceone.api.alert_manager.v1.EventRule.create:input_type -> spaceone.api.alert_manager.v1.EventRuleCreateRequest
	3,  // 19: spaceone.api.alert_manager.v1.EventRule.change_order:input_type -> spaceone.api.alert_manager.v1.EventRuleChangeMemberRequest
	4,  // 20: spaceone.api.alert_manager.v1.EventRule.update:input_type -> spaceone.api.alert_manager.v1.EventRuleUpdateRequest
	5,  // 21: spaceone.api.alert_manager.v1.EventRule.delete:input_type -> spaceone.api.alert_manager.v1.EventRuleRequest
	5,  // 22: spaceone.api.alert_manager.v1.EventRule.get:input_type -> spaceone.api.alert_manager.v1.EventRuleRequest
	6,  // 23: spaceone.api.alert_manager.v1.EventRule.list:input_type -> spaceone.api.alert_manager.v1.EventRuleSearchQuery
	7,  // 24: spaceone.api.alert_manager.v1.EventRule.stat:input_type -> spaceone.api.alert_manager.v1.EventRuleStatQuery
	8,  // 25: spaceone.api.alert_manager.v1.EventRule.create:output_type -> spaceone.api.alert_manager.v1.EventRuleInfo
	8,  // 26: spaceone.api.alert_manager.v1.EventRule.change_order:output_type -> spaceone.api.alert_manager.v1.EventRuleInfo
	8,  // 27: spaceone.api.alert_manager.v1.EventRule.update:output_type -> spaceone.api.alert_manager.v1.EventRuleInfo
	13, // 28: spaceone.api.alert_manager.v1.EventRule.delete:output_type -> google.protobuf.Empty
	8,  // 29: spaceone.api.alert_manager.v1.EventRule.get:output_type -> spaceone.api.alert_manager.v1.EventRuleInfo
	9,  // 30: spaceone.api.alert_manager.v1.EventRule.list:output_type -> spaceone.api.alert_manager.v1.EventRulesInfo
	10, // 31: spaceone.api.alert_manager.v1.EventRule.stat:output_type -> google.protobuf.Struct
	25, // [25:32] is the sub-list for method output_type
	18, // [18:25] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_spaceone_api_alert_manager_v1_event_rule_proto_init() }
func file_spaceone_api_alert_manager_v1_event_rule_proto_init() {
	if File_spaceone_api_alert_manager_v1_event_rule_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spaceone_api_alert_manager_v1_event_rule_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spaceone_api_alert_manager_v1_event_rule_proto_goTypes,
		DependencyIndexes: file_spaceone_api_alert_manager_v1_event_rule_proto_depIdxs,
		EnumInfos:         file_spaceone_api_alert_manager_v1_event_rule_proto_enumTypes,
		MessageInfos:      file_spaceone_api_alert_manager_v1_event_rule_proto_msgTypes,
	}.Build()
	File_spaceone_api_alert_manager_v1_event_rule_proto = out.File
	file_spaceone_api_alert_manager_v1_event_rule_proto_rawDesc = nil
	file_spaceone_api_alert_manager_v1_event_rule_proto_goTypes = nil
	file_spaceone_api_alert_manager_v1_event_rule_proto_depIdxs = nil
}
