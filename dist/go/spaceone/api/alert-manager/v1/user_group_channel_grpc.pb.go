// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/alert_manager/v1/user_group_channel.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserGroupChannel_Create_FullMethodName  = "/spaceone.api.alert_manager.v1.UserGroupChannel/create"
	UserGroupChannel_Update_FullMethodName  = "/spaceone.api.alert_manager.v1.UserGroupChannel/update"
	UserGroupChannel_Enable_FullMethodName  = "/spaceone.api.alert_manager.v1.UserGroupChannel/enable"
	UserGroupChannel_Disable_FullMethodName = "/spaceone.api.alert_manager.v1.UserGroupChannel/disable"
	UserGroupChannel_Delete_FullMethodName  = "/spaceone.api.alert_manager.v1.UserGroupChannel/delete"
	UserGroupChannel_Get_FullMethodName     = "/spaceone.api.alert_manager.v1.UserGroupChannel/get"
	UserGroupChannel_List_FullMethodName    = "/spaceone.api.alert_manager.v1.UserGroupChannel/list"
	UserGroupChannel_Stat_FullMethodName    = "/spaceone.api.alert_manager.v1.UserGroupChannel/stat"
)

// UserGroupChannelClient is the client API for UserGroupChannel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserGroupChannelClient interface {
	Create(ctx context.Context, in *UserGroupChannelCreateRequest, opts ...grpc.CallOption) (*UserGroupChannelInfo, error)
	Update(ctx context.Context, in *UserGroupChannelUpdateRequest, opts ...grpc.CallOption) (*UserGroupChannelInfo, error)
	Enable(ctx context.Context, in *UserGroupChannelRequest, opts ...grpc.CallOption) (*UserGroupChannelInfo, error)
	Disable(ctx context.Context, in *UserGroupChannelRequest, opts ...grpc.CallOption) (*UserGroupChannelInfo, error)
	Delete(ctx context.Context, in *UserGroupChannelRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *UserGroupChannelRequest, opts ...grpc.CallOption) (*UserGroupChannelInfo, error)
	List(ctx context.Context, in *UserGroupChannelSearchQuery, opts ...grpc.CallOption) (*UserGroupChannelsInfo, error)
	Stat(ctx context.Context, in *UserGroupChannelStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type userGroupChannelClient struct {
	cc grpc.ClientConnInterface
}

func NewUserGroupChannelClient(cc grpc.ClientConnInterface) UserGroupChannelClient {
	return &userGroupChannelClient{cc}
}

func (c *userGroupChannelClient) Create(ctx context.Context, in *UserGroupChannelCreateRequest, opts ...grpc.CallOption) (*UserGroupChannelInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserGroupChannelInfo)
	err := c.cc.Invoke(ctx, UserGroupChannel_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupChannelClient) Update(ctx context.Context, in *UserGroupChannelUpdateRequest, opts ...grpc.CallOption) (*UserGroupChannelInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserGroupChannelInfo)
	err := c.cc.Invoke(ctx, UserGroupChannel_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupChannelClient) Enable(ctx context.Context, in *UserGroupChannelRequest, opts ...grpc.CallOption) (*UserGroupChannelInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserGroupChannelInfo)
	err := c.cc.Invoke(ctx, UserGroupChannel_Enable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupChannelClient) Disable(ctx context.Context, in *UserGroupChannelRequest, opts ...grpc.CallOption) (*UserGroupChannelInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserGroupChannelInfo)
	err := c.cc.Invoke(ctx, UserGroupChannel_Disable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupChannelClient) Delete(ctx context.Context, in *UserGroupChannelRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, UserGroupChannel_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupChannelClient) Get(ctx context.Context, in *UserGroupChannelRequest, opts ...grpc.CallOption) (*UserGroupChannelInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserGroupChannelInfo)
	err := c.cc.Invoke(ctx, UserGroupChannel_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupChannelClient) List(ctx context.Context, in *UserGroupChannelSearchQuery, opts ...grpc.CallOption) (*UserGroupChannelsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserGroupChannelsInfo)
	err := c.cc.Invoke(ctx, UserGroupChannel_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupChannelClient) Stat(ctx context.Context, in *UserGroupChannelStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, UserGroupChannel_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserGroupChannelServer is the server API for UserGroupChannel service.
// All implementations must embed UnimplementedUserGroupChannelServer
// for forward compatibility.
type UserGroupChannelServer interface {
	Create(context.Context, *UserGroupChannelCreateRequest) (*UserGroupChannelInfo, error)
	Update(context.Context, *UserGroupChannelUpdateRequest) (*UserGroupChannelInfo, error)
	Enable(context.Context, *UserGroupChannelRequest) (*UserGroupChannelInfo, error)
	Disable(context.Context, *UserGroupChannelRequest) (*UserGroupChannelInfo, error)
	Delete(context.Context, *UserGroupChannelRequest) (*empty.Empty, error)
	Get(context.Context, *UserGroupChannelRequest) (*UserGroupChannelInfo, error)
	List(context.Context, *UserGroupChannelSearchQuery) (*UserGroupChannelsInfo, error)
	Stat(context.Context, *UserGroupChannelStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedUserGroupChannelServer()
}

// UnimplementedUserGroupChannelServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserGroupChannelServer struct{}

func (UnimplementedUserGroupChannelServer) Create(context.Context, *UserGroupChannelCreateRequest) (*UserGroupChannelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserGroupChannelServer) Update(context.Context, *UserGroupChannelUpdateRequest) (*UserGroupChannelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserGroupChannelServer) Enable(context.Context, *UserGroupChannelRequest) (*UserGroupChannelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedUserGroupChannelServer) Disable(context.Context, *UserGroupChannelRequest) (*UserGroupChannelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedUserGroupChannelServer) Delete(context.Context, *UserGroupChannelRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserGroupChannelServer) Get(context.Context, *UserGroupChannelRequest) (*UserGroupChannelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserGroupChannelServer) List(context.Context, *UserGroupChannelSearchQuery) (*UserGroupChannelsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedUserGroupChannelServer) Stat(context.Context, *UserGroupChannelStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedUserGroupChannelServer) mustEmbedUnimplementedUserGroupChannelServer() {}
func (UnimplementedUserGroupChannelServer) testEmbeddedByValue()                          {}

// UnsafeUserGroupChannelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserGroupChannelServer will
// result in compilation errors.
type UnsafeUserGroupChannelServer interface {
	mustEmbedUnimplementedUserGroupChannelServer()
}

func RegisterUserGroupChannelServer(s grpc.ServiceRegistrar, srv UserGroupChannelServer) {
	// If the following call pancis, it indicates UnimplementedUserGroupChannelServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserGroupChannel_ServiceDesc, srv)
}

func _UserGroupChannel_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupChannelCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupChannelServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroupChannel_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupChannelServer).Create(ctx, req.(*UserGroupChannelCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupChannel_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupChannelUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupChannelServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroupChannel_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupChannelServer).Update(ctx, req.(*UserGroupChannelUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupChannel_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupChannelServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroupChannel_Enable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupChannelServer).Enable(ctx, req.(*UserGroupChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupChannel_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupChannelServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroupChannel_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupChannelServer).Disable(ctx, req.(*UserGroupChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupChannel_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupChannelServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroupChannel_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupChannelServer).Delete(ctx, req.(*UserGroupChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupChannel_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupChannelServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroupChannel_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupChannelServer).Get(ctx, req.(*UserGroupChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupChannel_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupChannelSearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupChannelServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroupChannel_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupChannelServer).List(ctx, req.(*UserGroupChannelSearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupChannel_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupChannelStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupChannelServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroupChannel_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupChannelServer).Stat(ctx, req.(*UserGroupChannelStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// UserGroupChannel_ServiceDesc is the grpc.ServiceDesc for UserGroupChannel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserGroupChannel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.alert_manager.v1.UserGroupChannel",
	HandlerType: (*UserGroupChannelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _UserGroupChannel_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _UserGroupChannel_Update_Handler,
		},
		{
			MethodName: "enable",
			Handler:    _UserGroupChannel_Enable_Handler,
		},
		{
			MethodName: "disable",
			Handler:    _UserGroupChannel_Disable_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _UserGroupChannel_Delete_Handler,
		},
		{
			MethodName: "get",
			Handler:    _UserGroupChannel_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _UserGroupChannel_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _UserGroupChannel_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/alert_manager/v1/user_group_channel.proto",
}
