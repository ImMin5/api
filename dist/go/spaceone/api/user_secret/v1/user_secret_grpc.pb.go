// UserSecret is a service that stores and manages credentials.
// UserSecret is used to store credentials for a specific user.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.6.1
// source: spaceone/api/secret/v1/user_secret.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserSecret_Create_FullMethodName     = "/spaceone.api.user_secret.v1.UserSecret/create"
	UserSecret_Update_FullMethodName     = "/spaceone.api.user_secret.v1.UserSecret/update"
	UserSecret_Delete_FullMethodName     = "/spaceone.api.user_secret.v1.UserSecret/delete"
	UserSecret_UpdateData_FullMethodName = "/spaceone.api.user_secret.v1.UserSecret/update_data"
	UserSecret_GetData_FullMethodName    = "/spaceone.api.user_secret.v1.UserSecret/get_data"
	UserSecret_Get_FullMethodName        = "/spaceone.api.user_secret.v1.UserSecret/get"
	UserSecret_List_FullMethodName       = "/spaceone.api.user_secret.v1.UserSecret/list"
	UserSecret_Stat_FullMethodName       = "/spaceone.api.user_secret.v1.UserSecret/stat"
)

// UserSecretClient is the client API for UserSecret service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSecretClient interface {
	// Create a new user secret.
	// Created user secret is encrypted and stored securely.
	Create(ctx context.Context, in *CreateUserSecretRequest, opts ...grpc.CallOption) (*UserSecretInfo, error)
	// Updates a specific user secret's information.
	// You can only change the 'name' and 'tags', and to change the data you must use the update_data API.
	Update(ctx context.Context, in *UpdateUserSecretRequest, opts ...grpc.CallOption) (*UserSecretInfo, error)
	// Deletes a specific user secret.
	Delete(ctx context.Context, in *UserSecretRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Updates a specific user secret's data.
	// Updated user_secret is encrypted and stored securely.
	UpdateData(ctx context.Context, in *UpdateUserSecretDataRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get a specific user secret's data.
	// This API is for internal system use only.
	GetData(ctx context.Context, in *GetUserSecretDataRequest, opts ...grpc.CallOption) (*UserSecretDataInfo, error)
	// Get a specific user secret's information.
	Get(ctx context.Context, in *UserSecretRequest, opts ...grpc.CallOption) (*UserSecretInfo, error)
	// Queries a list of user secrets.
	// You can use a query to get a filtered list of user secrets.
	List(ctx context.Context, in *UserSecretQuery, opts ...grpc.CallOption) (*UserSecretsInfo, error)
	Stat(ctx context.Context, in *UserSecretStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type userSecretClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSecretClient(cc grpc.ClientConnInterface) UserSecretClient {
	return &userSecretClient{cc}
}

func (c *userSecretClient) Create(ctx context.Context, in *CreateUserSecretRequest, opts ...grpc.CallOption) (*UserSecretInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSecretInfo)
	err := c.cc.Invoke(ctx, UserSecret_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSecretClient) Update(ctx context.Context, in *UpdateUserSecretRequest, opts ...grpc.CallOption) (*UserSecretInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSecretInfo)
	err := c.cc.Invoke(ctx, UserSecret_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSecretClient) Delete(ctx context.Context, in *UserSecretRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, UserSecret_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSecretClient) UpdateData(ctx context.Context, in *UpdateUserSecretDataRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, UserSecret_UpdateData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSecretClient) GetData(ctx context.Context, in *GetUserSecretDataRequest, opts ...grpc.CallOption) (*UserSecretDataInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSecretDataInfo)
	err := c.cc.Invoke(ctx, UserSecret_GetData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSecretClient) Get(ctx context.Context, in *UserSecretRequest, opts ...grpc.CallOption) (*UserSecretInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSecretInfo)
	err := c.cc.Invoke(ctx, UserSecret_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSecretClient) List(ctx context.Context, in *UserSecretQuery, opts ...grpc.CallOption) (*UserSecretsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSecretsInfo)
	err := c.cc.Invoke(ctx, UserSecret_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSecretClient) Stat(ctx context.Context, in *UserSecretStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, UserSecret_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSecretServer is the server API for UserSecret service.
// All implementations must embed UnimplementedUserSecretServer
// for forward compatibility
type UserSecretServer interface {
	// Create a new user secret.
	// Created user secret is encrypted and stored securely.
	Create(context.Context, *CreateUserSecretRequest) (*UserSecretInfo, error)
	// Updates a specific user secret's information.
	// You can only change the 'name' and 'tags', and to change the data you must use the update_data API.
	Update(context.Context, *UpdateUserSecretRequest) (*UserSecretInfo, error)
	// Deletes a specific user secret.
	Delete(context.Context, *UserSecretRequest) (*empty.Empty, error)
	// Updates a specific user secret's data.
	// Updated user_secret is encrypted and stored securely.
	UpdateData(context.Context, *UpdateUserSecretDataRequest) (*empty.Empty, error)
	// Get a specific user secret's data.
	// This API is for internal system use only.
	GetData(context.Context, *GetUserSecretDataRequest) (*UserSecretDataInfo, error)
	// Get a specific user secret's information.
	Get(context.Context, *UserSecretRequest) (*UserSecretInfo, error)
	// Queries a list of user secrets.
	// You can use a query to get a filtered list of user secrets.
	List(context.Context, *UserSecretQuery) (*UserSecretsInfo, error)
	Stat(context.Context, *UserSecretStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedUserSecretServer()
}

// UnimplementedUserSecretServer must be embedded to have forward compatible implementations.
type UnimplementedUserSecretServer struct {
}

func (UnimplementedUserSecretServer) Create(context.Context, *CreateUserSecretRequest) (*UserSecretInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserSecretServer) Update(context.Context, *UpdateUserSecretRequest) (*UserSecretInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserSecretServer) Delete(context.Context, *UserSecretRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserSecretServer) UpdateData(context.Context, *UpdateUserSecretDataRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateData not implemented")
}
func (UnimplementedUserSecretServer) GetData(context.Context, *GetUserSecretDataRequest) (*UserSecretDataInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedUserSecretServer) Get(context.Context, *UserSecretRequest) (*UserSecretInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserSecretServer) List(context.Context, *UserSecretQuery) (*UserSecretsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedUserSecretServer) Stat(context.Context, *UserSecretStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedUserSecretServer) mustEmbedUnimplementedUserSecretServer() {}

// UnsafeUserSecretServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSecretServer will
// result in compilation errors.
type UnsafeUserSecretServer interface {
	mustEmbedUnimplementedUserSecretServer()
}

func RegisterUserSecretServer(s grpc.ServiceRegistrar, srv UserSecretServer) {
	s.RegisterService(&UserSecret_ServiceDesc, srv)
}

func _UserSecret_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSecretServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSecret_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSecretServer).Create(ctx, req.(*CreateUserSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSecret_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSecretServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSecret_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSecretServer).Update(ctx, req.(*UpdateUserSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSecret_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSecretServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSecret_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSecretServer).Delete(ctx, req.(*UserSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSecret_UpdateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSecretDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSecretServer).UpdateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSecret_UpdateData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSecretServer).UpdateData(ctx, req.(*UpdateUserSecretDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSecret_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSecretDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSecretServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSecret_GetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSecretServer).GetData(ctx, req.(*GetUserSecretDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSecret_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSecretServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSecret_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSecretServer).Get(ctx, req.(*UserSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSecret_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSecretQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSecretServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSecret_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSecretServer).List(ctx, req.(*UserSecretQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSecret_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSecretStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSecretServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSecret_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSecretServer).Stat(ctx, req.(*UserSecretStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// UserSecret_ServiceDesc is the grpc.ServiceDesc for UserSecret service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserSecret_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.user_secret.v1.UserSecret",
	HandlerType: (*UserSecretServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _UserSecret_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _UserSecret_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _UserSecret_Delete_Handler,
		},
		{
			MethodName: "update_data",
			Handler:    _UserSecret_UpdateData_Handler,
		},
		{
			MethodName: "get_data",
			Handler:    _UserSecret_GetData_Handler,
		},
		{
			MethodName: "get",
			Handler:    _UserSecret_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _UserSecret_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _UserSecret_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/secret/v1/user_secret.proto",
}
