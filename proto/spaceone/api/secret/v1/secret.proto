/*
desc: A Secret is an external data, encrypted by CloudForet.
 */
syntax = "proto3";

package spaceone.api.secret.v1;

option go_package = "dist/go";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";


service Secret {
    /*
    desc: Creates a new Secret. When creating the resource, external `data` is encrypted, and a `secret_id` is issued for data access by other microservices.
    request_example: >-
        {
            "name": "aws-dev",
            "data": "********",
            "secret_type": "CREDENTIALS",
            "schema": "aws_access_key",
            "service_account_id": "sa-123456789012",
            "project_id": "project-123456789012",
            "domain_id": "domain-123456789012"
        }
    response_example: >-
        {
            "secret_id": "secret-123456789012",
            "name": "aws-dev",
            "secret_type": "CREDENTIALS",
            "tags": {},
            "schema": "aws_access_key",
            "provider": "aws",
            "service_account_id": "sa-123456789012",
            "project_id": "project-123456789012",
            "domain_id": "domain-123456789012",
            "created_at": "2022-01-01T06:10:14.851Z"
        }
     */
    rpc create (CreateSecretRequest) returns (SecretInfo) {
        option (google.api.http) = { post: "/secret/v1/secrets" };
    }
    /*
    desc: Updates a specific Secret. You can make changes in Secret settings, including `name` and`tags`.
    request_example: >-
        {
            "secret_id": "secret-123456789012",
            "name": "aws-dev2",
            "tags": { "a": "b"},
            "project_id": "project-123456789012",
            "release_project": true,
            "domain_id": "domain-123456789012"
        }
    response_example: >-
        {
            "secret_id": "secret-123456789012",
            "name": "aws-dev2",
            "secret_type": "CREDENTIALS",
            "tags": { "a": "b"},
            "schema": "aws_access_key",
            "provider": "aws",
            "service_account_id": "sa-123456789012",
            "project_id": "",
            "domain_id": "domain-123456789012",
            "created_at": "2022-01-01T06:10:14.851Z"
        }
     */
    rpc update (UpdateSecretRequest) returns (SecretInfo) {
        option (google.api.http) = { put: "/secret/v1/secret/{secret_id}" };
    }
    /*
    desc: Deletes a specific Secret. You must specify the `secret_id` of the Secret to delete.
    request_example: >-
        {
            "secret_id": "secret-123456789012",
            "domain_id": "domain-123456789012"
        }
     */
    rpc delete (SecretRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/secret/v1/secret/{secret_id}" };
    }
    /*
    desc: Updates encrypted data of a specific Secret resource. For example, to change the parameter `data`, external data to encrypt, you can use `update_data` to create new encrypted data based on the changed `data` and store it in the Secret resource.
    request_example: >-
        {
            "secret_id": "secret-123456789012",
             "data": "********",
             "domain_id": "domain-123456789012"
        }
    response_example: >-
        {
            "data": {
                "encrypted_data": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
            },
            "encrypted": true,
            "encrypt_options": {
                "encrypted_data_key": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                "encrypt_algorithm": "CloudForet_DEFAULT"
            }
        }
     */
    rpc update_data (UpdateSecretDataRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { put: "/secret/v1/secret/{secret_id}/data" };
    }
    /*
    desc: Gets a specific Secret. Prints detailed information about the Secret, including  `name`, `tags`, `schema`, and `provider`.
    request_example: >-
        {
            "secret_id": "secret-123456789012",
            "domain_id": "domain-123456789012"
        }
    response_example: >-
        {
            "data": {
                "encrypted_data": "xxxxxxxxxxxxxxxxxx"
            },
            "encrypted": true,
            "encrypt_options": {
                "encrypt_algorithm": "SPACEONE_DEFAULT",
                "encrypted_data_key": "xxxxxx"
            }
        }
     */
    rpc get_data (SecretRequest) returns (SecretDataInfo) {
        option (google.api.http) = { get: "/secret/v1/secret/{secret_id}/data" };
    }
    /*
    desc: Gets a specific Post. You must specify the `post_id` of the Post to get, and the `board_id` of the Board where the child Post to get belongs. Prints detailed information about the Post.
    request_example: >-
        {
            "secret_id": "secret-123456789012",
            "domain_id": "domain-123456789012"
        }
    response_example: >-
        {
            "secret_id": "secret-123456789012",
            "name": "aws-dev",
            "secret_type": "CREDENTIALS",
            "tags": {},
            "schema": "aws_access_key",
            "provider": "aws",
            "service_account_id": "sa-123456789012",
            "project_id": "project-123456789012",
            "domain_id": "domain-123456789012",
            "created_at": "2022-01-01T06:10:14.851Z"
        }
     */
    rpc get (GetSecretRequest) returns (SecretInfo) {
        option (google.api.http) = { get: "/secret/v1/secret/{secret_id}" };
    }
    /*
    desc: Gets a list of all Posts. You can use a query to get a filtered list of Posts.
    request_example: >-
        {
            "query": {},
            "domain_id": "domain-123456789012"
        }
    response_example: >-
        {
            "results": [
                {
                   "secret_id": "secret-123456789012",
                   "name": "aws-dev",
                   "secret_type": "CREDENTIALS",
                   "tags": {},
                   "schema": "aws_access_key",
                   "provider": "aws",
                   "service_account_id": "sa-123456789012",
                   "project_id": "project-123456789012",
                   "domain_id": "domain-123456789012",
                   "created_at": "2022-01-01T06:10:14.851Z"
                },
                {
                    "secret_id": "secret-987654321098",
                    "name": "plugin-credentials",
                    "secret_type": "CREDENTIALS",
                    "tags": {},
                    "domain_id": "domain-123456789012",
                    "created_at": "2022-01-01T02:31:01.709Z"
                }
            ],
            "total_count": 2
        }
     */
    rpc list (SecretQuery) returns (SecretsInfo) {
        option (google.api.http) = {
            get: "/secret/v1/secrets"
            additional_bindings {
                post: "/secret/v1/secrets/search"
            }
        };
    }
    rpc stat (SecretStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/secret/v1/secrets/stat" };
    }
}

enum SecretType {
    NONE = 0;
    CREDENTIALS = 1;
}

message CreateSecretRequest {
    // is_required: true
    string name = 1;
    // is_required: true
    google.protobuf.Struct data = 2;
    // is_required: true
    SecretType secret_type = 3;
    // is_required: false
    google.protobuf.Struct tags = 4;
    // is_required: false
    string schema = 5;
    // is_required: false
    string service_account_id = 6;
    // is_required: false
    string project_id = 7;
    // is_required: false
    string trusted_secret_id = 11;
    // is_required: true
    string domain_id = 21;
}

message UpdateSecretRequest {
    // is_required: true
    string secret_id = 1;
    // is_required: false
    string name = 2;
    // is_required: false
    google.protobuf.Struct tags = 3;
    // is_required: false
    string project_id = 4;
    // is_required: true
    string domain_id = 5;
    // is_required: false
    bool release_project = 6;
}

message SecretRequest {
    // is_required: true
    string secret_id = 1;
    // is_required: true
    string domain_id = 2;
}

message UpdateSecretDataRequest {
    // is_required: true
    string secret_id = 1;
    // is_required: true
    google.protobuf.Struct data = 2;
    // is_required: true
    string domain_id = 3;
    // is_required: false
    string schema = 4;
}

message GetSecretRequest {
    // is_required: true
    string secret_id = 1;
    // is_required: true
    string domain_id = 2;
    // is_required: false
    repeated string only = 3;
}

message SecretQuery {
    // is_required: false
    spaceone.api.core.v1.Query query = 1;
    // is_required: false
    string secret_id = 2;
    /// is_required: false
    string name = 3;
    // is_required: false
    SecretType secret_type = 4;
    // is_required: false
    string schema= 6;
    // is_required: false
    string provider = 7;
    // is_required: false
    string service_account_id = 8;
    // is_required: false
    string trusted_secret_id = 9;
    // is_required: true
    string domain_id = 21;
}

message SecretDataInfo {
    google.protobuf.Struct data = 1;
    bool encrypted = 2;
    google.protobuf.Struct encrypt_options = 3;
}

message SecretInfo {
    string secret_id = 1;
    string name = 2;
    SecretType secret_type = 3;
    google.protobuf.Struct tags = 5;
    string schema = 6;
    string provider = 7;
    string service_account_id = 8;
    string project_id = 9;
    string trusted_secret_id = 10;
    string domain_id = 21;
    string created_at = 22;
}

message SecretsInfo {
    repeated SecretInfo results = 1;
    int32 total_count = 2;
}

message SecretStatQuery {
    // is_required: true
    spaceone.api.core.v1.StatisticsQuery query = 1;
    // is_required: true
    string domain_id = 2;
}