// A DataSourceRule is a resource filtering the raw data from the DataSource. The Cost resource is created after the raw data is filtered by the DataSourceRule.
syntax = "proto3";

package spaceone.api.cost_analysis.v1;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/cost_analysis/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";


service DataSourceRule {
    
    // Creates a new DataSourceRule. When creating the resource, this method can apply two types of conditions: mapping projects where the cost incurred to the Cost, and mapping cloud service accounts to the Cost. By adjusting the `condition_policy` parameter, the DataSourceRule can be applied when all conditions are met, applied when any of the conditions are met, or always applied regardless of whether the conditions are met.
    rpc create (CreateDataSourceRuleRequest) returns (DataSourceRuleInfo) {
        option (google.api.http) = {
            post: "/cost-analysis/v1/data-source-rule/create"
            body: "*"
        };
    }
    
    // Updates a specific DataSourceRule. You can make changes in DataSourceRule settings, including filtering conditions. If the parameter `is_default` is `true`, only `Admin` type User can use this method.
    rpc update (UpdateDataSourceRuleRequest) returns (DataSourceRuleInfo) {
        option (google.api.http) = {
            post: "/cost-analysis/v1/data-source-rule/update"
            body: "*"
        };
    }
    
    // Changes the priority order of the DataSourceRules to apply. If there are multiple DataSourceRules applied in a specific service account, the priority order of the resources is requried. This method changes the priority order to apply DataSourceRules.
    rpc change_order (ChangeDataSourceRuleOrderRequest) returns (DataSourceRuleInfo) {
        option (google.api.http) = {
            post: "/cost-analysis/v1/data-source-rule/change-order"
            body: "*"
        };
    }
    
    // Deletes a specific DataSourceRule. You must specify the `data_source_rule_id` of the DataSourceRule to delete. If the parameter `is_default` is `true`, only `Admin` type User can use this method.
    rpc delete (DataSourceRuleRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/cost-analysis/v1/data-source-rule/delete"
            body: "*"
        };
    }
    
    // Gets a specific DataSourceRule. Prints detailed information about the DataSourceRule, including  `conditions_policy` and conditions applied to DataSources.
    rpc get (GetDataSourceRuleRequest) returns (DataSourceRuleInfo) {
        option (google.api.http) = {
            post: "/cost-analysis/v1/data-source-rule/get"
            body: "*"
        };
    }
    
    // Gets a list of all DataSourceRules. You can use a query to get a filtered list of DataSourceRules.
    rpc list (DataSourceRuleQuery) returns (DataSourceRulesInfo) {
        option (google.api.http) = {
            post: "/cost-analysis/v1/data-source-rule/list"
            body: "*"
        };
    }

    rpc stat (DataSourceRuleStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            post: "/cost-analysis/v1/data-source-rule/stat"
            body: "*"
        };
    }
}

enum ConditionsPolicy {
    NONE = 0;
    ALL = 1;
    ANY = 2;
    ALWAYS = 3;
}

message DataSourceRuleCondition {
    string key = 1;
    string value = 2;
    string operator = 3;
}

message MatchRule {
    string source = 1;
    string target = 2;
}

message DataSourceRuleActions {
    string change_project = 1;
    MatchRule match_project = 2;
    MatchRule match_service_account = 3;
    google.protobuf.Struct add_additional_info = 4;
}

message DataSourceRuleOptions {
    bool stop_processing = 1;
}

//{
//    "name": "match_service_account_test",
//    "conditions_policy": "ALWAYS",
//    "actions": {
//        "match_service_account": {"source": "account", "target": "data.project_id"}
//    },
//    "options": {"stop_processing": true},
//    "tags": {"b": "c", "a": "b"},
//    "data_source_id": "ds-c96609f5afeb"
//}
message CreateDataSourceRuleRequest {
    // +optional
    string name = 1;
    // +optional
    repeated DataSourceRuleCondition conditions = 2;
    ConditionsPolicy conditions_policy = 3;
    DataSourceRuleActions actions = 4;
    // +optional
    DataSourceRuleOptions options = 5;
    // +optional
    google.protobuf.Struct tags = 6;
    string data_source_id = 11;
    string domain_id = 12;
}

//{
//    "data_source_rule_id": "rule-c8055231e212",
//    "name": "match_service_account_test",
//    "conditions_policy": "ALWAYS",
//    "actions": {
//        "match_service_account": {
//            "source": "account",
//            "target": "data.project_id"
//        }
//    },
//    "options": {
//        "stop_processing": true
//    },
//    "tags": {"b": "c", "a": "b"}
//}
message UpdateDataSourceRuleRequest {
    string data_source_rule_id = 1;
    // +optional
    string name = 2;
    // +optional
    repeated DataSourceRuleCondition conditions = 3;
    // +optional
    ConditionsPolicy conditions_policy = 4;
    // +optional
    DataSourceRuleActions actions = 5;
    // +optional
    DataSourceRuleOptions options = 6;
    // +optional
    google.protobuf.Struct tags = 7;
    string domain_id = 11;
}

//{
//    "data_source_rule_id": "rule-c8055231e212",
//    "order": 2
//}
message ChangeDataSourceRuleOrderRequest {
    string data_source_rule_id = 1;
    int32 order = 2;
    string domain_id = 11;
}

//{
//    "data_source_rule_id": "rule-22fab02f6b51"
//}
message DataSourceRuleRequest {
    string data_source_rule_id = 1;
    string domain_id = 2;
}

//{
//  "data_source_rule_id": "rule-22fab02f6b51"
//}
message GetDataSourceRuleRequest {
    string data_source_rule_id = 1;
    string domain_id = 2;
    // +optional
    repeated string only = 3;
}

//{
//  "query": {}
//}
message DataSourceRuleQuery {
    // +optional
    spaceone.api.core.v1.Query query = 1;
    // +optional
    string data_source_rule_id = 2;
    // +optional
    string name = 3;
    // +optional
    string data_source_id = 4;
    string domain_id = 11;
}

//{
//    "data_source_rule_id": "rule-c8055231e212",
//    "name": "match_service_account_test",
//    "order": 2,
//    "conditions_policy": "ALWAYS",
//    "actions": {
//        "match_service_account": {
//            "source": "account",
//            "target": "data.project_id"
//        }
//    },
//    "options": {
//        "stop_processing": true
//    },
//    "tags": {
//        "a": "b",
//        "b": "c"
//    },
//    "data_source_id": "ds-c96609f5afeb",
//    "domain_id": "domain-58010aa2e451",
//    "created_at": "2022-07-19T10:13:28.335Z"
//}
message DataSourceRuleInfo {
    string data_source_rule_id = 1;
    string name = 2;
    int32 order = 3;
    repeated DataSourceRuleCondition conditions = 4;
    ConditionsPolicy conditions_policy = 5;
    DataSourceRuleActions actions = 6;
    DataSourceRuleOptions options = 7;
    google.protobuf.Struct tags = 8;
    string rule_type = 9;
    string data_source_id = 11;
    string domain_id = 12;
    string created_at = 21;
}

//{
//        "results": [
//            {
//                "data_source_rule_id": "rule-22fab02f6b51",
//                "name": "match_service_account",
//                "order": 1,
//                "conditions_policy": "ALWAYS",
//                "actions": {
//                    "match_service_account": {
//                        "source": "account",
//                        "target": "data.project_id"
//                    }
//                },
//                "options": {
//                    "stop_processing": true
//                },
//                "tags": {},
//                "data_source_id": "ds-c96609f5afeb",
//                "domain_id": "domain-58010aa2e451",
//                "created_at": "2022-05-25T16:01:51.858Z"
//            },
//            {
//                "data_source_rule_id": "rule-188d366e9817",
//                "name": "match_service_account",
//                "order": 1,
//                "conditions_policy": "ALWAYS",
//                "actions": {
//                    "match_service_account": {
//                        "source": "account",
//                        "target": "data.account_id"
//                    }
//                },
//                "options": {
//                    "stop_processing": true
//                },
//                "tags": {},
//                "data_source_id": "ds-fcba92ca73b1",
//                "domain_id": "domain-58010aa2e451",
//                "created_at": "2022-06-03T16:00:54.099Z"
//            }
//        ],
//        "total_count": 2
//}
message DataSourceRulesInfo {
    repeated DataSourceRuleInfo results = 1;
    int32 total_count = 2;
}

message DataSourceRuleStatQuery {
    spaceone.api.core.v1.StatisticsQuery query = 1;
    string domain_id = 2;
}
