// A DataSource is a plugin instance collecting external cost data. External cost data consists of `raw data` and the plugin information used for collection.
syntax = "proto3";

package spaceone.api.cost_analysis.v1;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/cost_analysis/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";
import "spaceone/api/cost_analysis/v1/job.proto";


service DataSource {
    // Registers a DataSource with information of the plugin to use. Information of the plugin includes `version`, `provider`, and `upgrade_mode`.
    rpc register (RegisterDataSourceRequest) returns (DataSourceInfo) {
        option (google.api.http) = {
            post: "/cost-analysis/v1/data-source/register"
            body: "*"
        };
    }

    // Updates a specific DataSource. You can make changes in DataSource settings, including `name` and `tags`.
    rpc update (UpdateDataSourceRequest) returns (DataSourceInfo) {
        option (google.api.http) = {
            post: "/cost-analysis/v1/data-source/update"
            body: "*"
        };
    }

    // Updates the plugin of a specific DataSource. This method resets the plugin data in the DataSource to update the `metadata`.
    rpc update_plugin (UpdateDataSourcePluginRequest) returns (DataSourceInfo) {
        option (google.api.http) = {
            post: "/cost-analysis/v1/data-source/update-plugin"
            body: "*"
        };
    }

    // Verifies the plugin of a specific DataSource. This method validates the plugin data, `version` and `endpoint`.
    rpc verify_plugin (DataSourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/cost-analysis/v1/data-source/verify-plugin"
            body: "*"
        };
    }

    // Enables a specific DataSource. By enabling a DataSource, you can communicate with an external cloud service via the plugin.
    rpc enable (DataSourceRequest) returns (DataSourceInfo) {
        option (google.api.http) = {
            post: "/cost-analysis/v1/data-source/enable"
            body: "*"
        };
    }

    // Disables a specific DataSource. By disabling a DataSource, you can block communication with an external cloud service via the plugin.
    rpc disable (DataSourceRequest) returns (DataSourceInfo) {
        option (google.api.http) = {
            post: "/cost-analysis/v1/data-source/disable"
            body: "*"
        };
    }

    // Deregisters and deletes a specific DataSource. You must specify the `data_source_id` of the DataSource to deregister.
    rpc deregister (DeregisterDataSourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/cost-analysis/v1/data-source/deregister"
            body: "*"
        };
    }

    // Manually runs a specific DataSource to collect the cost data. This method is to get up-to-date cost data.
    rpc sync (SyncDataSourceRequest) returns (spaceone.api.cost_analysis.v1.JobInfo) {
        option (google.api.http) = {
            post: "/cost-analysis/v1/data-source/sync"
            body: "*"
        };
    }

    // Gets a specific DataSource. Prints detailed information about the DataSource, including `name`, `state`, and `plugin_info`.
    rpc get (GetDataSourceRequest) returns (DataSourceInfo) {
        option (google.api.http) = {
            post: "/cost-analysis/v1/data-source/get"
            body: "*"
        };
    }

    // Gets a list of all DataSources. You can use a query to get a filtered list of DataSources.
    rpc list (DataSourceQuery) returns (DataSourcesInfo) {
        option (google.api.http) = {
            post: "/cost-analysis/v1/data-source/list"
            body: "*"
        };
    }

    rpc stat (DataSourceStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            post: "/cost-analysis/v1/data-source/stat"
            body: "*"
        };
    }
}

message SecretFilter {
    enum SecretFilterState {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }

    SecretFilterState state = 1;
    repeated string secrets = 2;
    repeated string service_accounts = 3;
    repeated string schemas = 4;
}

message PluginInfo {
    enum UpgradeMode {
        NONE = 0;
        MANUAL = 1;
        AUTO = 2;
    }

    string plugin_id = 1;
    string version = 2;
    google.protobuf.Struct options = 3;
    google.protobuf.Struct metadata = 4;
    google.protobuf.Struct secret_data = 5;
    string schema = 6;
    string secret_id = 7;
    UpgradeMode upgrade_mode = 8;
}

//{
//    "name": "AWS HyperBilling Data Source test",
//    "data_source_type": "EXTERNAL",
//    "plugin_info": {
//        "plugin_id": "plugin-aws-hyperbilling-cost-datasource",
//        "version": "1.0.4",
//        "options": {},
//        "metadata": {
//            "data_source_rules": [
//                {
//                    "conditions_policy": "ALWAYS",
//                    "options": {
//                        "stop_processing": true
//                    },
//                    "actions": {
//                        "match_service_account": {
//                            "source": "account",
//                            "target": "data.account_id"
//                        }
//                    },
//                    "conditions": [],
//                    "tags": {},
//                    "name": "match_service_account"
//                }
//            ]
//        },
//        "secret_id": "secret-ca134639483",
//        "upgrade_mode": "AUTO"
//    },
//    "tags": {"a": "b"}
//}
message RegisterDataSourceRequest {
    enum DataSourceType {
        NONE = 0;
        LOCAL = 1;
        EXTERNAL = 2;
    }

    enum SecretType {
        SECRET_TYPE_NONE = 0;
        MANUAL = 1;
        USE_SERVICE_ACCOUNT_SECRET = 2;
    }

    string name = 1;
    DataSourceType data_source_type = 2;
    // +optional
    string provider = 3;
    // +optional
    google.protobuf.Struct template = 4;
    // +optional
    PluginInfo plugin_info = 5;
    // +optional
    google.protobuf.Struct tags = 6;
    // +optional
    SecretType secret_type = 7;
    // +optional
    SecretFilter secret_filter = 8;
    string domain_id = 11;
}

//{
//        "data_source_id": "ds-085d1e872789",
//        "name": "AWS HyperBilling Data Source test2",
//        "tags": {
//            "type": "test"
//        }
//}
message UpdateDataSourceRequest {
    string data_source_id = 1;
    // +optional
    string name = 2;
    // +optional
    google.protobuf.Struct template = 3;
    // +optional
    google.protobuf.Struct tags = 4;
    // +optional
    SecretFilter secret_filter = 5;
    string domain_id = 11;
}

//{
//    "data_source_id": "ds-085d1e872789",
//    "version": "1.0.4",
//    "options": {},
//    "upgrade_mode": "AUTO"
//}
message UpdateDataSourcePluginRequest {
    enum UpgradeMode {
        NONE = 0;
        MANUAL = 1;
        AUTO = 2;
    }

    string data_source_id = 1;
    // +optional
    string version = 2;
    // +optional
    google.protobuf.Struct options = 3;
    // +optional
    UpgradeMode upgrade_mode = 4;
    string domain_id = 11;
}

//{
//    "data_source_id": "ds-085d1e872789",
//    "cascade_delete_cost": true,
//    "domain_id": "domain-085d1e872789"
//}
message DeregisterDataSourceRequest {
    string data_source_id = 1;
    // Default value is true. If true delete all cost data related to data_source_id
    // +optional
    bool cascade_delete_cost = 2;
    string domain_id = 3;
}

message SyncDataSourceRequest {
    string data_source_id = 1;
    // +optional
    string start = 2;
    // +optional
    bool no_preload_cache = 3;
    string domain_id = 11;
}

//{
//    "data_source_id": "ds-085d1e872789"
//}
message DataSourceRequest {
    string data_source_id = 1;
    string domain_id = 2;
}

message GetDataSourceRequest {
    string data_source_id = 1;
    string domain_id = 2;
    // +optional
    repeated string only = 3;
}

//{
//    "query": {}
//}
message DataSourceQuery {
    enum DataSourceType {
        NONE = 0;
        LOCAL = 1;
        EXTERNAL = 2;
    }

    // +optional
    spaceone.api.core.v1.Query query = 1;
    // +optional
    string data_source_id = 2;
    // +optional
    string name = 3;
    // +optional
    string state = 4;
    // +optional
    DataSourceType data_source_type = 5;
    // +optional
    string provider = 6;
    string domain_id = 11;
}

//{
//        "data_source_id": "ds-085d1e872789",
//        "name": "AWS HyperBilling Data Source test",
//        "state": "ENABLED",
//        "data_source_type": "EXTERNAL",
//        "plugin_info": {
//            "plugin_id": "plugin-aws-hyperbilling-cost-datasource",
//            "version": "1.0.4",
//            "options": {},
//            "metadata": {
//                "data_source_rules": [
//                    {
//                        "options": {
//                            "stop_processing": true
//                        },
//                        "actions": {
//                            "match_service_account": {
//                                "source": "account",
//                                "target": "data.account_id"
//                            }
//                        },
//                        "domain_id": "domain-58010aa2e451",
//                        "conditions": [],
//                        "name": "match_service_account",
//                        "tags": {},
//                        "data_source_id": "ds-085d1e872789",
//                        "conditions_policy": "ALWAYS"
//                    }
//                ]
//            },
//            "secret_id": "secret-ca134639483",
//            "upgrade_mode": "AUTO"
//        },
//        "template": {},
//        "tags": {
//            "a": "b"
//        },
//        "cost_tag_keys": [
//            "Name",
//            "Environment",
//            "Role",
//            "Service"
//        ],
//        "cost_additional_info_keys": [
//            "raw_usage_type"
//        ],
//        "domain_id": "domain-58010aa2e451",
//        "created_at": "2022-07-19T10:58:36.080Z"
//}
message DataSourceInfo {
    enum State {
        STATE_NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }

    enum DataSourceType {
        TYPE_NONE = 0;
        LOCAL = 1;
        EXTERNAL = 2;
    }

    enum SecretType {
        SECRET_TYPE_NONE = 0;
        MANUAL = 1;
        USE_SERVICE_ACCOUNT_SECRET = 2;
    }

    string data_source_id = 1;
    string name = 2;
    State state = 3;
    DataSourceType data_source_type = 4;
    string provider = 5;
    PluginInfo plugin_info = 6;
    google.protobuf.Struct template = 7;
    google.protobuf.Struct tags = 8;
    repeated string cost_tag_keys = 9;
    repeated string cost_additional_info_keys = 10;
    string domain_id = 11;
    SecretType secret_type = 12;
    SecretFilter secret_filter = 13;
    string created_at = 21;
    string last_synchronized_at = 22;
}

//{
//        "results": [
//            {
//                "data_source_id": "ds-fcba92ca73b1",
//                "name": "AWS HyperBilling Data Source",
//                "state": "ENABLED",
//                "data_source_type": "EXTERNAL",
//                "plugin_info": {
//                    "plugin_id": "plugin-aws-hyperbilling-cost-datasource",
//                    "version": "1.0.4",
//                    "options": {},
//                    "metadata": {
//                        "data_source_rules": [
//                            {
//                                "name": "match_service_account",
//                                "conditions": [],
//                                "actions": {
//                                    "match_service_account": {
//                                        "source": "account",
//                                        "target": "data.account_id"
//                                    }
//                                },
//                                "conditions_policy": "ALWAYS",
//                                "tags": {},
//                                "options": {
//                                    "stop_processing": true
//                                }
//                            }
//                        ]
//                    },
//                    "secret_id": "secret-dca385e85a27",
//                    "upgrade_mode": "AUTO"
//                },
//                "template": {},
//                "tags": {
//                    "a": "b"
//                },
//                "cost_tag_keys": [
//                    "Name",
//                    "Environment",
//                    "Role",
//                    "Service"
//                ],
//                "cost_additional_info_keys": [
//                    "raw_usage_type"
//                ],
//                "domain_id": "domain-58010aa2e451",
//                "created_at": "2022-03-30T02:21:28.756Z",
//                "last_synchronized_at": "2022-07-17T16:00:05.077Z"
//            },
//            {
//                "data_source_id": "ds-c96609f5afeb",
//                "name": "MZC HyperBilling Data Source",
//                "state": "ENABLED",
//                "data_source_type": "EXTERNAL",
//                "plugin_info": {
//                    "plugin_id": "plugin-mzc-hyperbilling-cost-datasource",
//                    "version": "1.0.3",
//                    "options": {},
//                    "metadata": {
//                        "data_source_rules": [
//                            {
//                                "conditions": [],
//                                "options": {
//                                    "stop_processing": true
//                                },
//                                "conditions_policy": "ALWAYS",
//                                "name": "match_service_account",
//                                "tags": {},
//                                "actions": {
//                                    "match_service_account": {
//                                        "source": "account",
//                                        "target": "data.project_id"
//                                    }
//                                }
//                            }
//                        ]
//                    },
//                    "secret_id": "secret-354d142229e5",
//                    "upgrade_mode": "AUTO"
//                },
//                "template": {},
//                "tags": {},
//                "cost_tag_keys": [],
//                "cost_additional_info_keys": [],
//                "domain_id": "domain-58010aa2e451",
//                "created_at": "2022-04-13T05:34:54.223Z",
//                "last_synchronized_at": "2022-07-17T16:00:08.254Z"
//            }
//        ],
//        "total_count": 2
//}
message DataSourcesInfo {
    repeated DataSourceInfo results = 1;
    int32 total_count = 2;
}

message DataSourceStatQuery {
    
    spaceone.api.core.v1.StatisticsQuery query = 1;
    
    string domain_id = 2;
}
