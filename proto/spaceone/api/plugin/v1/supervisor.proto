/*
desc: A Supervisor is a resource managing the lifecycle of the plugin instances to deploy. A Supervisor manages the deployment of plugin instances by deploying or deleting the `pod` of the plugin instances.
*/
syntax = "proto3";

package spaceone.api.plugin.v1;

option go_package = "dist/go";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";


service Supervisor {
    /*
    desc: Creates a new Supervisor. Only Users with the `MANAGED` permission can set the Supervisor `public`. The Supervisor manages the lifecycle of plugin instances by the Supervisor's state. When a Supervisor is created, the state of the resource is `PENDING`. If the state remains the same for 5 minutes, the state is changed to `DISCONNECTED`.
    note: ''
    request_example: >-
      {
        "name": "test",
        "hostname": "dev-test2",
        "secret_key": "xxxxx",
        "tags": {
            "a": "b"
        }
      }
    response_example: >-
      {
        "supervisor_id": "supervisor-525982f2ae9a",
        "name": "test",
        "hostname": "dev-test2",
        "state": "ENABLED",
        "domain_id": "domain-1c5a6b8181ad",
        "tags": {
            "a": "b"
        },
        "labels": {},
        "created_at": "2022-01-15T05:42:02.999Z"
      }
    */
    rpc publish (PublishSupervisorRequest) returns (SupervisorInfo) {
        option (google.api.http) = { post: "/plugin/v1/supervisors"};
    }
    /*
    desc: Registers a specific Supervisor. You must specify the `supervisor_id` of the Supervisor to register. The `state` of the Supervisor changes from `PENDING` to `ENABLED`.
    note: ''
    request_example: >-
      {

      }
    response_example: >-
      {

      }
    */
    rpc register (RegisterSupervisorRequest) returns (SupervisorInfo) {
        option (google.api.http) = { post: "/plugin/v1/supervisor/{supervisor_id}/register" };
    }
    /*
    desc: Updates a specific Supervisor. You can make changes in Supervisor settings, including `labels`, `tags`, and the `bool` type parameter `is_public`.
    note: ''
    request_example: >-
      {
        "supervisor_id": "supervisor-525982f2ae9a",
        "is_public": true,
        "priority": 10,
        "labels": {
            "a": "b"
        },
        "tags": {
            "c": "d"
        },
        "domain_id": "domain-1c5a6b8181ad"
      }
    response_example: >-
      {
        "supervisor_id": "supervisor-525982f2ae9a",
        "name": "test",
        "hostname": "dev-test2",
        "state": "ENABLED",
        "is_public": true,
        "domain_id": "domain-1c5a6b8181ad",
        "tags": {
            "a": "b"
        },
        "labels": {
            "c": "d"
        },
        "created_at": "2022-06-15T05:42:02.999Z"
      }
    */
    rpc update (RegisterSupervisorRequest) returns (SupervisorInfo) {
        option (google.api.http) = { put: "/plugin/v1/supervisor/{supervisor_id}" };
    }
    /*
    desc: Deregisters and deletes a specific Supervisor. You must specify the `supervisor_id` of the Supervisor to deregister.
    note: ''
    request_example: >-
      {
        "supervisor_id": "supervisor-d73011256d55"
      }
    */
    rpc deregister (SupervisorRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/plugin/v1/supervisor/{supervisor_id}/register" };
    }
    /*
    desc: Enables a specific Supervisor. By changing the `state` parameter to `ENABLED`, the Supervisor can deploy or delete the `pod` of the plugin instance.
    note: ''
    request_example: >-
      {
        "supervisor_id": "supervisor-d73011256d55"
      }
    response_example: >-
      {
        "supervisor_id": "supervisor-d73011256d55",
        "name": "test-in-plugins",
        "hostname": "dev-test3",
        "state": "ENABLED",
        "domain_id": "domain-1c5a6b8181ad",
        "tags": {
            "a": "b"
        },
        "labels": {},
        "created_at": "2022-06-15T06:27:51.904Z"
      }
    */
    rpc enable (SupervisorRequest) returns (SupervisorInfo) {
        option (google.api.http) = { put: "/plugin/v1/supervisor/{supervisor_id}/enable" };
    }
    /*
    desc: Disables a specific Supervisor. By changing the `state` parameter to `DISABLED`, the Supervisor cannot deploy or delete the `pod` of the plugin instance.
    note: ''
    request_example: >-
      {
        "supervisor_id": "supervisor-d73011256d55"
      }
    response_example: >-
      {
        "supervisor_id": "supervisor-d73011256d55",
        "name": "test-in-plugins",
        "hostname": "dev-test3",
        "state": "DISABLED",
        "domain_id": "domain-1c5a6b8181ad",
        "tags": {
            "a": "b"
        },
        "labels": {},
        "created_at": "2022-06-15T06:27:51.904Z"
      }
    */
    rpc disable (SupervisorRequest) returns (SupervisorInfo) {
        option (google.api.http) = { put: "/plugin/v1/supervisor/{supervisor_id}/disable" };
    }
    /*
    desc: Recovers a specific plugin instance in a specific Supervisor. Changes the `state` of the Supervisor to `RE-PROVISIONING`.
    note: ''
    request_example: >-
      {
        "supervisor_id": "supervisor-a4c287cba676",
        "plugin_id": "plugin-api-direct-mon-webhook",
        "version": "1.1.0"
      }
    response_example: >-
      {

      }
    */
    rpc recover_plugin (RecoverPluginRequest) returns (PluginInfo) {
        option (google.api.http) = { post: "/plugin/v1/supervisor/{supervisor_id}/plugin/{plugin_id}/recover" };
    }
    rpc get (GetSupervisorRequest) returns (SupervisorInfo) {
        option (google.api.http) = { get: "/plugin/v1/supervisor/{supervisor_id}" };
    }
    /*
    desc: Gets a list of all Supervisors. You can use a query to get a filtered list of Supervisors.
    note: ''
    request_example: >-
      {
        "query": {}
      }
    response_example: >-
      {
        "results": [
            {
                "supervisor_id": "supervisor-3a091f899539",
                "name": "root",
                "hostname": "dev-supervisor.svc.cluster.local",
                "state": "ENABLED",
                "is_public": true,
                "domain_id": "domain-1c5a6b8181ad",
                "labels": {},
                "created_at": "2020-05-12T00:24:48.250Z"
            },
            {
                "supervisor_id": "supervisor-a4c287cba676",
                "name": "test",
                "hostname": "dev-test",
                "state": "ENABLED",
                "domain_id": "domain-1c5a6b8181ad",
                "tags": {
                    "a": "b"
                },
                "labels": {},
                "created_at": "2022-06-15T05:39:15.886Z"
            }
        ],
        "total_count": 2
      }
    */
    rpc list (SupervisorQuery) returns (SupervisorsInfo) {
        option (google.api.http) = {
            get: "/plugin/v1/supervisors"
            additional_bindings {
                post: "/plugin/v1/supervisors/search"
            }
        };
    }
    rpc stat (SupervisorStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/plugin/v1/supervisors/stat" };
    }
    /*
    desc: Gets a list of all plugin instances regardless of Supervisors. Prints detailed information about the plugin instances, including `version`, `state`, and the relevant Supervisor.
    note: ''
    request_example: >-
      {
        "query": {}
      }
    response_example: >-
      {
        "results": [
            {
                "plugin_id": "plugin-openstack-inven-collector",
                "version": "0.4.1.20220609.122832",
                "state": "ACTIVE",
                "endpoint": "grpc://plugin-openstack-inven-collector-vbnnsoszfjsneiqz.dev-supervisor.svc.cluster.local:50051",
                "supervisor_id": "supervisor-3a091f899539",
                "supervisor_name": "root",
                "managed": true,
                "endpoints": [
                    "grpc://172.16.16.234:50051"
                ]
            },
            {
                "plugin_id": "plugin-zabbix-mon-webhook",
                "version": "1.0",
                "state": "ACTIVE",
                "endpoint": "grpc://plugin-zabbix-mon-webhook-dgqqfqsqidieeuk.dev-supervisor.svc.cluster.local:50051",
                "supervisor_id": "supervisor-3a091f899539",
                "supervisor_name": "root",
                "managed": true,
                "endpoints": [
                    "grpc://172.16.16.130:50051"
                ]
            }
        ],
        "total_count": 2
      }
    */
    rpc list_plugins (PluginQuery) returns (PluginsInfo) {
        option (google.api.http) = {
            get: "/plugin/v1/supervisor/{supervisor_id}/plugins"
            additional_bindings {
                post: "/plugin/v1/supervisor/{supervisor_id}/plugins/search"
            }
        };
    }
}

message PublishSupervisorRequest {
    // is_required: true
    string name = 1;
    // is_required: true
    string hostname = 2;
    // is_required: false
    string secret_key = 3;
    // is_required: false
    repeated PluginInfo plugin_info = 4;
    // is_required: false
    google.protobuf.Struct tags = 5;
    // is_required: false
    bool is_public = 6;
    // is_required: true
    string domain_id = 7;
    // is_required: false
    google.protobuf.Struct labels = 8;
}

message RegisterSupervisorRequest {
    // is_required: true
    string supervisor_id = 1;
    // is_required: false
    string name = 2;
    // is_required: false
    bool is_public = 3;
    // is_required: false
    int32 priority = 4;
    // is_required: false
    google.protobuf.Struct labels = 5;
    // is_required: false
    google.protobuf.Struct tags = 6;
    // is_required: true
    string domain_id = 7;
}

message SupervisorRequest {
    // is_required: true
    string supervisor_id = 1;
    // is_required: true
    string domain_id = 2;
}

message GetSupervisorRequest {
    // is_required: true
    string supervisor_id = 1;
    // is_required: true
    string domain_id = 2;
    // is_required: false
    repeated string only = 3;
}

message RecoverPluginRequest {
    // is_required: true
    string supervisor_id = 1;
    // is_required: true
    string plugin_id = 2;
    // is_required: true
    string version = 3;
    // is_required: true
    string domain_id = 4;
}

message SupervisorInfo {
    enum State {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
        PENDING = 3;
        DISCONNECTED = 4;
    }

    string supervisor_id = 1;
    string name = 2;
    string hostname = 3;
    State state = 4;
    bool is_public = 5;

    string domain_id = 7;
    google.protobuf.Struct tags = 8;
    google.protobuf.Struct labels = 9;
    string created_at = 10;
    string updated_at = 11;
}

message SupervisorQuery {
    // is_required: false
    spaceone.api.core.v1.Query query = 1;
    // is_required: false
    string supervisor_id = 2;
    // is_required: false
    string name = 3;
    // is_required: false
    bool is_public = 4;
    // is_required: true
    string domain_id = 5;
}

message SupervisorsInfo {
    repeated SupervisorInfo results = 1;
    int32 total_count = 2;
}

message SupervisorStatQuery {
    // is_required: true
    spaceone.api.core.v1.StatisticsQuery query = 1;
    // is_required: true
    string domain_id = 2;
}

message PluginQuery {
    enum State {
        NONE = 0;
        PROVISIONING = 1;
        ACTIVE = 2;
        RE_PROVISIONING = 3;
        ERROR = 4;
    }
    // is_required: false
    spaceone.api.core.v1.Query query = 1;
    // is_required: false
    string supervisor_id = 2;
    // is_required: false
    string hostname = 3;
    // is_required: false
    string plugin_id = 4;
    // is_required: false
    string version = 5;
    // is_required: false
    State state = 6;
    // is_required: false
    string endpoint = 7;
    // is_required: true
    string domain_id = 8;
}

message PluginInfo {
    enum State {
        NONE = 0;
        PROVISIONING = 1;
        ACTIVE = 2;
        RE_PROVISIONING = 3;
        ERROR = 4;
    }
    string plugin_id = 1;
    string version = 2;
    State state = 3;
    string endpoint = 4;
    string supervisor_id = 5;
    string supervisor_name = 6;
    bool managed = 7;
    repeated string endpoints = 8;
    string domain_id = 9;
}

message PluginsInfo {
    repeated PluginInfo results = 1;
    int32   total_count = 2;
}
