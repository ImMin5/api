//A Post is a message published on a Board. It also provides notifications to Projects affected by the Post.
syntax = "proto3";

package spaceone.api.board.v1;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/board/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";

service Post {

    //Creates a new Post under a specific Board. You must specify the `board_id`, `title`, and `contents`. The parameter `category` is not required but can be set in the scope of `categories` specified in the parent Board. You can make the new Post pinned or pop up by adjusting the parameters.
    rpc create (CreatePostRequest) returns (PostInfo) {
        option (google.api.http) = {
            post: "/board/v1/post/create"
            body: "*"
        };
    }

    //Updates a specific Post. You can make changes in Post settings, except `board_id`, `post_id`, and `domain_id`.
    rpc update (UpdatePostRequest) returns (PostInfo) {
        option (google.api.http) = {
            post: "/board/v1/post/update"
            body: "*"
        };
    }

    //Not Implemented
    rpc send_notification (SendNotificationRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/board/v1/post/send-notification"
            body: "*"
        };
    }

    // Deletes a specific Post. You must specify the `post_id` of the Post to delete, and the `board_id` of the Board where the child Post to delete belongs.
    rpc delete (PostRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/board/v1/post/delete"
            body: "*"
        };
    }

    // Gets a specific Post. You must specify the `post_id` of the Post to get, and the `board_id` of the Board where the child Post to get belongs. Prints detailed information about the Post.
    rpc get (GetPostRequest) returns (PostInfo) {
        option (google.api.http) = {
            post: "/board/v1/post/get"
            body: "*"
        };
    }

    // Gets a list of all Posts. You can use a query to get a filtered list of Posts.
    rpc list (PostSearchQuery) returns (PostsInfo) {
        option (google.api.http) = {
            post: "/board/v1/post/list"
            body: "*"
        };
    }

    rpc stat (PostStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            post: "/board/v1/post/stat"
            body: "*"
        };
    }
}

//{
//    "board_id": "board-123456789012",
//    "category": "developer",
//    "title": "title",
//    "contents": "This is contents.",
//    "options": {"is_popup": true},
//    "writer": "user1",
//    "domain_id": "domain-123456789012"
//}
message CreatePostRequest {
    enum PermissionGroup {
        PERMISSION_GROUP_NONE = 0;
        GLOBAL = 1;
        DOMAIN = 2;
    }

    // +optional
    string category = 1;
    string title = 2;
    string contents = 3;
    // +optional
    repeated string files = 4;
    // +optional
    google.protobuf.Struct options = 5;
    // +optional
    string writer = 6;
    PermissionGroup permission_group = 7;
    // +optional
    string domain_id = 21;
    string board_id = 22;
}

//{
//      "board_id": "board-123456789012",
//      "post_id": "post-2118473ce15e",
//      "category": "developer",
//      "title": "title2",
//      "contents": "this is contents2.",
//      "options": {
//          "is_popup": false,
//          "is_pinned": true
//      },
//      "writer": "user1",
//      "domain_id": "domain-123456789012"
//}
message UpdatePostRequest {
    string post_id = 1;
    // +optional
    string category = 2;
    // +optional
    string title = 3;
    // +optional
    string contents = 4;
    // +optional
    repeated string files = 5;
    // +optional
    google.protobuf.Struct options = 6;
    // +optional
    string writer = 7;
    // +optional
    string domain_id = 21;
    string board_id = 22;
}

message SendNotificationRequest {
    string board_id = 1;
    string post_id = 2;
    // +optional
    string domain_id = 21;
}

//{
//    "board_id": "board-b9aa34e65c60",
//    "post_id": "post-2118473ce15e",
//    "domain_id": "domain-123456789012"
//}
message PostRequest {
    string board_id = 1;
    string post_id = 2;
    // +optional
    string domain_id = 21;
}

//{
//    "board_id": "board-b9aa34e65c60",
//    "post_id": "post-2118473ce15e",
//    "domain_id": "domain-58010aa2e451"
//}
message GetPostRequest {
    string board_id = 1;
    string post_id = 2;
    // +optional
    string domain_id = 21;
}

//{
//    "board_id": "board-b9aa34e65c60",
//    "query": {}
//}
message PostSearchQuery {
    enum PermissionGroup {
        PERMISSION_GROUP_NONE = 0;
        GLOBAL = 1;
        DOMAIN = 2;
    }

    // +optional
    spaceone.api.core.v1.Query query = 1;
    // +optional
    string post_id = 2;
    // +optional
    string category = 3;
    // +optional
    string writer = 4;
    // +optional
    bool is_pinned = 5;
    // +optional
    bool is_popup = 6;
    // +optional
    string user_domain_id = 7;
    PermissionGroup permission_group = 8;
    // +optional
    string domain_id = 21;
    string board_id = 22;
    // +optional
    string user_id = 23;
}

message PostStatQuery {
    spaceone.api.core.v1.StatisticsQuery query = 1;
    string domain_id = 2;
}

//{
//          "board_id": "board-123456789012",
//          "post_id": "post-123456789012",
//          "post_type": "INTERNAL",
//          "category": "developer",
//          "title": "title",
//          "contents": "This is contents.",
//          "options": {
//              "is_pinned": false,
//              "is_popup": true
//          },
//          "view_count": 0,
//          "writer": "user1",
//          "scope": "DOMAIN",
//          "domain_id": "domain-123456789012",
//          "user_id": "user1@email.com",
//          "created_at": "2022-01-01T01:06:23.732Z",
//          "updated_at": "2022-01-01T01:06:23.732Z"
//}
message PostInfo {
    enum PermissionGroup {
        PERMISSION_GROUP_NONE = 0;
        GLOBAL = 1;
        DOMAIN = 2;
    }

    string post_id = 2;
    string category = 4;
    string title = 5;
    string contents = 6;
    google.protobuf.Struct options = 7;
    int32 view_count = 8;
    string writer = 9;
    google.protobuf.ListValue files = 11;
    PermissionGroup permission_group = 12;
    string domain_id = 21;
    string board_id = 22;
    string user_id = 23;
    string user_domain_id = 24;
    string created_at = 31;
    string updated_at = 32;
}

//{
//      "results": [
//          {
//              "board_id": "board-b9aa34e65c60",
//              "post_id": "post-2118473ce15e",
//              "post_type": "INTERNAL",
//              "category": "spaceone",
//              "title": "title2",
//              "contents": "this is contents2.",
//              "options": {
//                  "is_popup": false,
//                  "is_pinned": true
//              },
//              "view_count": 3,
//              "writer": "seolmin2",
//              "scope": "DOMAIN",
//              "domain_id": "domain-58010aa2e451",
//              "user_id": "user1@email.com",
//              "created_at": "2022-06-13T01:06:23.732Z",
//              "updated_at": "2022-06-13T01:06:23.732Z"
//          },
//          {
//              "board_id": "board-b9aa34e65c60",
//              "post_id": "post-532ae1191233",
//              "post_type": "INTERNAL",
//              "category": "flower",
//              "title": "작업공지",
//              "contents": "This is description",
//              "options": {
//                  "is_pinned": true,
//                  "is_popup": true
//              },
//              "writer": "권설민",
//              "scope": "PUBLIC",
//              "user_id": "supervisor",
//              "created_at": "2022-06-10T07:01:44.384Z",
//              "updated_at": "2022-06-10T07:01:44.384Z"
//          }
//      ],
//      "total_count": 2
//}
message PostsInfo {
    repeated PostInfo results = 1;
    int32 total_count = 2;
}