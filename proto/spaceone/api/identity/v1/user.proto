// User API which allows member management within project, company, and domain
// note: Administrator must register User first.
syntax = "proto3";

package spaceone.api.identity.v1;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/identity/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";


service User {
    rpc create (CreateUserRequest) returns (UserInfo) {
        option (google.api.http) = {
            post: "/identity/v1/user/create"
            body: "*"
        };
    }
    // Update user info by given user_id
    rpc update (UpdateUserRequest) returns (UserInfo) {
        option (google.api.http) = {
            post: "/identity/v1/user/update"
            body: "*"
        };
    }

    rpc verify_email (VerifyEmailRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/identity/v1/user/verify-email"
            body: "*"
        };
    }

    rpc confirm_email (ConfirmEmailRequest) returns (UserInfo) {
        option (google.api.http) = {
            post: "/identity/v1/user/confirm-email"
            body: "*"
        };
    }

    rpc reset_password (UserRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/identity/v1/user/reset-password"
            body: "*"
        };
    }

    rpc set_required_actions (SetRequiredActionsRequest) returns (UserInfo) {
        option (google.api.http) = {
            post: "/identity/v1/user/set-required-actions"
            body: "*"
        };
    }
    rpc enable (UserRequest) returns (UserInfo) {
        option (google.api.http) = {
            post: "/identity/v1/user/enable"
            body: "*"
        };
    }
    rpc disable (UserRequest) returns (UserInfo) {
        option (google.api.http) = {
            post: "/identity/v1/user/disable"
            body: "*"
        };
    }
    rpc delete (UserRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/identity/v1/user/delete"
            body: "*"
        };
    }
    rpc get (GetUserRequest) returns (UserInfo) {
        option (google.api.http) = {
            post: "/identity/v1/user/get"
            body: "*"
        };
    }
    rpc list (UserQuery) returns (UsersInfo) {
        option (google.api.http) = {
            post: "/identity/v1/user/list"
            body: "*"
        };
    }
    rpc stat (UserStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            post: "/identity/v1/user/stat"
            body: "*"
        };
    }
    rpc find (FindUserQuery) returns (FindUsersInfo) {
        option (google.api.http) = {
            post: "/identity/v1/user/find"
            body: "*"
        };
    }
    rpc sync (UserRequest) returns (UserInfo) {
        option (google.api.http) = {
            post: "/identity/v1/user/sync"
            body: "*"
        };
    }
}

enum UserBackend {
    NONE_BACKEND = 0;
    LOCAL = 1;
    EXTERNAL = 2;
}

enum UserType {
    NONE_USER_TYPE = 0;
    USER = 1;
    API_USER = 2;
}

enum UserRequiredAction {
    UPDATE_PASSWORD = 0;
}


message CreateUserRequest {
    string user_id = 1;
    // +optional
    string password = 2;
    // +optional
    string name = 3;
    // +optional
    string email = 4;
    // +optional
    UserType user_type = 5;
    UserBackend backend = 6;
    // +optional
    string language = 7;
    // +optional
    string timezone = 8;
    // +optional
    google.protobuf.Struct tags = 9;
    string domain_id = 10;
    // +optional
    bool reset_password = 11;
}

//{
//  "user_id": "dkang@mz.co.kr",
//    "tags": [{
//      "key": "user1",
//      "value": "Reuters"
//    }, {
//      "key": "user2",
//      "value": "Bloomberg"
//    }],
//    "domain_id": "{{DOMAIN_ID}}"
//}
message UpdateUserRequest {
    string user_id = 1;
    // +optional
    string password = 2;
    // +optional
    string name = 3;
    // +optional
    string email = 4;
    // +optional
    string language = 7;
    // +optional
    string timezone = 8;
    // +optional
    google.protobuf.Struct tags = 9;
    string domain_id = 10;
    // +optional
    bool reset_password = 11;
}

message VerifyEmailRequest {
    string user_id = 1;
    // +optional
    string email = 2;
    // +optional
    bool force = 3;
    string domain_id = 4;
}

message ConfirmEmailRequest {
    string user_id = 1;
    string verify_code = 2;
    string domain_id = 3;
}

message SetRequiredActionsRequest {
    string user_id = 1;
    repeated UserRequiredAction actions = 2;
    string domain_id = 3;
}

message UserRequest {
    string user_id = 1;
    string domain_id = 2;
}

message GetUserRequest {
    string user_id = 1;
    string domain_id = 2;
    // +optional
    repeated string only = 3;
}

message UserQuery {
    // +optional
    spaceone.api.core.v1.Query query = 1;
    // +optional
    string user_id = 2;
    // +optional
    string name = 3;
    // +optional
    string state = 4;
    // +optional
    string email = 5;
    // +optional
    UserType user_type = 6;
    // +optional
    UserBackend backend = 7;
    // +optional
    string domain_id = 11;
}

//{
//    "user_id": "dkang@mz.co.kr",
//    "name": "Dong Yoo kang",
//    "state": "ENABLED",
//    "email": "dkang@mz.co.kr",
//    "language": "en",
//    "timezone": "UTC",
//    "tags": [{
//      "key": "user1",
//      "value": "Reuters"
//    }, {
//      "key": "user2",
//      "value": "Bloomberg"
//    }],
//    "last_accessed_at": {
//        "seconds": "1593161630",
//        "nanos": 79000000
//    },
//    "created_at": {
//        "seconds": "1593161630",
//        "nanos": 79000000
//    },
//    "domain_id": "domain-fd6e23a5ae36"
//}
message UserInfo {
    enum State {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
        PENDING = 3;
    }

    string user_id = 1;
    string name = 2;
    State state = 3;
    string email = 4;
    UserType user_type = 5;
    UserBackend backend = 6;
    string language = 7;
    string timezone = 8;
    repeated UserRequiredAction required_actions = 9;
    google.protobuf.Struct tags = 10;
    string last_accessed_at = 11;
    string created_at = 12;
    string domain_id = 13;
    bool email_verified = 14;
}

message UsersInfo {
    repeated UserInfo results = 1;
    int32 total_count = 2;
}

message UserStatQuery {
    spaceone.api.core.v1.StatisticsQuery query = 1;
    string domain_id = 2;
}

message FindUserSearch {
    oneof search_alias {
        string user_id = 1;
        string keyword = 2;
    }
}

message FindUserQuery {
    FindUserSearch search = 1;
    string domain_id = 2;
}

message FindUserInfo {
    string user_id = 1;
    string name = 2;
    string email = 3;
    google.protobuf.Struct tags = 4;
}

message FindUsersInfo {
    repeated FindUserInfo results = 1;
    int32 total_count = 2;
}
