syntax = "proto3";

package spaceone.api.identity.v2;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/identity/v2";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v2/query.proto";
import "spaceone/api/identity/v2/workspace.proto";
import "spaceone/api/identity/v2/user.proto";
import "spaceone/api/identity/v2/workspace_group.proto";
import "spaceone/api/identity/v2/role_binding.proto";


service UserProfile {
  rpc update (UpdateUserProfileRequest) returns (UserInfo) {
    option (google.api.http) = {
      post: "/identity/v2/user-profile/update"
      body: "*"
    };
  }

  // Sets the user's refresh token timeout. This API can only be used by users with the `DOMAIN_ADMIN` role.
  // Min value is `1800` seconds and max value is `2592000` seconds
  rpc set_refresh_timeout (SetRefreshTimeout) returns (UserInfo) {
    option (google.api.http) = {
      post: "/identity/v2/user-profile/set-refresh-timeout"
      body: "*"
    };
  }

  rpc verify_email (VerifyEmailRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/identity/v2/user-profile/verify-email"
      body: "*"
    };
  }

  rpc confirm_email (ConfirmEmailRequest) returns (UserInfo) {
    option (google.api.http) = {
      post: "/identity/v2/user-profile/confirm-email"
      body: "*"
    };
  }

  // +noauth
  rpc reset_password (UserPasswordResetRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/identity/v2/user-profile/reset-password"
      body: "*",
    };
  }

  // Enable MFA for user. If this api is called, send email to user.
  rpc enable_mfa (EnableMFARequest) returns (UserInfo){
    option (google.api.http) = {
      post: "/identity/v2/user-profile/enable-mfa"
      body: "*"
    };
  }

  // Disable MFA for user. If this api is called, send email to user.
  rpc disable_mfa (DisableMFARequest) returns (UserInfo) {
    option (google.api.http) = {
      post: "/identity/v2/user-profile/disable-mfa"
      body: "*"
    };
  }

  // Confirm MFA for user by given verify_code which is sent by your authentication method.
  rpc confirm_mfa (ConfirmMFARequest) returns (UserInfo) {
    option (google.api.http) = {
      post: "/identity/v2/user-profile/confirm-mfa"
      body: "*"
    };
  }

  rpc get (UserProfileRequest) returns (UserInfo) {
    option (google.api.http) = {
      post: "/identity/v2/user-profile/get"
      body: "*"
    };
  }

  rpc get_workspaces (UserProfileRequest) returns (MyWorkspacesInfo) {
    option (google.api.http) = {
      post: "/identity/v2/user-profile/get-workspaces"
      body: "*"
    };
  }

  rpc get_workspace_groups (WorkspaceGroupUserProfileRequest) returns (MyWorkspaceGroupsInfo) {
    option (google.api.http) = {
      post: "/identity/v2/user-profile/get-workspace-groups"
      body: "*"
    };
  }
}


message UpdateUserProfileRequest {
  // +optional
  string password = 1;
  // +optional
  string name = 2;
  // +optional
  string email = 3;
  // +optional
  string language = 4;
  // +optional
  string timezone = 5;
  // +optional
  google.protobuf.Struct tags = 6;
}

//{
//   "refresh_token_timout": 604800
//}
message SetRefreshTimeout {
  int32 refresh_timeout = 1;
}


//{
//   "email": "wonny@cloudforet.io"
//}
message VerifyEmailRequest {
  // +optional
  string email = 1;
}


//{
//   "verify_code": "12346"
//}
message ConfirmEmailRequest {
  string verify_code = 1;
}

//{
//  "user_id": "example@cloudforet.com",
//  "mfa_type": "EMAIL",
//  "options": {"email": "wonny@cloudforet.com"},
//  "domain_id": "domain-a1b2c3d4e5f6"
//}
message EnableMFARequest {
  // EMAIL
  string mfa_type = 1;
  // If mfa_type is EMAIL, email is required in options. options will be saved in mfa's options field.
  google.protobuf.Struct options = 3;
}

//{
//  "user_id": "example@cloudforet.com",
//  "force": false,
//  "domain_id": "domain-a1b2c3d4e5f6"
//}
message DisableMFARequest {
}

//{
//  "user_id": "example@cloudforet",
//  "verify_code": "123456",
//  "domain_id": "domain-a1b2c3d4e5f6"
//}
message ConfirmMFARequest {
  string verify_code = 1;
}

message UserProfileRequest {
  // +optional
  string workspace_group_id = 1;
}

message WorkspaceGroupUserProfileRequest {

}

message UserPasswordResetRequest {
  string user_id = 1;
  string domain_id = 21;
}


message MyWorkspaceInfo {
  enum State {
    NONE = 0;
    ENABLED = 1;
    DISABLED = 2;
  }

  enum RoleType {
    ROLE_TYPE_NONE = 0;
    DOMAIN_ADMIN = 1;
    WORKSPACE_OWNER = 2;
    WORKSPACE_MEMBER = 3;
  }

  string workspace_id = 1;
  string name = 2;
  State state = 3;
  string role_name = 4;
  RoleType role_type = 5;
  google.protobuf.Struct tags = 6;
  string created_by = 7;
  string reference_id = 8;
  bool is_managed = 9;
  bool is_dormant = 10;
  string domain_id = 21;
  string role_id = 22;
  string created_at = 31;
  string last_synced_at = 32;
  string dormant_updated_at = 33;
}


message MyWorkspacesInfo {
  repeated MyWorkspaceInfo results = 1;
  int32 total_count = 2;
}

message MyWorkspaceGroupInfo {
  string workspace_group_id = 1;
  string name = 2;
  repeated UserWorkspaceGroup users = 3;
  google.protobuf.Struct tags = 4;
  spaceone.api.identity.v2.RoleBindingInfo role_binding_info = 5;
  string created_by = 6;
  string updated_by = 7;
  string domain_id = 21;
  string created_at = 31;
  string updated_at = 32;
}

message MyWorkspaceGroupsInfo {
  repeated MyWorkspaceGroupInfo results = 1;
  int32 total_count = 2;
}

