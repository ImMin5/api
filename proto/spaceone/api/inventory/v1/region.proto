/*
desc: A Region is a resource storing regional information from each cloud service provider. Regional data stored by the resource includes the latitude and longitude of the region.
*/
syntax = "proto3";

package spaceone.api.inventory.v1;

option go_package = "dist/go";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";


service Region {
    /*
    desc: Creates a new Region. As the parameter `region_key`, which is automatically created when a Region is created, is in a form of `{provider}.{region_code}`, it is unique regardless of providers. You can also specify the latitude, longitude, and continent information in `tags`.
    request_example: >-
      {
        "name": "Asia Pacific (Seoul)",
        "region_code": "ap-northeast-2",
        "provider": "aws",
        "tags": {
            "continent": "asis_pacific",
            "longitude": "73.013805",
            "latitude": "19.147428"
        }
      }
    response_example: >-
      {
        "region_id": "region-e41deed3c939",
        "name": "Asia Pacific (Seoul)",
        "region_key": "aws.ap-northeast-2",
        "region_code": "ap-northeast-2",
        "provider": "aws",
        "tags": {
            "continent": "asia_pacific",
            "longitude": "73.013805",
            "latitude": "19.147428"
        },
        "domain_id": "domain-x1b3c34v432",
        "created_at": "2021-11-18T13:07:31.382Z",
        "updated_at": "2022-06-17T00:07:35.469Z"
      }
    */
    rpc create (CreateRegionRequest) returns (RegionInfo) {
        option (google.api.http) = { post: "/inventory/v1/regions" };
    }
    /*
    desc: Updates a specific Region. You can make changes in Region settings, including `name` and `tags`. The `tags` contain the continent, latitude, and longitude.
    request_example: >-
      {
        "region_id": "region-e41deed3c939",
        "name": "Region home",
        "tags": {
            "latitude": "6.34545",
            "continent": "asia_pacific",
            "longitude": "5.6433213"
        }
      }
    response_example: >-
      {
        "region_id": "region-e41deed3c939",
        "name": "Region home",
        "region_key": "aws.ap-northeast-2",
        "region_code": "ap-northeast-2",
        "provider": "aws",
        "tags": {
            "latitude": "6.34545",
            "continent": "asia_pacific",
            "longitude": "5.6433213"
        },
        "domain_id": "domain-x1b3c34v432",
        "created_at": "2021-11-18T13:07:31.382Z",
        "updated_at": "2022-06-17T00:07:35.469Z"
      }
    */
    rpc update (UpdateRegionRequest) returns (RegionInfo) {
        option (google.api.http) = { put: "/inventory/v1/region/{region_id}" };
    }
    /*
    desc: Deletes a specific Region. You must specify the `region_id` of the Region to delete.
    request_example: >-
      {
        "region_id": "region-e41deed3c939"
      }
    */
    rpc delete (RegionRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/inventory/v1/region/{region_id}" };
    }
    /*
    desc: Gets a specific Region. Prints detailed information about the Region, including `name`, `region_code`, and a location coordinate.
    request_example: >-
      {
        "region_id": "region-f803eb00b567"
      }
    response_example: >-
      {
        "region_id": "region-f803eb00b567",
        "name": "Asia Pacific (Seoul)",
        "region_key": "aws.ap-northeast-2",
        "region_code": "ap-northeast-2",
        "provider": "aws",
        "tags": {
            "latitude": "6.34545",
            "continent": "asia_pacific",
            "longitude": "5.6433213"
        },
        "domain_id": "domain-x1b3c34v432",
        "created_at": "2022-03-21T09:08:31.961Z",
        "updated_at": "2022-06-17T00:07:35.749Z"
      }
    */
    rpc get (GetRegionRequest) returns (RegionInfo) {
        option (google.api.http) = { get: "/inventory/v1/region/{region_id}" };
    }
    /*
    desc: Gets a list of all Regions. You can use a query to get a filtered list of Regions.
    request_example: >-
      {
        "query": {
            "filter": [
                {
                    "key": "name",
                    "value": "Asia Pacific",
                    "operator": "contain"
                }
            ]
        }
      }
    response_example: >-
      {
        "results": [
            {
                "region_id": "region-e41deed3c939",
                "name": "Asia Pacific (Mumbai)",
                "region_key": "aws.ap-south-1",
                "region_code": "ap-south-1",
                "provider": "aws",
                "tags": {
                    "continent": "asia_pacific",
                    "longitude": "73.013805",
                    "latitude": "19.147428"
                },
                "domain_id": "domain-x1b3c34v432",
                "created_at": "2021-11-18T13:07:31.382Z",
                "updated_at": "2022-06-17T00:07:35.469Z"
            },
            {
                "region_id": "region-f803eb00b567",
                "name": "Asia Pacific (Seoul)",
                "region_key": "aws.ap-northeast-2",
                "region_code": "ap-northeast-2",
                "provider": "aws",
                "tags": {
                    "latitude": "6.34545",
                    "continent": "asia_pacific",
                    "longitude": "5.6433213"
                },
                "domain_id": "domain-x1b3c34v432",
                "created_at": "2022-03-21T09:08:31.961Z",
                "updated_at": "2022-06-17T00:07:35.749Z"
            }
        ],
        "total_count": 2
      }
    */
    rpc list (RegionQuery) returns (RegionsInfo) {
        option (google.api.http) = {
            get: "/inventory/v1/regions"
            additional_bindings {
                post: "/inventory/v1/regions/search"
            }
        };
    }
    rpc stat (RegionStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/inventory/v1/regions/stat" };
    }
}

message CreateRegionRequest {
    // is_required: true
    string name = 1;
    // is_required: true
    string region_code = 2;
    // is_required: false
    string provider = 3;
    // is_required: false
    google.protobuf.Struct tags = 4;
    // is_required: true
    string domain_id = 5;
}

message UpdateRegionRequest {
    // is_required: true
    string region_id = 1;
    // is_required: false
    string name = 2;
    // is_required: false
    google.protobuf.Struct tags = 3;
    // is_required: true
    string domain_id = 4;
}

message RegionRequest {
    // is_required: true
    string region_id = 1;
    // is_required: true
    string domain_id = 2;
}

message GetRegionRequest {
    // is_required: true
    string region_id = 1;
    // is_required: true
    string domain_id = 2;
    // is_required: false
    repeated string only = 3;
}

message RegionQuery {
    // is_required: false
    spaceone.api.core.v1.Query query = 1;
    // is_required: false
    string region_id = 2;
    // is_required: false
    string name = 3;
    // is_required: false
    string region_key = 4;
    // is_required: false
    string region_code = 5;
    // is_required: false
    string provider = 6;
    // is_required: true
    string domain_id = 7;
}

message RegionInfo {
    string region_id = 1;
    string name = 2;
    string region_key = 3;
    string region_code = 4;
    string provider = 5;
    google.protobuf.Struct tags = 6;
    string domain_id = 7;
    string created_at = 8;
    string updated_at = 9;
}

message RegionsInfo {
    repeated RegionInfo results = 1;
    int32 total_count = 2;
}

message RegionStatQuery {
    // is_required: true
    spaceone.api.core.v1.StatisticsQuery query = 1;
    // is_required: true
    string domain_id = 2;
}