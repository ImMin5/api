/*
desc: A Collector is a plugin instance collecting cloud resources. A Collector can collect the resource data manually or by a pre-set schedule.
*/
syntax = "proto3";

package spaceone.api.inventory.v1;

option go_package = "dist/go";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";


service Collector {
    /*
    desc: Creates a new Collector with information of the plugin to use. Information of the plugin includes `version`, `provider`, and `upgrade_mode`.
    request_example: >-
      {
        "name": "AWS Collector",
        "plugin_info": {
            "plugin_id": "plugin-30d21ef75a5d",
            "version": "1.13.13",
            "options": {},
            "provider": "aws",
            "metadata": {
                "filter_format": [],
                "supported_schedules": [
                    "hours"
                ],
                "supported_resource_type": [
                    "inventory.CloudService",
                    "inventory.CloudServiceType",
                    "inventory.Region"
                ],
                "supported_features": [
                    "garbage_collection"
                ]
            },
            "upgrade_mode": "AUTO"
        },
        "priority": 1,
        "tags": {
            "type": "test"
        },
        "is_public": true
      }
    response_example: >-
      {
        "collector_id": "collector-2c0847644f39",
        "name": "AWS Collector",
        "state": "ENABLED",
        "plugin_info": {
            "plugin_id": "plugin-30d21ef75a5d",
            "version": "1.13.13",
            "options": {},
            "provider": "aws",
            "metadata": {
                "supported_schedules": [
                    "hours"
                ],
                "supported_resource_type": [
                    "inventory.CloudService",
                    "inventory.CloudServiceType",
                    "inventory.Region"
                ],
                "filter_format": [],
                "supported_features": [
                    "garbage_collection"
                ]
            },
            "upgrade_mode": "AUTO"
        },
        "priority": 1,
        "tags": {
            "type": "test"
        },
        "created_at": "2022-06-17T06:33:27.195Z",
        "domain_id": "domain-58010aa2e451",
        "provider": "aws",
        "capability": {
            "supported_schema": [
                "aws_access_key"
            ]
        },
        "is_public": true
      }
    */
    rpc create (CreateCollectorRequest) returns (CollectorInfo) {
        option (google.api.http) = { post: "/inventory/v1/collectors" };
    }
    /*
    desc: Updates a specific Collector. You can make changes in Collector settings, including `name` and `tags`.
    request_example: >-
      {
        "collector_id": "collector-2c0847644f39",
        "name": "New AWS Collector",
        "plugin_info": {
            "plugin_id": "plugin-30d21ef75a5d",
            "version": "1.14.0",
            "provider": "aws",
            "upgrade_mode": "MANUAL"
        },
        "priority": 10,
        "tags": {
            "a": "b"
        }
      }
    response_example: >-
      {
        "collector_id": "collector-2c0847644f39",
        "name": "New AWS Collector",
        "state": "ENABLED",
        "plugin_info": {
            "plugin_id": "plugin-30d21ef75a5d",
            "version": "1.14.0",
            "options": {},
            "provider": "aws",
            "metadata": {
                "supported_schedules": [
                    "hours"
                ],
                "supported_resource_type": [
                    "inventory.CloudService",
                    "inventory.CloudServiceType",
                    "inventory.Region"
                ],
                "filter_format": [],
                "supported_features": [
                    "garbage_collection"
                ]
            },
            "upgrade_mode": "MANUAL"
        },
        "priority": 10,
        "tags": {
            "a": "b"
        },
        "created_at": "2022-06-17T06:33:27.195Z",
        "domain_id": "domain-58010aa2e451",
        "provider": "aws",
        "capability": {
            "supported_schema": [
                "aws_access_key"
            ]
        },
        "is_public": true
      }
    */
    rpc update (UpdateCollectorRequest) returns (CollectorInfo) {
        option (google.api.http) = { put: "/inventory/v1/collector/{collector_id}" };
    }
    /*
    desc: Updates the plugin of a specific Collector. This method resets the plugin data in the Collector to update the `metadata`.
    request_example: >-
      {

      }
    response_example: >-
      {

      }
    */
    rpc update_plugin (UpdatePluginRequest) returns (CollectorInfo) {
        option (google.api.http) = { put: "/inventory/v1/collector/{collector_id}/plugin" };
    }
    /*
    desc: Verifies the plugin of a specific Collector. This method validates the plugin data, `version` and `endpoint`.
    request_example: >-
      {

      }
    response_example: >-
      {

      }
    */
    rpc verify_plugin (VerifyPluginRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { post: "/inventory/v1/collector/{collector_id}/plugin/verify" };
    }
    /*
    desc: Deletes a specific Collector. You must specify the `collector_id` of the Collector to delete.
    request_example: >-
      {

      }
    response_example: >-
      {

      }
    */
    rpc delete (CollectorRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/inventory/v1/collector/{collector_id}" };
    }
    /*
    desc: Gets a specific Collector. Prints detailed information about the Collector, including its state, basic information, and the plugin information used for cloud resource collection.
    request_example: >-
      {
         "collector_id": "collector-f2e4e9cc7f21"
      }
    */
    rpc get (GetCollectorRequest) returns (CollectorInfo) {
        option (google.api.http) = { get: "/inventory/v1/collector/{collector_id}" };
    }
    /*
    desc: Enables a specific Collector. By enabling a Collector, you can communicate with a plugin used for collection.
    request_example: >-
      {
        "collector_id": "collector-f2e4e9cc7f21"
      }
    response_example: >-
      {
        "collector_id": "collector-f2e4e9cc7f21",
        "name": "AWS Cloud Service Collector",
        "state": "ENABLED",
        "plugin_info": {
            "plugin_id": "plugin-30d21ef75a5d",
            "version": "1.14.10",
            "options": {},
            "provider": "aws",
            "metadata": {
                "supported_schedules": [
                    "hours"
                ],
                "filter_format": [],
                "supported_resource_type": [
                    "inventory.CloudService",
                    "inventory.CloudServiceType",
                    "inventory.Region"
                ],
                "supported_features": [
                    "garbage_collection"
                ]
            },
            "upgrade_mode": "AUTO"
        },
        "priority": 10,
        "tags": {},
        "provider": "aws",
        "capability": {
            "supported_schema": [
                "aws_access_key"
            ]
        },
        "is_public": true,
        "created_at": "2021-03-08T06:49:27.876Z",
        "last_collected_at": "2022-06-17T06:00:07.162Z",
        "domain_id": "domain-58010aa2e451"
      }
    */
    rpc enable (CollectorRequest) returns (CollectorInfo) {
        option (google.api.http) = { put: "/inventory/v1/collector/{collector_id}/enable" };
    }
    /*
    desc: Disables a specific Collector. By disabling a Collector, you cannot communicate with a plugin used for collection.
    request_example: >-
      {
        "collector_id": "collector-f2e4e9cc7f21"
      }
    response_example: >-
      {
        "collector_id": "collector-f2e4e9cc7f21",
        "name": "AWS Cloud Service Collector",
        "state": "ENABLED",
        "plugin_info": {
            "plugin_id": "plugin-30d21ef75a5d",
            "version": "1.14.10",
            "options": {},
            "provider": "aws",
            "metadata": {
                "supported_schedules": [
                    "hours"
                ],
                "filter_format": [],
                "supported_resource_type": [
                    "inventory.CloudService",
                    "inventory.CloudServiceType",
                    "inventory.Region"
                ],
                "supported_features": [
                    "garbage_collection"
                ]
            },
            "upgrade_mode": "AUTO"
        },
        "priority": 10,
        "tags": {},
        "provider": "aws",
        "capability": {
            "supported_schema": [
                "aws_access_key"
            ]
        },
        "is_public": true,
        "created_at": "2021-03-08T06:49:27.876Z",
        "last_collected_at": "2022-06-17T06:00:07.162Z",
        "domain_id": "domain-58010aa2e451"
      }
    */
    rpc disable (CollectorRequest) returns (CollectorInfo) {
        option (google.api.http) = { put: "/inventory/v1/collector/{collector_id}/disable" };
    }
    /*
    desc: Gets a list of all Collectors. You can use a query to get a filtered list of Collectors.
    request_example: >-
      {
        "query": {}
      }
    response_example: >-
      {
         "results": [
            {
                "job_id": "job-3b124006c2d2",
                "status": "SUCCESS",
                "filter": {},
                "total_tasks": 2,
                "collector_info": {
                    "collector_id": "collector-accd02663b3d",
                    "name": "openstack-collector",
                    "state": "ENABLED",
                    "plugin_info": {
                        "plugin_id": "plugin-openstack-inven-collector",
                        "version": "0.4.2.20220616.134758"
                    },
                    "provider": "openstack",
                    "capability": {
                        "supported_schema": [
                            "openstack_credentials"
                        ]
                    },
                    "is_public": true
                },
                "domain_id": "domain-58010aa2e451",
                "created_at": "2022-06-17T08:00:01.225Z",
                "updated_at": "2022-06-17T08:00:01.225Z",
                "finished_at": "2022-06-17T08:00:15.197Z"
            },
            {
                "job_id": "job-587a3d3b4db3",
                "status": "SUCCESS",
                "filter": {},
                "total_tasks": 3,
                "collector_info": {
                    "collector_id": "collector-2c0847644f39",
                    "name": "AWS stat-kwon Collector",
                    "state": "ENABLED",
                    "plugin_info": {
                        "plugin_id": "plugin-30d21ef75a5d",
                        "version": "1.13.13.20220610.143142"
                    },
                    "provider": "aws",
                    "capability": {
                        "supported_schema": [
                            "aws_access_key"
                        ]
                    },
                    "is_public": true
                },
                "domain_id": "domain-58010aa2e451",
                "created_at": "2022-06-17T08:00:00.407Z",
                "updated_at": "2022-06-17T08:00:00.407Z",
                "finished_at": "2022-06-17T08:07:32.023Z"
            }
        ],
        "total_count": 2
      }
    */
    rpc list (CollectorQuery) returns (CollectorsInfo) {
        option (google.api.http) = {
            get: "/inventory/v1/collectors"
            additional_bindings {
                post: "/inventory/v1/collectors/search"
            }
        };
    }
    rpc stat (CollectorStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/inventory/v1/collectors/stat" };
    }
    /*
    desc: ''
    request_example: >-
      {

      }
    response_example: >-
      {

      }
    */
    rpc collect (CollectRequest) returns (JobInfo) {
        option (google.api.http) = { post: "/inventory/v1/collector/{collector_id}/collect" };
    }
    /*
    desc: Adds a schedule to a specific Collector. When specifying the time to collect, the schedule is assigned in units of one hour.The specified schedule is applied every day.
    request_example: >-
      {
        "collector_id": "collector-2c0847644f39",
        "name": "regular collection",
        "schedule": {
            "hours": [16, 18, 20, 22, 0]
        }
      }
    response_example: >-
      {
        "schedule_id": "sched-dfb2f6ef84bc",
        "name": "regular collection",
        "collect_mode": "ALL",
        "schedule": {
            "hours": [
                16,
                18,
                20,
                22,
                0
            ]
        },
        "created_at": "2022-06-17T07:12:07.374Z",
        "collector_info": {
            "collector_id": "collector-2c0847644f39",
            "name": "AWS stat-kwon Collector",
            "state": "ENABLED",
            "plugin_info": {
                "plugin_id": "plugin-30d21ef75a5d",
                "version": "1.13.13.20220610.143142",
                "options": {},
                "provider": "aws",
                "metadata": {
                    "supported_resource_type": [
                        "inventory.CloudService",
                        "inventory.CloudServiceType",
                        "inventory.Region"
                    ],
                    "supported_features": [
                        "garbage_collection"
                    ],
                    "filter_format": [],
                    "supported_schedules": [
                        "hours"
                    ]
                },
                "upgrade_mode": "MANUAL"
            },
            "priority": 10,
            "tags": {
                "a": "b"
            },
            "created_at": "2022-06-17T06:33:27.195Z",
            "domain_id": "domain-58010aa2e451",
            "provider": "aws",
            "capability": {
                "supported_schema": [
                    "aws_access_key"
                ]
            },
            "is_public": true
        },
        "filter": {}
      }
    */
    rpc add_schedule (CreateScheduleRequest) returns (ScheduleInfo) {
        option (google.api.http) = { post: "/inventory/v1/collector/{collector_id}/schedule" };
    }
    /*
    desc: Gets a specific schedule set in a specific Collector. You must specify the `collector_id` of the Collector and the `schedule_id` of the schedule.
    request_example: >-
      {
        "collector_id": "collector-2c0847644f39",
        "schedule_id": "sched-dfb2f6ef84bc"
      }
    response_example: >-
      {
        "schedule_id": "sched-dfb2f6ef84bc",
        "name": "regular collection",
        "collect_mode": "ALL",
        "schedule": {
            "hours": [
                16,
                18,
                20,
                22,
                0
            ]
        },
        "created_at": "2022-06-17T07:12:07.374Z",
        "collector_info": {
            "collector_id": "collector-2c0847644f39",
            "name": "AWS stat-kwon Collector",
            "state": "ENABLED",
            "plugin_info": {
                "plugin_id": "plugin-30d21ef75a5d",
                "version": "1.13.13.20220610.143142",
                "options": {},
                "provider": "aws",
                "metadata": {
                    "supported_features": [
                        "garbage_collection"
                    ],
                    "filter_format": [],
                    "supported_schedules": [
                        "hours"
                    ],
                    "supported_resource_type": [
                        "inventory.CloudService",
                        "inventory.CloudServiceType",
                        "inventory.Region"
                    ]
                },
                "upgrade_mode": "MANUAL"
            },
            "priority": 10,
            "tags": {
                "a": "b"
            },
            "created_at": "2022-06-17T06:33:27.195Z",
            "domain_id": "domain-58010aa2e451",
            "provider": "aws",
            "capability": {
                "supported_schema": [
                    "aws_access_key"
                ]
            },
            "is_public": true
        },
        "filter": {}
      }
    */
    rpc get_schedule (ScheduleRequest) returns (ScheduleInfo) {
        option (google.api.http) = { get: "/inventory/v1/collector/{collector_id}/schedule/{schedule_id}" };
    }
    /*
    desc: Updates a specific schedule of the Collector. You can make changes in schedule settings, including `name` and collection time.
    request_example: >-
      {
        "schedule_id": "sched-dfb2f6ef84bc",
        "collector_id": "collector-2c0847644f39",
        "name": "regular collection",
        "collect_mode": "ALL",
        "schedule": {
            "hours": [2, 4, 6, 8, 0]
        },
        "filter": {}
      }
    response_example: >-
      {
        "schedule_id": "sched-dfb2f6ef84bc",
        "name": "regular collection",
        "collect_mode": "ALL",
        "schedule": {
            "hours": [
                2,
                4,
                6,
                8,
                0
            ]
        },
        "created_at": "2022-06-17T07:12:07.374Z",
        "collector_info": {
            "collector_id": "collector-2c0847644f39",
            "name": "AWS stat-kwon Collector",
            "state": "ENABLED",
            "plugin_info": {
                "plugin_id": "plugin-30d21ef75a5d",
                "version": "1.13.13.20220610.143142",
                "options": {},
                "provider": "aws",
                "metadata": {
                    "supported_features": [
                        "garbage_collection"
                    ],
                    "supported_schedules": [
                        "hours"
                    ],
                    "supported_resource_type": [
                        "inventory.CloudService",
                        "inventory.CloudServiceType",
                        "inventory.Region"
                    ],
                    "filter_format": []
                },
                "upgrade_mode": "MANUAL"
            },
            "priority": 10,
            "tags": {
                "a": "b"
            },
            "created_at": "2022-06-17T06:33:27.195Z",
            "last_collected_at": "2022-06-17T08:00:00.793Z",
            "domain_id": "domain-58010aa2e451",
            "provider": "aws",
            "capability": {
                "supported_schema": [
                    "aws_access_key"
                ]
            },
            "is_public": true
        },
        "filter": {}
      }
    */
    rpc update_schedule (UpdateScheduleRequest) returns (ScheduleInfo) {
        option (google.api.http) = { post: "/inventory/v1/collector/{collector_id}/schedule/{schedule_id}" };
    }
    /*
    desc: Deletes a specific schedule of the Collector. You must specify the `schedule_id` of the schedule to delete.
    request_example: >-
      {
        "schedule_id": "sched-dfb2f6ef84bc",
        "collector_id": "collector-2c0847644f39"
      }
    */
    rpc delete_schedule (DeleteScheduleRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete : "/inventory/v1/collector/{collector_id}/schedule/{schedule_id}" };
    }
    /*
    desc: Gets a list of all schedules set in a specific Collector. You must specify the `collector_id` of the Collector to get the schedule from.
    request_example: >-
      {
        "collector_id": "collector-f2e4e9cc7f21"
      }
    response_example: >-
      {
         "results": [
            {
                "schedule_id": "sched-572819cabe90",
                "name": "daily",
                "collect_mode": "ALL",
                "schedule": {
                    "hours": [
                        15,
                        16,
                        18,
                        21,
                        0,
                        3,
                        4,
                        6,
                        9,
                        12
                    ]
                },
                "created_at": "2021-03-13T14:32:46.137Z",
                "collector_info": {
                    "collector_id": "collector-f2e4e9cc7f21",
                    "name": "AWS Cloud Service Collector",
                    "state": "ENABLED",
                    "plugin_info": {
                        "plugin_id": "plugin-30d21ef75a5d",
                        "version": "1.13.13.20220610.143142",
                        "options": {},
                        "provider": "aws",
                        "metadata": {
                            "supported_features": [
                                "garbage_collection"
                            ],
                            "supported_schedules": [
                                "hours"
                            ],
                            "filter_format": [],
                            "supported_resource_type": [
                                "inventory.CloudService",
                                "inventory.CloudServiceType",
                                "inventory.Region"
                            ]
                        },
                        "upgrade_mode": "AUTO"
                    },
                    "priority": 10,
                    "tags": {},
                    "created_at": "2021-03-08T06:49:27.876Z",
                    "last_collected_at": "2022-06-17T06:00:07.162Z",
                    "domain_id": "domain-58010aa2e451",
                    "provider": "aws",
                    "capability": {
                        "supported_schema": [
                            "aws_access_key"
                        ]
                    },
                    "is_public": true
                },
                "filter": {}
            }
    ],
    "total_count": 1
      }
    */
    rpc list_schedules (ScheduleQuery) returns (SchedulesInfo) {
         option (google.api.http) = {
            get: "/inventory/v1/collector/{collector_id}/schedules"
            additional_bindings {
                post: "/inventory/v1/collector/{collector_id}/schedules/search"
            }
        };
    }
}

message PluginInfo {
    enum UpgradeMode {
        NONE = 0;
        MANUAL = 1;
        AUTO = 2;
    }

    string plugin_id = 1;
    string version = 2;
    google.protobuf.Struct options = 3;
    string secret_id = 4;
    string secret_group_id = 5;
    string provider = 6;
    string service_account_id = 7;
    google.protobuf.Struct metadata = 10;
    UpgradeMode upgrade_mode = 11;
}

message CreateCollectorRequest {
    // is_required: true
    string name = 1;
    // is_required: true
    PluginInfo plugin_info = 2;
    // is_required: false
    int32  priority = 3;
    // is_required: false
    google.protobuf.Struct tags = 5;
    // is_required: true
    string domain_id = 6;
    // is_required: false
    // desc: default is true
    bool is_public = 10;
    // is_required: false
    // desc: if is_public is false, project_id is require
    // remained as is_public | True | False
    string project_id = 11;

}

message UpdateCollectorRequest {
    // is_required: true
	  string collector_id = 1;
    // is_required: false
    string name = 2;
    // is_required: false
    // note: deprecated, use update_plugin
    PluginInfo plugin_info = 3;
    // is_required: false
    int32  priority = 4;
    // is_required: false
    google.protobuf.Struct tags = 6;
    // is_required: true
    string domain_id = 7;
}

message UpdatePluginRequest {
    enum UpgradeMode {
        NONE = 0;
        MANUAL = 1;
        AUTO = 2;
    }

    // is_required: true
    string collector_id = 1;
    // is_required: false
    string version = 2;
    // is_required: false
    google.protobuf.Struct options = 3;
    // is_required: true
    string domain_id = 4;
    // is_required: false
    UpgradeMode upgrade_mode = 5;
}

message CollectorRequest {
    // is_required: true
    string collector_id = 1;
    // is_required: true
    string domain_id = 2;
}

message GetCollectorRequest {
    // is_required: true
    string collector_id = 1;
    // is_required: true
    string domain_id = 2;
	// is_required: false
    repeated string only = 3;
}

message CollectorQuery {
	enum State {
		NONE = 0;
		ENABLED = 1;
		DISABLED = 2;
	}

    spaceone.api.core.v1.Query query = 1;
	string collector_id = 2;
    string name = 3;
    State state = 4;
    int32 priority = 5;
    string plugin_id = 6;
    string domain_id = 7;
}

message CollectRequest {
    // is_required: true
    string collector_id = 1;
    // is_required: false
    google.protobuf.Struct filter = 2;
    // is_required: false
    string secret_id = 3;
    // is_required: false
    string collect_mode = 4;
    // is_required: true
    string domain_id = 5;
    // is_required: false
    bool use_cache = 6;
}

message VerifyPluginRequest {
    // is_required: true
    string collector_id = 1;
    // is_required: false
    string secret_id = 2;
    // is_required: true
    string domain_id = 3;
}
message CollectorInfo {
    enum State {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }

	  string collector_id = 1;
    string name = 2;
	  State state = 3;
    PluginInfo plugin_info = 4;
    int32  priority = 5;
    google.protobuf.Struct tags = 7;
    string created_at = 8;
    string last_collected_at = 9;
    string domain_id = 10;
    string provider = 11;
    google.protobuf.Struct capability = 12;
    bool is_public = 20;
    string project_id = 21;
}

message CollectorsInfo {
    repeated CollectorInfo results = 1;
    int32 total_count = 2;
}

message CollectorStatQuery {
    // is_required: true
    spaceone.api.core.v1.StatisticsQuery query = 1;
    // is_required: true
    string domain_id = 2;
}

message VerifyInfo {
    bool status = 1;
}

message ErrorInfo {
    string error_code = 1;
    string message = 2;
    google.protobuf.Struct additional = 3;
}

message JobInfo {
    enum Status {
        NONE = 0;
        CREATED = 1;
        CANCELED = 2;
        IN_PROGRESS = 3;
        SUCCESS = 4;
        ERROR = 5;
        TIMEOUT = 6;
	}

    string job_id = 1;
    Status status = 2;
    google.protobuf.Struct filter = 3;
    int32 total_tasks = 4;
    int32 remained_tasks = 5;
    repeated ErrorInfo errors = 6;

    CollectorInfo collector_info = 11;
    string project_id = 12;
    string domain_id = 13;

    string created_at = 21;
    string updated_at = 22;
    string finished_at = 23;
}

message Scheduled {
    string cron = 1;
    int32 interval = 2;
    repeated int32 minutes = 3;
    repeated int32 hours = 4;
}

message CreateScheduleRequest {
    // is_required: true
    string domain_id = 1;
    // is_required: true
    string collector_id = 2;
    // is_required: false
    string name = 3;
    // is_required: false
    string collect_mode = 4;
    // is_required: true
    Scheduled schedule = 5;
    // is_required: false
    google.protobuf.Struct filter = 6;
}

message UpdateScheduleRequest {
    // is_required: true
    string domain_id = 1;
    // is_required: true
    string schedule_id = 2;
    // is_required: true
    string collector_id = 3;
    // is_required: false
    string name = 4;
    // is_required: false
    string collect_mode = 5;
    // is_required: false
    Scheduled schedule = 6;
    // is_required: false
    google.protobuf.Struct filter = 7;
}

message ScheduleRequest {
    // is_required: true
    string domain_id = 1;
    // is_required: true
    string schedule_id = 2;
    // is_required: true
    string collector_id = 3;
}
message DeleteScheduleRequest {
    // is_required: true
    string domain_id = 1;
    // is_required: true
    string schedule_id = 2;
    // is_required: true
    string collector_id = 3;
}

message ScheduleQuery {
    // is_required: false
    spaceone.api.core.v1.Query query = 1;
    // is_required: true
	string collector_id = 2;
    // is_required: false
    string schedule_id = 3;
    // is_required: true
    string domain_id = 4;
}

message ScheduleInfo {
    string domain_id = 1;
    string schedule_id = 2;
    string name = 3;
    string collect_mode = 4;
    Scheduled schedule = 5;
    string created_at = 10;
    string last_scheduled_at = 11;
    CollectorInfo collector_info = 20;
    google.protobuf.Struct filter = 21;
}

message SchedulesInfo {
    repeated ScheduleInfo results = 1;
    int32 total_count = 2;
}

