/*
desc: A Policy is a resource managing page access permissions. This resource can be used in all domains if it is defined in the `repository` microservice.
 */
syntax = "proto3";

package spaceone.api.repository.v1;

option go_package = "dist/go";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";
import "spaceone/api/repository/v1/repository.proto";


service Policy {
    /*
    desc: Creates a new Policy. The parameter `policy_id`, an identifier of Policy resources, can only include lowercase alphabets, numbers, and hyphens(-). The parameter `permissions` is a list type data describing page access permissions.
    request_example: >-
        {
            "policy_id": "policy-custom-full-acess",
            "name": "Full Access",
            "permissions": ["*"],
            "labels": [],
            "tags": {},
            "domain_id": "domain-123456789012"
        }
    response_example: >-
        {
            "policy_id": "policy-custom-full-acess",
            "name": "Full Access",
            "state": "ENABLED",
            "permissions": [
                "*"
            ],
            "labels": [],
            "tags": {},
            "repository_info": {
                "repository_id": "repo-123456789012",
                "name": "Local",
                "repository_type": "local"
            },
            "domain_id": "domain-123456789012",
            "created_at": "2022-01-01T06:45:04.582Z",
            "updated_at": "2022-01-01T06:45:04.582Z"
        }
     */
    rpc create (CreatePolicyRequest) returns (PolicyInfo) {
        option (google.api.http) = { post: "/repository/v1/policies" };
    }
    /*
    desc: Updates a specific Policy. You can make changes in Policy settings, including `name`, `labels`, `tags`, and `permissions`. The parameter `policy_id` cannot be updated.
    request_example: >-
        {
            "policy_id": "policy-custom-full-acess",
            "name": "Full Access",
            "permissions": ["*"],
            "labels": [],
            "tags": {},
            "domain_id": "domain-123456789012"
        }
    response_example: >-
        {
            "policy_id": "policy-custom-full-acess",
            "name": "Full Access",
            "state": "ENABLED",
            "permissions": [
                "*"
            ],
            "labels": [],
            "tags": {},
            "repository_info": {
                "repository_id": "repo-123456789012",
                "name": "Local",
                "repository_type": "local"
            },
            "domain_id": "domain-123456789012",
            "created_at": "2022-01-01T06:45:04.582Z",
            "updated_at": "2022-01-01T06:45:04.582Z"
        }
     */
    rpc update (UpdatePolicyRequest) returns (PolicyInfo) {
        option (google.api.http) = { put: "/repository/v1/policy" };
    }
    /*
    desc: Deletes a specific Policy. You must specify the `policy_id` of the Policy to delete, as the `policy_id` is an identifier of Policy resources.
    request_example: >-
        {
            "policy_id": "policy-123456789012"
        }
     */
    rpc delete (PolicyRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/repository/v1/policy" };
    }
    /*
    desc: Gets a specific Policy. You must specify the `policy_id` of the Policy to get, as the `policy_id` is an identifier of Policy resources. You can use the parameter `repository_id` to limit the scope of the method to a specific Repository.
    request_example: >-
        {
            "policy_id": "policy-123456789012",
            "repository_id": "repo-123456789012"
        }
    response_example: >-
        {
            "policy_id": "policy-123456789012",
            "name": "Full Access",
            "state": "ENABLED",
            "permissions": [
                "*"
            ],
            "labels": [],
            "tags": {},
            "repository_info": {
                "repository_id": "repo-123456789012",
                "name": "Local",
                "repository_type": "local"
            },
            "domain_id": "domain-123456789012",
            "created_at": "2022-01-01T15:42:50.943Z",
            "updated_at": "2022-01-01T15:42:50.943Z"
        }
     */
    rpc get (GetRepositoryPolicyRequest) returns (PolicyInfo) {
        option (google.api.http) = { get: "/repository/v1/policies" };
    }
    /*
    desc: Gets a list of all Policies in a specific Repository. The parameter `repository_id` is used as an identifier of a Repository to get its list of Policies. You can use a query to get a filtered list of Policies.
    request_example: >-
        {
            "query": {},
            "repository_id": "repo-123456789012"
        }
    response_example: >-
        {
            "results": [
                {
                    "policy_id": "policy-123456789012",
                    "name": "Full Access",
                    "state": "ENABLED",
                    "permissions": [
                        "*"
                    ],
                    "labels": [],
                    "tags": {},
                    "repository_info": {
                        "repository_id": "repo-123456789012",
                        "name": "Local",
                        "repository_type": "local"
                    },
                    "domain_id": "domain-123456789012",
                    "created_at": "2022-01-01T15:42:50.943Z",
                    "updated_at": "2022-01-01T15:42:50.943Z"
                },
                {
                    "policy_id": "policy-987654321098",
                    "name": "Identity Admin",
                    "state": "ENABLED",
                    "permissions": [
                        "identity.*"
                    ],
                    "labels": [],
                    "tags": {},
                    "repository_info": {
                        "repository_id": "repo-123456789012",
                        "name": "Local",
                        "repository_type": "local"
                    },
                    "domain_id": "domain-123456789012",
                    "created_at": "2022-01-01T08:08:14.756Z",
                    "updated_at": "2022-01-01T08:08:14.756Z"
                }
            ],
            "total_count": 2
        }
     */
    rpc list (PolicyQuery) returns (PoliciesInfo) {
        option (google.api.http) = {
            get: "/repository/v1/policies"
            additional_bindings {
                post: "/repository/v1/policies/search"
            }
        };
    }
    rpc stat (PolicyStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/repository/v1/policies/stat" };
    }
}

message CreatePolicyRequest {
    // is_required: true
    string name = 1;
    // is_required: true
    repeated string permissions = 2;
    // is_required: true
    string policy_id = 3;
    // is_required: false
    google.protobuf.ListValue labels = 11;
    // is_required: false
    google.protobuf.Struct tags = 12;
    // is_required: false
    string project_id = 21;
    // is_required: true
    string domain_id = 22;
}

message UpdatePolicyRequest {
    // is_required: true
    string policy_id = 1;
    // is_required: false
    string name = 2;
    // is_required: false
    repeated string permissions = 3;
    // is_required: false
    google.protobuf.ListValue labels = 11;
    // is_required: false
    google.protobuf.Struct tags = 12;
    // is_required: true
    string domain_id = 21;
}

message PolicyRequest {
    // is_required: true
    string policy_id = 1;
    // is_required: true
    string domain_id = 2;
}

message GetRepositoryPolicyRequest {
    // is_required: true
    string policy_id = 1;
    // is_required: true
    string domain_id = 2;
    // is_required: false
    string repository_id = 3;
    // is_required: false
    repeated string only = 4;
}

message PolicyQuery {
    enum State {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }
    // is_required: false
    spaceone.api.core.v1.Query query = 1;
    // is_required: false
    string policy_id = 2;
    // is_required: false
    string name = 3;
    // is_required: false
    string project_id = 4;
    // is_required: true
    string repository_id = 5;
    // is_required: true
    string domain_id = 6;
    // is_required: false
    State state = 7;
}

message PolicyInfo {
    enum State {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }

    string policy_id = 1;
    string name = 2;
    State state = 3;
    // desc: list of permissions
    repeated string permissions = 11;
    // desc: list of labels
    google.protobuf.ListValue labels = 12;
    google.protobuf.Struct tags = 13;

    RepositoryInfo repository_info = 21;
    string project_id = 22;
    string domain_id = 23;

    string created_at = 31;
    string updated_at = 32;
}

message PoliciesInfo {
    // desc: list of PolicyInfo
    repeated PolicyInfo results = 1;
    int32 total_count = 2;
}

message PolicyStatQuery {
    // is_required: true
    spaceone.api.core.v1.StatisticsQuery query = 1;
    // is_required: true
    string repository_id = 2;
    // is_required: true
    string domain_id = 3;
}