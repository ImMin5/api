// A Schedule is a time schedule of when a User will use a query.
syntax = "proto3";

package spaceone.api.statistics.v1;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/statistics/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";
import "spaceone/api/statistics/v1/resource.proto";


service Schedule {
    // Adds a new Schedule. When creating, `topic` and queries to be used should be specified. The time interval of the Schedule should be also specified to run queries repeatedly. The run set by Schedule starts every hour on the hour.
    rpc add (AddScheduleRequest) returns (ScheduleInfo) {
        option (google.api.http) = {
            post: "/statistics/v1/schedule/add"
            body: "*"
        };
    }

    // Updates a specific Schedule. You can make changes in Schedule settings, including time intervals.
    rpc update (UpdateScheduleRequest) returns (ScheduleInfo) {
        option (google.api.http) = {
            post: "/statistics/schedule/update"
            body: "*"
        };
    }

    // Enables a specific Schedule. If a Schedule is enabled, the query usage will be scheduled by the time interval specified.
    rpc enable (ScheduleRequest) returns (ScheduleInfo) {
        option (google.api.http) = {
            post: "/statistics/v1/schedule/enable"
            body: "*"
        };
    }

    // Disables a specific Schedule. If a Schedule is disabled, the query usage will not be scheduled.
    rpc disable (ScheduleRequest) returns (ScheduleInfo) {
        option (google.api.http) = {
            post: "/statistics/v1/schedule/disable"
            body: "*"
        };
    }

    // Deletes a specific Schedule. You must specify the `schedule_id` of the Schedule to delete.
    rpc delete (ScheduleRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/statistics/v1/schedule/delete"
            body: "*"
        };
    }

    // Gets a specific Schedule. Prints detailed information about the Schedule, including the schedule interval and `state`.
    rpc get (ScheduleRequest) returns (ScheduleInfo) {
        option (google.api.http) = {
            post: "/statistics/v1/schedule/get"
            body: "*"
        };
    }

    // Gets a list of all Schedules. You can use a query to get a filtered list of Schedules.
    rpc list (ScheduleQuery) returns (SchedulesInfo) {
        option (google.api.http) = {
            post: "/statistics/v1/schedule/list"
            body: "*"
        };
    }

    rpc stat (ScheduleStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            post: "/statistics/v1/schedule/stat"
            body: "*"
        };
    }
}

message Scheduled {
    string cron = 1;
    int32 interval = 2;
    repeated int32 minutes = 3;
    repeated int32 hours = 4;
}

message QueryOption {
    StatAggregate aggregate = 1;
    // +optional
    StatPage page = 2;
}

message AddScheduleRequest {
    string topic = 1;
    google.protobuf.Struct options = 2;
    Scheduled schedule = 3;
    // +optional
    google.protobuf.Struct tags = 4;
}

message UpdateScheduleRequest {
    string schedule_id = 1;
    // +optional
    Scheduled schedule = 2;
    // +optional
    google.protobuf.Struct tags = 3;
}

message ScheduleRequest {
    string schedule_id = 1;
}

message ScheduleQuery {
    // +optional
    spaceone.api.core.v1.Query query = 1;
    // +optional
    string schedule_id = 2;
    // +optional
    string topic = 3;
    // +optional
    string state = 4;
}

message ScheduleInfo {
    enum State {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }

    string schedule_id = 1;
    string topic = 2;
    State state = 3;
    google.protobuf.Struct options = 4;
    Scheduled schedule = 5;
    google.protobuf.Struct tags = 6;

    string domain_id = 21;

    string created_at = 31;
    string last_scheduled_at = 32;
}

message SchedulesInfo {
    repeated ScheduleInfo results = 1;
    int32 total_count = 2;
}

message ScheduleStatQuery {
    spaceone.api.core.v1.StatisticsQuery query = 1;
}