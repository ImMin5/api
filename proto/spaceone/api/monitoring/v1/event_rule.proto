// An EventRule is a rule to transform the request data when an Event is generated.
syntax = "proto3";

package spaceone.api.monitoring.v1;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/monitoring/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";


service EventRule {
    // Creates a new EventRule. You can filter the Events to apply the EventRule by setting the input parameter `Conditions`. The method can change the Events' assignee or Project.
    rpc create (CreateEventRuleRequest) returns (EventRuleInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/event-rule/create"
            body: "*"
        };
    }
    
    // Changes a priority order between EventRules to apply. EventRules are filtered by the order configured.
    rpc update (UpdateEventRuleRequest) returns (EventRuleInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/event-rule/update"
            body: "*"
        };
    }
    
    // Updates a specific EventRule. You can make changes in EventRule settings.
    rpc change_order (ChangeEventRuleOrderRequest) returns (EventRuleInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/event-rule/change-order"
            body: "*"
        };
    }
    
    // Deletes a specific EventRule. You must assign an EventRule resource to delete by specifying `event_rule_id`.
    rpc delete (EventRuleRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/monitoring/v1/event-rule/delete"
            body: "*"
        };
    }
    
    // Gets a specific EventRule. Prints detailed information about the EventRule.
    rpc get (EventRuleRequest) returns (EventRuleInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/event-rule/get"
            body: "*"
        };
    }
    
    // Gets a list of all EventRules. You can use a query to get a filtered list of EventRules. For example, you can adjust the scope of the list to a certain Project or Domain.
    rpc list (EventRuleQuery) returns (EventRulesInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/event-rule/list"
            body: "*"
        };
    }
    
    rpc stat (EventRuleStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            post: "/monitoring/v1/event-rule/stat"
            body: "*"
        };
    }
}

message EventRuleCondition {
    string key = 1;
    string value = 2;
    string operator = 3;
}

message EventRuleActionResponder {
    string resource_type = 1;
    string resource_id = 2;
}

message MatchRule {
    string source = 1;
    string target = 2;
}

message EventRuleActions {
    string change_assignee = 1;
    string change_urgency = 2;
    string change_project = 3;
    repeated string add_project_dependency = 4;
    repeated EventRuleActionResponder add_responder = 5;
    MatchRule match_service_account = 6;
    google.protobuf.Struct add_additional_info = 7;
    bool no_notification = 8;
}

message EventRuleOptions {
    bool stop_processing = 1;
}

//{
//      "conditions": [{"key": "description", "value": "API", "operator": "contain"}],
//      "conditions_policy": "ALL",
//      "actions": {"change_assignee": "user1@email.com",
//      "change_urgency": "LOW",
//      "change_project": "project-123456789012",
//      "add_additional_info": {"type": "personal rule"},
//      "no_notification": true},
//      "options": {},
//      "project_id": "project-123456789012",
//      "domain_id": "domain-123456789012"
//}
message CreateEventRuleRequest {
    enum ConditionsPolicy {
        NONE = 0;
        ALL = 1;
        ANY = 2;
        ALWAYS = 3;
    }

    enum ResourceGroup {
        RESOURCE_GROUP_NONE = 0;
        WORKSPACE = 1;
        PROJECT = 2;
    }
    
    string name = 1;
    repeated EventRuleCondition conditions = 2;
    ConditionsPolicy conditions_policy = 3;
    EventRuleActions actions = 4;
    // +optional
    EventRuleOptions options = 5;
    // +optional
    google.protobuf.Struct tags = 6;
    ResourceGroup resource_group = 20;
    // +optional
    string project_id = 21;
}

//{
//      "event_rule_id": "er-123456789012",
//      "conditions": [{"key": "description", "value": "ELB", "operator": "contain"}],
//      "conditions_policy": "ALL",
//      "actions": {"change_assignee": "user2@email.com",
//      "change_urgency": "HIGH",
//      "change_project": "project-123456789012",
//      "add_additional_info": {"type": "personal rule"},
//      "no_notification": true},
//      "options": {},
//      "domain_id": "domain-123456789012"
//}
message UpdateEventRuleRequest {
    enum ConditionsPolicy {
        NONE = 0;
        ALL = 1;
        ANY = 2;
        ALWAYS = 3;
    }

    string event_rule_id = 1;
    // +optional
    string name = 2;
    // +optional
    repeated EventRuleCondition conditions = 3;
    // +optional
    ConditionsPolicy conditions_policy = 4;
    // +optional
    EventRuleActions actions = 5;
    // +optional
    EventRuleOptions options = 6;
    // +optional
    google.protobuf.Struct tags = 7;
}

//{
//    "event_rule_id": "er-123456789012", 
//    "order": 2,
//    "domain_id": "domain-123456789012"
//}
message ChangeEventRuleOrderRequest {
    string event_rule_id = 1;
    int32 order = 2;
}

//{
//    "event_rule_id": "er-123456789012",
//    "order": 2,
//    "domain_id": "domain-123456789012"
//}
message EventRuleRequest {
    string event_rule_id = 1;
}

//{
//    "project_id": "project-123456789012",
//    "domain_id": "domain-123456789012"
//}
message EventRuleQuery {
    // +optional
    spaceone.api.core.v1.Query query = 1;
    // +optional
    string event_rule_id = 2;
    // +optional
    string name = 3;
    // +optional
    string workspace_id = 21;
    // +optional
    string project_id = 22;
}

//{
//      "event_rule_id": "er-123456789012",
//      "order": 1,
//      "conditions": [
//      {
//      "key": "description",
//      "value": "API",
//      "operator": "contain"
//      }
//      ],
//      "conditions_policy": "ALL",
//      "actions": {
//      "change_assignee": "user1@email.com",
//      "change_urgency": "LOW",
//      "change_project": "project-123456789012",
//      "add_additional_info": {
//      "type": "personal rule"
//      },
//      "no_notification": true
//      },
//      "options": {},
//      "scope": "PROJECT",
//      "project_id": "project-123456789012",
//      "tags": {},
//      "domain_id": "domain-123456789012",
//      "created_at": "2022-01-02T06:02:31.517Z"
//}
message EventRuleInfo {
    enum ConditionsPolicy {
        NONE = 0;
        ALL = 1;
        ANY = 2;
        ALWAYS = 3;
    }

    enum ResourceGroup {
        RESOURCE_GROUP_NONE = 0;
        WORKSPACE = 1;
        PROJECT = 2;
    }

    string event_rule_id = 1;
    string name = 2;
    int32 order = 3;
    repeated EventRuleCondition conditions = 4;
    ConditionsPolicy conditions_policy = 5;
    EventRuleActions actions = 6;
    EventRuleOptions options = 7;
    google.protobuf.Struct tags = 8;

    ResourceGroup resource_group = 20;
    string domain_id = 21;
    string workspace_id = 22;
    string project_id = 23;

    string created_at = 31;
}

//{
//      "results": [
//      {
//      "event_rule_id": "er-123456789012",
//      "order": 1,
//      "conditions": [
//      {
//      "key": "title",
//      "value": "AWS",
//      "operator": "contain"
//      }
//      ],
//      "conditions_policy": "ALL",
//      "actions": {
//      "change_assignee": "user2@email.com",
//      "change_urgency": "HIGH",
//      "add_additional_info": {},
//      "no_notification": true
//      },
//      "options": {},
//      "scope": "PROJECT",
//      "project_id": "project-123456789012",
//      "tags": {},
//      "domain_id": "domain-123456789012",
//      "created_at": "2022-01-01T06:33:58.388Z"
//      },
//      {
//      "event_rule_id": "er-123456789012",
//      "order": 2,
//      "conditions": [
//      {
//      "key": "title",
//      "value": "ELB",
//      "operator": "contain"
//      }
//      ],
//      "conditions_policy": "ALL",
//      "actions": {
//      "change_assignee": "user1@email.com",
//      "change_urgency": "LOW",
//      "change_project": "project-123456789012",
//      "add_additional_info": {},
//      "no_notification": true
//      },
//      "options": {},
//      "scope": "PROJECT",
//      "project_id": "project-123456789012",
//      "tags": {},
//      "domain_id": "domain-123456789012",
//      "created_at": "2022-01-01T06:12:30.226Z"
//      }
//      ],
//      "total_count": 2
//}
message EventRulesInfo {
    repeated EventRuleInfo results = 1;
    int32 total_count = 2;
}

message EventRuleStatQuery {
    spaceone.api.core.v1.StatisticsQuery query = 1;
}
