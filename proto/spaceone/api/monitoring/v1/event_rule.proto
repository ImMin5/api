/*
desc: An EventRule is a rule to transform the request data when an Event is generated.
 */
syntax = "proto3";

package spaceone.api.monitoring.v1;

option go_package = "dist/go";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";


service EventRule {
    /*
    desc: Creates a new EventRule. You can filter the Events to apply the EventRule by setting the input parameter `Conditions`. The method can change the Events' assignee or Project.
    request_example: >-
        {
          "conditions": [{"key": "description", "value": "API", "operator": "contain"}],
          "conditions_policy": "ALL",
          "actions": {"change_assignee": "user1@email.com",
          "change_urgency": "LOW",
          "change_project": "project-123456789012",
          "add_additional_info": {"type": "personal rule"},
          "no_notification": true},
          "options": {},
          "project_id": "project-123456789012",
          "domain_id": "domain-123456789012"
         }
    response_example: >-
        {
          "event_rule_id": "er-123456789012",
          "order": 1,
          "conditions": [
          {
          "key": "description",
          "value": "API",
          "operator": "contain"
          }
          ],
          "conditions_policy": "ALL",
          "actions": {
          "change_assignee": "user1@email.com",
          "change_urgency": "LOW",
          "change_project": "project-123456789012",
          "add_additional_info": {
          "type": "personal rule"
          },
          "no_notification": true
          },
          "options": {},
          "scope": "PROJECT",
          "project_id": "project-123456789012",
          "tags": {},
          "domain_id": "domain-123456789012",
          "created_at": "2022-01-02T06:02:31.517Z"
         }
     */
    rpc create (CreateEventRuleRequest) returns (EventRuleInfo) {
        option (google.api.http) = { post: "/monitoring/v1/event-rules" };
    }
    /*
    desc: Changes a priority order between EventRules to apply. EventRules are filtered by the order configured.
    request_example: >-
        {
          "event_rule_id": "er-123456789012",
          "conditions": [{"key": "description", "value": "ELB", "operator": "contain"}],
          "conditions_policy": "ALL",
          "actions": {"change_assignee": "user2@email.com",
          "change_urgency": "HIGH",
          "change_project": "project-123456789012",
          "add_additional_info": {"type": "personal rule"},
          "no_notification": true},
          "options": {},
          "domain_id": "domain-123456789012"
         }
    response_example: >-
        {
          "event_rule_id": "er-123456789012",
          "order": 2,
          "conditions": [
          {
          "key": "description",
          "value": "ELB",
          "operator": "contain"
          }
          ],
          "conditions_policy": "ALL",
          "actions": {
          "change_assignee": "user2@email.com",
          "change_urgency": "HIGH",
          "change_project": "project-123456789012",
          "add_additional_info": {
          "type": "personal rule"
          },
          "no_notification": true
          },
          "options": {},
          "scope": "PROJECT",
          "project_id": "project-123456789012",
          "tags": {},
          "domain_id": "domain-123456789012",
          "created_at": "2022-01-01T06:02:31.517Z"
         }
     */
    rpc update (UpdateEventRuleRequest) returns (EventRuleInfo) {
        option (google.api.http) = { put: "/monitoring/v1/event-rule/{event_rule_id}" };
    }
    /*
    desc: Updates a specific EventRule. You can make changes in EventRule settings.
    request_example: >-
        {
          "event_rule_id": "er-123456789012",
          "order": 2,
          "domain_id": "domain-123456789012"
         }
    response_example: >-
        {
          "event_rule_id": "er-123456789012",
          "order": 2,
          "conditions": [
          {
          "key": "description",
          "value": "API",
          "operator": "contain"
          }
          ],
          "conditions_policy": "ALL",
          "actions": {
          "change_assignee": "user1@email.com",
          "change_urgency": "LOW",
          "change_project": "project-123456789012",
          "add_additional_info": {
          "type": "personal rule"
          },
          "no_notification": true
          },
          "options": {},
          "scope": "PROJECT",
          "project_id": "project-123456789012",
          "tags": {},
          "domain_id": "domain-123456789012",
          "created_at": "2022-01-02T06:02:31.517Z"
         }
     */
    rpc change_order (ChangeEventRuleOrderRequest) returns (EventRuleInfo) {
        option (google.api.http) = { put: "/monitoring/v1/event-rule/{event_rule_id}/order" };
    }
    /*
    desc: Deletes a specific EventRule. You must assign an EventRule resource to delete by specifying `event_rule_id`.
    request_example: >-
        {
          "event_rule_id": "er-123456789012",
          "domain_id": "domain-123456789012"
         }
     */
    rpc delete (EventRuleRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/monitoring/v1/event-rule/{event_rule_id}" };
    }
    /*
    desc: Gets a specific EventRule. Prints detailed information about the EventRule.
    request_example: >-
        {
          "event_rule_id": "er-123456789012",
          "domain_id": "domain-123456789012"
         }
    response_example: >-
        {
          "event_rule_id": "er-123456789012",
          "order": 2,
          "conditions": [
          {
          "key": "title",
          "value": "ELB",
          "operator": "contain"
          }
          ],
          "conditions_policy": "ALL",
          "actions": {
          "change_assignee": "user1@email.com",
          "change_urgency": "LOW",
          "change_project": "project-123456789012",
          "add_additional_info": {},
          "no_notification": true
          },
          "options": {},
          "scope": "PROJECT",
          "project_id": "project-123456789012",
          "tags": {},
          "domain_id": "domain-123456789012",
          "created_at": "2022-01-01T06:12:30.226Z"
         }
     */
    rpc get (GetEventRuleRequest) returns (EventRuleInfo) {
        option (google.api.http) = { get: "/monitoring/v1/event-rule/{event_rule_id}" };
    }
    /*
    desc: Gets a list of all EventRules. You can use a query to get a filtered list of EventRules. For example, you can adjust the scope of the list to a certain Project or Domain.
    request_example: >-
        {
          "project_id": "project-123456789012",
          "domain_id": "domain-123456789012"
         }
    response_example: >-
        {
          "results": [
          {
          "event_rule_id": "er-123456789012",
          "order": 1,
          "conditions": [
          {
          "key": "title",
          "value": "AWS",
          "operator": "contain"
          }
          ],
          "conditions_policy": "ALL",
          "actions": {
          "change_assignee": "user2@email.com",
          "change_urgency": "HIGH",
          "add_additional_info": {},
          "no_notification": true
          },
          "options": {},
          "scope": "PROJECT",
          "project_id": "project-123456789012",
          "tags": {},
          "domain_id": "domain-123456789012",
          "created_at": "2022-01-01T06:33:58.388Z"
          },
          {
          "event_rule_id": "er-123456789012",
          "order": 2,
          "conditions": [
          {
          "key": "title",
          "value": "ELB",
          "operator": "contain"
          }
          ],
          "conditions_policy": "ALL",
          "actions": {
          "change_assignee": "user1@email.com",
          "change_urgency": "LOW",
          "change_project": "project-123456789012",
          "add_additional_info": {},
          "no_notification": true
          },
          "options": {},
          "scope": "PROJECT",
          "project_id": "project-123456789012",
          "tags": {},
          "domain_id": "domain-123456789012",
          "created_at": "2022-01-01T06:12:30.226Z"
          }
          ],
          "total_count": 2
         }
     */
    rpc list (EventRuleQuery) returns (EventRulesInfo) {
        option (google.api.http) = {
            get: "/monitoring/v1/event-rules"
            additional_bindings {
                post: "/monitoring/v1/event-rules/search"
            }
        };
    }
    rpc stat (EventRuleStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/monitoring/v1/event-rules/stat" };
    }
}

message EventRuleCondition {
    string key = 1;
    string value = 2;
    string operator = 3;
}

message EventRuleActionResponder {
    string resource_type = 1;
    string resource_id = 2;
}

message MatchRule {
    string source = 1;
    string target = 2;
}

message EventRuleActions {
    string change_assignee = 1;
    string change_urgency = 2;
    string change_project = 3;
    repeated string add_project_dependency = 4;
    repeated EventRuleActionResponder add_responder = 5;
    MatchRule match_service_account = 6;
    google.protobuf.Struct add_additional_info = 7;
    bool no_notification = 8;
}

message EventRuleOptions {
    bool stop_processing = 1;
}

message CreateEventRuleRequest {
    enum ConditionsPolicy {
        NONE = 0;
        ALL = 1;
        ANY = 2;
        ALWAYS = 3;
    }

    // is_required: true
    string name = 1;
    // is_required: true
    repeated EventRuleCondition conditions = 2;
    // is_required: true
    ConditionsPolicy conditions_policy = 3;
    // is_required: true
    EventRuleActions actions = 4;
    // is_required: false
    EventRuleOptions options = 5;
    // is_required: false
    string project_id = 6;
    // is_required: false
    google.protobuf.Struct tags = 7;
    // is_required: true
    string domain_id = 11;
}

message UpdateEventRuleRequest {
    enum ConditionsPolicy {
        NONE = 0;
        ALL = 1;
        ANY = 2;
        ALWAYS = 3;
    }

    // is_required: true
    string event_rule_id = 1;
    // is_required: false
    string name = 2;
    // is_required: false
    repeated EventRuleCondition conditions = 3;
    // is_required: false
    ConditionsPolicy conditions_policy = 4;
    // is_required: false
    EventRuleActions actions = 5;
    // is_required: false
    EventRuleOptions options = 6;
    // is_required: false
    google.protobuf.Struct tags = 7;
    // is_required: true
    string domain_id = 11;
}

message ChangeEventRuleOrderRequest {
    // is_required: true
    string event_rule_id = 1;
    // is_required: true
    int32 order = 2;
    // is_required: true
    string domain_id = 11;
}

message EventRuleRequest {
    // is_required: true
    string event_rule_id = 1;
    // is_required: true
    string domain_id = 2;
}

message GetEventRuleRequest {
    // is_required: true
    string event_rule_id = 1;
    // is_required: true
    string domain_id = 2;
    // is_required: false
    repeated string only = 3;
}

message EventRuleQuery {
    enum EventRuleScope {
        SCOPE_NONE = 0;
        GLOBAL = 1;
        PROJECT = 2;
    }

    // is_required: false
    spaceone.api.core.v1.Query query = 1;
    // is_required: false
    string event_rule_id = 2;
    // is_required: false
    string name = 3;
    // is_required: false
    EventRuleScope scope = 4;
    // is_required: false
    string project_id = 5;
    // is_required: true
    string domain_id = 11;
}

message EventRuleInfo {
    enum EventRuleScope {
        SCOPE_NONE = 0;
        GLOBAL = 1;
        PROJECT = 2;
    }

    enum ConditionsPolicy {
        NONE = 0;
        ALL = 1;
        ANY = 2;
        ALWAYS = 3;
    }

    string event_rule_id = 1;
    string name = 2;
    int32 order = 3;
    repeated EventRuleCondition conditions = 4;
    ConditionsPolicy conditions_policy = 5;
    EventRuleActions actions = 6;
    EventRuleOptions options = 7;
    EventRuleScope scope = 8;
    string project_id = 9;
    google.protobuf.Struct tags = 10;
    string domain_id = 11;
    string created_at = 21;
}

message EventRulesInfo {
    repeated EventRuleInfo results = 1;
    int32 total_count = 2;
}

message EventRuleStatQuery {
    // is_required: true
    spaceone.api.core.v1.StatisticsQuery query = 1;
    // is_required: true
    string domain_id = 2;
}
