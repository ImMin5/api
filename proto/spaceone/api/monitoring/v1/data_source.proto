// A DataSource is a plugin instance collecting `metric` and `log` data from Cloudforet. 
syntax = "proto3";

package spaceone.api.monitoring.v1;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/monitoring/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v2/query.proto";


service DataSource {
    // Registers a DataSource with information of the plugin to use. Information of the plugin includes `version`, `provider`, `upgrade_mode`.
    rpc register (RegisterDataSourceRequest) returns (DataSourceInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/data-source/register"
            body: "*"
        };
    }
    
    // Updates a specific DataSource. You can make changes in DataSource settings, including `name` and `tags`.
    rpc update (UpdateDataSourceRequest) returns (DataSourceInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/data-source/update"
            body: "*"
        };
    }
    
    // Enables a specific DataSource. By enabling a DataSource, you can communicate with an external cloud service via the plugin.
    rpc enable (DataSourceRequest) returns (DataSourceInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/data-source/enable"
            body: "*"
        };
    }
    
    // Disables a specific DataSource. By disabling a DataSource, you can block communication with an external cloud service via the plugin.
    rpc disable (DataSourceRequest) returns (DataSourceInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/data-source/disable"
            body: "*"
        };
    }
    
    // Deregisters and deletes a specific DataSource. You must specify the `data_source_id` of the DataSource to deregister.
    rpc deregister (DataSourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/monitoring/v1/data-source/deregister"
            body: "*"
        };
    }
    
    // Updates the plugin of a specific DataSource. This method resets the plugin data in the DataSource to update the `metadata`.
    rpc update_plugin (UpdateDataSourcePluginRequest) returns (DataSourceInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/data-source/update-plugin"
            body: "*"
        };
    }
    
    // Verifies the plugin of a specific DataSource. This method validates the plugin data, `version` and `endpoint`.
    rpc verify_plugin (DataSourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/monitoring/v1/data-source/verify-plugin"
            body: "*"
        };
    }
    
    // Gets a specific DataSource. Prints detailed information about the DataSource, including `name`, `state`, and `plugin_info`.
    rpc get (DataSourceRequest) returns (DataSourceInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/data-source/get"
            body: "*"
        };
    }
    
    // Gets a list of all DataSources. You can use a query to get a filtered list of DataSources.
    rpc list (DataSourceQuery) returns (DataSourcesInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/data-source/list"
            body: "*"
        };
    }

    rpc stat (DataSourceStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            post: "/monitoring/v1/data-source/stat"
            body: "*"
        };
    }
}

message DataSourcePluginInfo{
    enum UpgradeMode {
        NONE = 0;
        MANUAL = 1;
        AUTO = 2;
    }

    string plugin_id = 1;
    string version = 2;
    google.protobuf.Struct options = 3;
    google.protobuf.Struct metadata = 6;
    UpgradeMode upgrade_mode = 7;

    oneof plugin_secret {
        string secret_id = 4;
        string provider = 5;
    }
}

enum MonitoringType {
    NONE = 0;
    METRIC = 1;
    LOG = 2;
}

//{
//        "name": "datasource-test",
//        "plugin_info": {"plugin_id": "plugin-123456789012",
//                        "version": "1.1.4.20220617.135934",
//                        "options": {},
//                        "provider": "aws",
//                        "metadata": {
//                            "supported_resource_type": ["inventory.Server", "inventory.CloudService"],
//                            "required_keys": ["data.cloudwatch"],
//                            "supported_stat": ["AVERAGE", "MAX", "MIN", "SUM"]},
//                        "upgrade_mode": "AUTO"
//                        },
//        "tags": {"a": "b"},
//        "domain_id": "domain-123456789012"
//}
message RegisterDataSourceRequest {
    string name = 1;
    DataSourcePluginInfo plugin_info = 2;
    // +optional
    google.protobuf.Struct tags = 3;
}

//{
//        "data_source_id": "ds-123456789012",
//        "name": "tmp-datasource_test",
//        "tags": {"b": "c"},
//        "domain_id": "domain-123456789012"
//}
message UpdateDataSourceRequest {
    string data_source_id = 1;
    // +optional
    string name = 2;
    // +optional
    google.protobuf.Struct tags = 4;
}

//{
//    "data_source_id": "ds-6167ed6b42f4",
//    "version": "1.1.3",
//    "options": {},
//    "upgrade_mode": "MANUAL",
//    "domain_id": "domain-123456789012"
//}
message UpdateDataSourcePluginRequest {
    enum UpgradeMode {
        NONE = 0;
        MANUAL = 1;
        AUTO = 2;
    }

    string data_source_id = 1;
    // +optional
    string version = 2;
    // +optional
    google.protobuf.Struct options = 3;
    // +optional
    UpgradeMode upgrade_mode = 4;
}

//{
//    "data_source_id": "ds-6167ed6b42f4",
//    "domain_id": "domain-123456789012"
//}
message DataSourceRequest {
    string data_source_id = 1;
}

//{
//    "query": {},
//    "domain_id": "domain-123456789012"
//}
message DataSourceQuery {
    // +optional
    spaceone.api.core.v2.Query query = 1;
    // +optional
    string data_source_id = 2;
    // +optional
    string name = 3;
    // +optional
    string state = 4;
    // +optional
    MonitoringType monitoring_type = 5;
    // +optional
    string provider = 6;
}

//{
//    "data_source_id": "ds-123456789012",
//    "name": "datasource-test",
//    "state": "ENABLED",
//    "monitoring_type": "METRIC",
//    "provider": "aws",
//    "capability": {
//        "supported_schema": [
//            "aws_access_key",
//            "aws_assume_role"
//        ],
//        "use_resource_secret": true,
//        "monitoring_type": "METRIC"
//    },
//    "plugin_info": {
//        "plugin_id": "plugin-123456789012",
//        "version": "1.1.4.20220617.135934",
//        "options": {},
//        "provider": "aws",
//        "metadata": {
//            "supported_stat": [
//                "AVERAGE",
//                "MAX",
//                "MIN",
//                "SUM"
//            ],
//            "supported_resource_type": [
//                "inventory.Server",
//                "inventory.CloudService"
//            ],
//            "required_keys": [
//                "data.cloudwatch"
//            ]
//        },
//        "upgrade_mode": "AUTO"
//    },
//    "tags": {
//        "a": "b"
//    },
//    "domain_id": "domain-123456789012",
//    "created_at": "2022-06-21T01:17:12.144Z"
//}
message DataSourceInfo {
    enum State {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }

    string data_source_id = 1;
    string name = 2;
    State state = 3;
    MonitoringType monitoring_type = 4;
    string provider = 5;
    google.protobuf.Struct capability = 6;
    DataSourcePluginInfo plugin_info = 7;
    google.protobuf.Struct tags = 8;

    string domain_id = 21;

    string created_at = 31;
}

//{
//    "results": [
//        {
//            "data_source_id": "ds-89f1e81528e9",
//            "name": "AWS CloudTrail",
//            "state": "ENABLED",
//            "monitoring_type": "LOG",
//            "provider": "aws",
//            "capability": {
//                "use_resource_secret": true,
//                "monitoring_type": "LOG",
//                "supported_schema": [
//                    "aws_access_key",
//                    "aws_assume_role"
//                ]
//            },
//            "plugin_info": {
//                "plugin_id": "plugin-9881b9b440a4",
//                "version": "1.0-dev2",
//                "options": {},
//                "provider": "aws",
//                "metadata": {
//                    "required_keys": [
//                        "reference.resource_id"
//                    ],
//                    "supported_resource_type": [
//                        "inventory.Server",
//                        "inventory.CloudService"
//                    ]
//                },
//                "upgrade_mode": "AUTO"
//            },
//            "tags": {},
//            "domain_id": "domain-123456789012",
//            "created_at": "2021-03-31T08:39:45.532Z"
//        }
//    ],
//    "total_count": 2
//}
message DataSourcesInfo {
    repeated DataSourceInfo results = 1;
    int32 total_count = 2;
}

message DataSourceStatQuery {
    spaceone.api.core.v2.StatisticsQuery query = 1;
}