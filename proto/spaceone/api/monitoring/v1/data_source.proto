/*
desc: A DataSource is a plugin instance collecting `metric` and `log` data from Cloudforet.
 */
syntax = "proto3";

package spaceone.api.monitoring.v1;

option go_package = "dist/go";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";


service DataSource {
    /*
    desc: Registers a DataSource with information of the plugin to use. Information of the plugin includes `version`, `provider`, `upgrade_mode`.
    request_example: >-
        {
            "name": "datasource-test",
            "plugin_info": {"plugin_id": "plugin-123456789012",
                            "version": "1.1.4.20220617.135934",
                            "options": {},
                            "provider": "aws",
                            "metadata": {
                                "supported_resource_type": ["inventory.Server", "inventory.CloudService"],
                                "required_keys": ["data.cloudwatch"],
                                "supported_stat": ["AVERAGE", "MAX", "MIN", "SUM"]},
                            "upgrade_mode": "AUTO"
                            },
            "tags": {"a": "b"},
            "domain_id": "domain-123456789012"
        }
    response_example: >-
        {
            "data_source_id": "ds-123456789012",
            "name": "datasource-test",
            "state": "ENABLED",
            "monitoring_type": "METRIC",
            "provider": "aws",
            "capability": {
                "supported_schema": [
                    "aws_access_key",
                    "aws_assume_role"
                ],
                "use_resource_secret": true,
                "monitoring_type": "METRIC"
            },
            "plugin_info": {
                "plugin_id": "plugin-123456789012",
                "version": "1.1.4.20220617.135934",
                "options": {},
                "provider": "aws",
                "metadata": {
                    "supported_stat": [
                        "AVERAGE",
                        "MAX",
                        "MIN",
                        "SUM"
                    ],
                    "supported_resource_type": [
                        "inventory.Server",
                        "inventory.CloudService"
                    ],
                    "required_keys": [
                        "data.cloudwatch"
                    ]
                },
                "upgrade_mode": "AUTO"
            },
            "tags": {
                "a": "b"
            },
            "domain_id": "domain-123456789012",
            "created_at": "2022-06-21T01:17:12.144Z"
        }
    */
    rpc register (RegisterDataSourceRequest) returns (DataSourceInfo) {
        option (google.api.http) = { post: "/monitoring/v1/data-sources" };
    }
    /*
    desc: Updates a specific DataSource. You can make changes in DataSource settings, including `name` and `tags`.
    request_example: >-
        {
            "data_source_id": "ds-123456789012",
            "name": "tmp-datasource_test",
            "tags": {"b": "c"},
            "domain_id": "domain-123456789012"
        }
    response_example: >-
        {
            "data_source_id": "ds-123456789012",
            "name": "tmp-datasource_test",
            "state": "ENABLED",
            "monitoring_type": "METRIC",
            "provider": "aws",
            "capability": {
                "use_resource_secret": true,
                "monitoring_type": "METRIC",
                "supported_schema": [
                    "aws_access_key",
                    "aws_assume_role"
                ]
            },
            "plugin_info": {
                "plugin_id": "plugin-123456789012",
                "version": "1.1.4.20220617.135934",
                "options": {},
                "provider": "aws",
                "metadata": {
                    "required_keys": [
                        "data.cloudwatch"
                    ],
                    "supported_resource_type": [
                        "inventory.Server",
                        "inventory.CloudService"
                    ],
                    "supported_stat": [
                        "AVERAGE",
                        "MAX",
                        "MIN",
                        "SUM"
                    ]
                },
                "upgrade_mode": "AUTO"
            },
            "tags": {
                "b": "c"
            },
            "domain_id": "domain-123456789012",
            "created_at": "2022-06-21T01:17:12.144Z"
        }
    */
    rpc update (UpdateDataSourceRequest) returns (DataSourceInfo) {
        option (google.api.http) = { put: "/monitoring/v1/data-source/{data_source_id}" };
    }
    /*
    desc: Enables a specific DataSource. By enabling a DataSource, you can communicate with an external cloud service via the plugin.
    request_example: >-
        {
            "data_source_id": "ds-6167ed6b42f4",
            "domain_id": "domain-123456789012"
        }
    response_example: >-
        {
            "data_source_id": "ds-6167ed6b42f4",
            "name": "tmp-datasource_test",
            "state": "ENABLED",
            "monitoring_type": "METRIC",
            "provider": "aws",
            "capability": {
                "supported_schema": [
                    "aws_access_key",
                    "aws_assume_role"
                ],
                "monitoring_type": "METRIC",
                "use_resource_secret": true
            },
            "plugin_info": {
                "plugin_id": "plugin-5cdf8d72a7cc",
                "version": "1.1.4.20220617.135934",
                "options": {},
                "provider": "aws",
                "metadata": {
                    "supported_stat": [
                        "AVERAGE",
                        "MAX",
                        "MIN",
                        "SUM"
                    ],
                    "required_keys": [
                        "data.cloudwatch"
                    ],
                    "supported_resource_type": [
                        "inventory.Server",
                        "inventory.CloudService"
                    ]
                },
                "upgrade_mode": "AUTO"
            },
            "tags": {
                "b": "c"
            },
            "domain_id": "domain-123456789012",
            "created_at": "2022-06-21T01:17:12.144Z"
        }
    */
    rpc enable (DataSourceRequest) returns (DataSourceInfo) {
        option (google.api.http) = { put: "/monitoring/v1/data-source/{data_source_id}/enable" };
    }
    /*
    desc: Disables a specific DataSource. By disabling a DataSource, you can block communication with an external cloud service via the plugin.
    request_example: >-
      {
          "data_source_id": "ds-6167ed6b42f4",
          "domain_id": "domain-123456789012"
      }
    response_example: >-
      {
          "data_source_id": "ds-6167ed6b42f4",
          "name": "tmp-datasource_test",
          "state": "DISABLED",
          "monitoring_type": "METRIC",
          "provider": "aws",
          "capability": {
              "supported_schema": [
                  "aws_access_key",
                  "aws_assume_role"
              ],
              "monitoring_type": "METRIC",
              "use_resource_secret": true
          },
          "plugin_info": {
              "plugin_id": "plugin-5cdf8d72a7cc",
              "version": "1.1.4.20220617.135934",
              "options": {},
              "provider": "aws",
              "metadata": {
                  "supported_stat": [
                      "AVERAGE",
                      "MAX",
                      "MIN",
                      "SUM"
                  ],
                  "required_keys": [
                      "data.cloudwatch"
                  ],
                  "supported_resource_type": [
                      "inventory.Server",
                      "inventory.CloudService"
                  ]
              },
              "upgrade_mode": "AUTO"
          },
          "tags": {
              "b": "c"
          },
          "domain_id": "domain-123456789012",
          "created_at": "2022-06-21T01:17:12.144Z"
      }
    */
    rpc disable (DataSourceRequest) returns (DataSourceInfo) {
        option (google.api.http) = { put: "/monitoring/v1/data-source/{data_source_id}/disable" };
    }
    /*
    desc: Deregisters and deletes a specific DataSource. You must specify the `data_source_id` of the DataSource to deregister.
    request_example: >-
      {
          "data_source_id": "ds-6167ed6b42f4",
          "domain_id": "domain-123456789012"
      }
    */
    rpc deregister (DataSourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/monitoring/v1/data-source/{data_source_id}" };
    }
    /*
    desc: Updates the plugin of a specific DataSource. This method resets the plugin data in the DataSource to update the `metadata`.
    request_example: >-
        {
            "data_source_id": "ds-6167ed6b42f4",
            "version": "1.1.3",
            "options": {},
            "upgrade_mode": "MANUAL",
            "domain_id": "domain-123456789012"
        }
    response_example: >-
        {
            "data_source_id": "ds-6167ed6b42f4",
            "name": "tmp-datasource_test",
            "state": "ENABLED",
            "monitoring_type": "METRIC",
            "provider": "aws",
            "capability": {
                "use_resource_secret": true,
                "supported_schema": [
                    "aws_access_key",
                    "aws_assume_role"
                ],
                "monitoring_type": "METRIC"
            },
            "plugin_info": {
                "plugin_id": "plugin-5cdf8d72a7cc",
                "version": "1.1.3",
                "options": {},
                "provider": "aws",
                "metadata": {
                    "required_keys": [
                        "data.cloudwatch"
                    ],
                    "supported_resource_type": [
                        "inventory.Server",
                        "inventory.CloudService"
                    ],
                    "supported_stat": [
                        "AVERAGE",
                        "MAX",
                        "MIN",
                        "SUM"
                    ]
                },
                "upgrade_mode": "MANUAL"
            },
            "tags": {
                "b": "c"
            },
            "domain_id": "domain-123456789012",
            "created_at": "2022-06-21T01:17:12.144Z"
        }
    */
    rpc update_plugin (UpdateDataSourcePluginRequest) returns (DataSourceInfo) {
        option (google.api.http) = { put: "/monitoring/v1/data-source/{data_source_id}/plugin" };
    }
    /*
    desc: Verifies the plugin of a specific DataSource. This method validates the plugin data, `version` and `endpoint`.
    request_example: >-
        {
            "data_source_id": "ds-6167ed6b42f4",
            "domain_id": "domain-123456789012"
        }
    */
    rpc verify_plugin (DataSourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { put: "/monitoring/v1/data-source/{data_source_id}/plugin/verify" };
    }
    /*
    desc: Gets a specific DataSource. Prints detailed information about the DataSource, including `name`, `state`, and `plugin_info`.
    request_example: >-
        {
            "data_source_id": "ds-123456789012",
            "domain_id": "domain-123456789012"
        }
    response_example: >-
        {
            "data_source_id": "ds-89f1e81528e9",
            "name": "AWS CloudTrail",
            "state": "ENABLED",
            "monitoring_type": "LOG",
            "provider": "aws",
            "capability": {
                "use_resource_secret": true,
                "supported_schema": [
                    "aws_access_key",
                    "aws_assume_role"
                ],
                "monitoring_type": "LOG"
            },
            "plugin_info": {
                "plugin_id": "plugin-9881b9b440a4",
                "version": "1.0-dev2",
                "options": {},
                "provider": "aws",
                "metadata": {
                    "supported_resource_type": [
                        "inventory.Server",
                        "inventory.CloudService"
                    ],
                    "required_keys": [
                        "reference.resource_id"
                    ]
                },
                "upgrade_mode": "AUTO"
            },
            "tags": {},
            "domain_id": "domain-123456789012",
            "created_at": "2021-03-31T08:39:45.532Z"
        }
    */
    rpc get (GetDataSourceRequest) returns (DataSourceInfo) {
        option (google.api.http) = { get: "/monitoring/v1/data-source/{data_source_id}" };
    }
    /*
    desc: Gets a list of all DataSources. You can use a query to get a filtered list of DataSources.
    request_example: >-
        {
            "query": {},
            "domain_id": "domain-123456789012"
        }
    response_example: >-
        {
            "results": [
                {
                    "data_source_id": "ds-89f1e81528e9",
                    "name": "AWS CloudTrail",
                    "state": "ENABLED",
                    "monitoring_type": "LOG",
                    "provider": "aws",
                    "capability": {
                        "use_resource_secret": true,
                        "monitoring_type": "LOG",
                        "supported_schema": [
                            "aws_access_key",
                            "aws_assume_role"
                        ]
                    },
                    "plugin_info": {
                        "plugin_id": "plugin-9881b9b440a4",
                        "version": "1.0-dev2",
                        "options": {},
                        "provider": "aws",
                        "metadata": {
                            "required_keys": [
                                "reference.resource_id"
                            ],
                            "supported_resource_type": [
                                "inventory.Server",
                                "inventory.CloudService"
                            ]
                        },
                        "upgrade_mode": "AUTO"
                    },
                    "tags": {},
                    "domain_id": "domain-123456789012",
                    "created_at": "2021-03-31T08:39:45.532Z"
                }
            ],
            "total_count": 2
        }
    */
    rpc list (DataSourceQuery) returns (DataSourcesInfo) {
        option (google.api.http) = {
            get: "/monitoring/v1/data-sources"
            additional_bindings {
                post: "/monitoring/v1/data-sources/search"
            }
        };
    }
    rpc stat (DataSourceStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/monitoring/v1/data-sources/stat" };
    }
}

message DataSourcePluginInfo{
    enum UpgradeMode {
        NONE = 0;
        MANUAL = 1;
        AUTO = 2;
    }

    string plugin_id = 1;
    string version = 2;
    google.protobuf.Struct options = 3;
    google.protobuf.Struct metadata = 6;
    UpgradeMode upgrade_mode = 7;

    oneof plugin_secret {
        string secret_id = 4;
        string provider = 5;
    }
}

enum MonitoringType {
    NONE = 0;
    METRIC = 1;
    LOG = 2;
}

message RegisterDataSourceRequest {
    // is_required: true
    string name = 1;
    // is_required: true
    DataSourcePluginInfo plugin_info = 3;
    // is_required: false
    google.protobuf.Struct tags = 4;
    // is_required: true
    string domain_id = 8;
}

message UpdateDataSourceRequest {
    // is_required: true
    string data_source_id = 1;
    // is_required: false
    string name = 2;
    // is_required: false
    google.protobuf.Struct tags = 4;
    // is_required: true
    string domain_id = 5;
}

message UpdateDataSourcePluginRequest {
    enum UpgradeMode {
        NONE = 0;
        MANUAL = 1;
        AUTO = 2;
    }

    // is_required: true
    string data_source_id = 1;
    // is_required: false
    string version = 2;
    // is_required: false
    google.protobuf.Struct options = 3;
    // is_required: false
    UpgradeMode upgrade_mode = 4;
    // is_required: true
    string domain_id = 11;
}

message DataSourceRequest {
    // is_required: true
    string data_source_id = 1;
    // is_required: true
    string domain_id = 2;
}

message GetDataSourceRequest {
    // is_required: true
    string data_source_id = 1;
    // is_required: true
    string domain_id = 2;
    // is_required: false
    repeated string only = 3;
}

message DataSourceQuery {
    // is_required: false
    spaceone.api.core.v1.Query query = 1;
    // is_required: false
    string data_source_id = 2;
    // is_required: false
    string name = 3;
    // is_required: false
    string state = 4;
    // is_required: false
    MonitoringType monitoring_type = 5;
    // is_required: false
    string provider = 6;
    // is_required: true
    string domain_id = 7;
}

message DataSourceInfo {
    enum State {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }

    string data_source_id = 1;
    string name = 2;
    State state = 3;
    MonitoringType monitoring_type = 4;
    string provider = 5;
    google.protobuf.Struct capability = 6;
    DataSourcePluginInfo plugin_info = 7;
    google.protobuf.Struct tags = 8;
    string domain_id = 9;
    string created_at = 10;
}

message DataSourcesInfo {
    repeated DataSourceInfo results = 1;
    int32 total_count = 2;
}

message DataSourceStatQuery {
    // is_required: true
    spaceone.api.core.v1.StatisticsQuery query = 1;
    // is_required: true
    string domain_id = 2;
}