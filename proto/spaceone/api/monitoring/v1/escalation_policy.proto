// An EscalationPolicy is a set of rules to deliver an alert to assigned members.
syntax = "proto3";

package spaceone.api.monitoring.v1;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/monitoring/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v2/query.proto";


service EscalationPolicy {
    // Creates a new EscalationPolicy. When creating an EscalationPolicy, if the project_id is assigned, the EscalationPolicy is applied to the Project with the same project_id. If an EscalationPolicy is set as a global policy, all Projects in the same domain can apply the policy.
    rpc create (CreateEscalationPolicyRequest) returns (EscalationPolicyInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/escalation-policy/create"
            body: "*"
        };
    }
    
    // Updates a specific EscalationPolicy. You can make changes in EscalationPolicy settings, including the name, the escalation process, and the number of iterations.
    rpc update (UpdateEscalationPolicyRequest) returns (EscalationPolicyInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/escalation-policy/update"
            body: "*"
        };
    }
    
    // Sets a specific EscalationPolicy as default. Only policies configured as global can be set as default. When a Project is created, even if you did not configure any policy to the Project, the default policy set by this api method is applied.
    rpc set_default (EscalationPolicyRequest) returns (EscalationPolicyInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/escalation-policy/set-default"
            body: "*"
        };
    }
    
    // Deletes a specific EscalationPolicy. Deletes the EscalationPolicy with the escalation_policy_id from the deletion request.
    rpc delete (EscalationPolicyRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/monitoring/v1/escalation-policy/delete"
            body: "*"
        };
    }
    
    // Gets a specific EscalationPolicy. Prints detailed information about the EscalationPolicy, including the name, rules, and termination conditions.
    rpc get (EscalationPolicyRequest) returns (EscalationPolicyInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/escalation-policy/get"
            body: "*"
        };
    }
    
    // Gets a list of all EscalationPolicies. You can use a query to get a filtered list of EscalationPolicies.
    rpc list (EscalationPolicyQuery) returns (EscalationPoliciesInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/escalation-policy/list"
            body: "*"
        };
    }
    
    rpc stat (EscalationPolicyStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            post: "/monitoring/v1/escalation-policy/stat"
            body: "*"
        };
    }
}

message EscalationPolicyRule {
    enum NotificationLevel {
        NONE = 0;
        ALL = 1;
        LV1 = 2;
        LV2 = 3;
        LV3 = 4;
        LV4 = 5;
        LV5 = 6;
    }

    NotificationLevel notification_level = 1;
    int32 escalate_minutes = 2;
}

//{
//    "name": "es-test",
//    "rules": [{"notification_level": "LV1", "escalate_minutes": 30},
//              {"notification_level": "LV2", "escalate_minutes": 30}],
//    "repeat_count": 2,
//    "finish_condition": "ACKNOWLEDGED",
//    "domain_id": "domain-58010aa2e451"
//}
message CreateEscalationPolicyRequest {
    enum EscalationFinishCondition {
        NONE = 0;
        ACKNOWLEDGED = 1;
        RESOLVED = 2;
    }

    enum ResourceGroup {
        RESOURCE_GROUP_NONE = 0;
        WORKSPACE = 1;
        PROJECT = 2;
    }
    
    string name = 1;
    repeated EscalationPolicyRule rules = 2;
    // +optional
    int32 repeat_count = 3;
    // +optional
    EscalationFinishCondition finish_condition = 4;
    // +optional
    google.protobuf.Struct tags = 5;
    ResourceGroup resource_group = 20;
    // +optional
    string project_id = 21;
}

//{
//    "escalation_policy_id": "ep-526e536fdca9",
//    "name": "es-test2",
//    "rules": [{"notification_level": "LV1", "escalate_minutes": 15},
//              {"notification_level": "LV2", "escalate_minutes": 15},
//              {"notification_level": "LV3", "escalate_minutes": 15}],
//    "repeat_count": 1,
//    "finish_condition": "RESOLVED",
//    "domain_id": "domain-58010aa2e451"
//}
message UpdateEscalationPolicyRequest {
    enum EscalationFinishCondition {
        NONE = 0;
        ACKNOWLEDGED = 1;
        RESOLVED = 2;
    }

    string escalation_policy_id = 1;
    // +optional
    string name = 2;
    // +optional
    repeated EscalationPolicyRule rules = 3;
    // +optional
    int32 repeat_count = 4;
    // +optional
    EscalationFinishCondition finish_condition = 5;
    // +optional
    google.protobuf.Struct tags = 6;
}

//{
//    "escalation_policy_id": "ep-526e536fdca9",
//    "domain_id": "domain-58010aa2e451"
//}
message EscalationPolicyRequest {
    string escalation_policy_id = 1;
}

//{
//    "query": {},
//    "domain_id": "domain-58010aa2e451"
//}
message EscalationPolicyQuery {

    enum EscalationFinishCondition {
        NONE = 0;
        ACKNOWLEDGED = 1;
        RESOLVED = 2;
    }

    enum ResourceGroup {
        RESOURCE_GROUP_NONE = 0;
        WORKSPACE = 1;
        PROJECT = 2;
    }

    // +optional
    spaceone.api.core.v2.Query query = 1;
    // +optional
    string escalation_policy_id = 2;
    // +optional
    string name = 3;
    // +optional
    bool is_default = 4;
    // +optional
    EscalationFinishCondition finish_condition = 5;
    ResourceGroup resource_group = 6;
    // +optional
    string project_id = 7;
}

//{
//        "escalation_policy_id": "ep-526e536fdca9",
//        "name": "es-test",
//        "rules": [
//            {
//                "notification_level": "LV1",
//                "escalate_minutes": 30
//            },
//            {
//                "notification_level": "LV2",
//                "escalate_minutes": 30
//            }
//        ],
//        "repeat_count": 2,
//        "finish_condition": "ACKNOWLEDGED",
//        "scope": "DOMAIN",
//        "tags": {},
//        "domain_id": "domain-58010aa2e451",
//        "created_at": "2022-06-21T09:22:45.340Z"
//}
message EscalationPolicyInfo {

    enum EscalationFinishCondition {
        NONE = 0;
        ACKNOWLEDGED = 1;
        RESOLVED = 2;
    }

    enum ResourceGroup {
        RESOURCE_GROUP_NONE = 0;
        WORKSPACE = 1;
        PROJECT = 2;
    }

    string escalation_policy_id = 1;
    string name = 2;
    bool is_default = 3;
    repeated EscalationPolicyRule rules = 4;
    int32 repeat_count = 5;
    EscalationFinishCondition finish_condition = 6;
    ResourceGroup resource_group = 7;
    string project_id = 8;
    google.protobuf.Struct tags = 9;
    string workspace_id = 10;
    string domain_id = 11;
    string created_at = 21;
}

//{
//    "results": [
//        {
//            "escalation_policy_id": "ep-7c9745003372",
//            "name": "0525-ms-test-1",
//            "rules": [
//                {
//                    "notification_level": "LV1"
//                }
//            ],
//            "finish_condition": "ACKNOWLEDGED",
//            "scope": "DOMAIN",
//            "tags": {},
//            "domain_id": "domain-58010aa2e451",
//            "created_at": "2022-05-25T09:31:15.150Z"
//        },
//        {
//            "escalation_policy_id": "ep-d75670166af4",
//            "name": "0525-ms-test-2",
//            "rules": [
//                {
//                    "notification_level": "LV2",
//                    "escalate_minutes": 30
//                },
//                {
//                    "notification_level": "LV2"
//                }
//            ],
//            "finish_condition": "ACKNOWLEDGED",
//            "scope": "DOMAIN",
//            "tags": {},
//            "domain_id": "domain-58010aa2e451",
//            "created_at": "2022-05-25T09:31:38.573Z"
//        }
//    ],
//    "total_count": 2
//}
message EscalationPoliciesInfo {
    repeated EscalationPolicyInfo results = 1;
    int32 total_count = 2;
}

message EscalationPolicyStatQuery {
    spaceone.api.core.v2.StatisticsQuery query = 1;
}