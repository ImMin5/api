// A Note is a comment on an Event, and is used for incident management. 
syntax = "proto3";

package spaceone.api.monitoring.v1;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/monitoring/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v2/query.proto";


service Note {
    // Creates a new Note. You can create Notes for each Alert to record the information needed to manage the Alerts.
    rpc create (CreateNoteRequest) returns (NoteInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/note/create"
            body: "*"
        };
    }
    
    // Updates a specific Note. You must specify the `note_id` for Note validation check. If the Note exists, it is updated.
    rpc update (UpdateNoteRequest) returns (NoteInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/note/update"
            body: "*"
        };
    }
    
    // Deletes a specific Note. You must specify the `note_id` of the Note to delete.
    rpc delete (NoteRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/monitoring/v1/note/delete"
            body: "*"
        };
    }
    
    // Gets a specific Note. You must specify the `note_id` and `domain_id`.
    rpc get (NoteRequest) returns (NoteInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/note/get"
            body: "*"
        };
    }
    
    // Gets a list of all Notes. You can use a query to get a filtered list of Notes.
    rpc list (NoteQuery) returns (NotesInfo) {
        option (google.api.http) = {
            post: "/monitoring/v1/note/list"
            body: "*"
        };
    }
    
    rpc stat (NoteStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            post: "/monitoring/v1/note/stat"
            body: "*"
        };
    }
}

//{
//    "alert_id": "alert-160ce04f6908",
//    "note": "This is a description",
//}
message CreateNoteRequest {
    string alert_id = 1;
    string note = 2;
}

//{
//    "note_id": "note-df107d31bf20",
//    "note": "This is a test",
//}
message UpdateNoteRequest {
    string note_id = 1;
    // +optional
    string note = 2;
}

//{
//    "note_id": "note-0bfac585bf5a",
//}
message NoteRequest {
    string note_id = 1;
}

//{
//    "query": {},
//    "domain_id": "domain-58010aa2e451"
//}
message NoteQuery {
    // +optional
    spaceone.api.core.v2.Query query = 1;
    // +optional
    string note_id = 2;
    // +optional
    string alert_id = 3;
    // +optional
    string created_by = 4;
    // +optional
    string workspace_id = 21;
    // +optional
    string project_id = 22;
}

//{
//    "note_id": "note-df107d31bf20",
//    "alert_id": "alert-160ce04f6908",
//    "note": "This is a description",
//    "created_by": "seolmin@mz.co.kr",
//    "project_id": "project-52a423012d5e",
//    "domain_id": "domain-58010aa2e451",
//    "created_at": "2022-06-29T08:26:14.418Z"
//}
message NoteInfo {
    string note_id = 1;
    string alert_id = 2;
    string note = 3;
    string created_by = 11;

    string domain_id = 21;
    string workspace_id = 22;
    string project_id = 23;

    string created_at = 31;
}

//{
//    "results": [
//        {
//            "note_id": "note-0597bd748be0",
//            "alert_id": "alert-fbfd78e43df8",
//            "note": "http://spaceone.org",
//            "created_by": "hykang@mz.co.kr",
//            "project_id": "project-52a423012d5e",
//            "domain_id": "domain-58010aa2e451",
//            "created_at": "2022-06-23T09:58:23.838Z"
//        },
//        {
//            "note_id": "note-0bfac585bf5a",
//            "alert_id": "alert-fbfd78e43df8",
//            "note": "test",
//            "created_by": "hykang@mz.co.kr",
//            "project_id": "project-52a423012d5e",
//            "domain_id": "domain-58010aa2e451",
//            "created_at": "2022-06-23T09:52:42.251Z"
//        }
//    ],
//    "total_count": 2
//}
message NotesInfo {
    repeated NoteInfo results = 1;
    int32 total_count = 2;
}

message NoteStatQuery {
    spaceone.api.core.v2.StatisticsQuery query = 1;
}