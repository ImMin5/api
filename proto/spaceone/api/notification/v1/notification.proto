/*
desc: A Notification is a service that delivers event data generated in Cloudforet to a Project or User.
 */
syntax = "proto3";

package spaceone.api.notification.v1;

option go_package = "dist/go";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";


service Notification {
    /*
    desc: Creates a new Notification. When a Notification is created, it is delivered to a UserChannel or a ProjectChannel depending on the parameter `resource_type`. If a Notification is delivered to a UserChannel, the `resource_type` is `identity.User`, and if a Notification is delivered to a ProjectChannel, the `resource_type` is `identity.Project`.
    request_example: >-
      {
        "resource_type": "identity.Project",
        "resource_id": "resource-123456789012",
        "topic": "monitoring.Alert",
        "message": {
            "title": "[Alerting] Not Running Pods 0:OK alert",
            "description": "[spaceone-dev] Not Running Pods 0 is OK\n\nFailure level : WorkerNode\nPanel ... ",
            "tags": {
                "urgency": "LOW",
                "resource_id": "pod",
                "assignee": "user1@email.com",
                "created_at": "2022-01-01T17:12:45.990Z",
                "state": "ACKNOWLEDGED",
                "project_id": "project-123456789012"
            }
        },
        "notification_type": "INFO",
        "notification_level": "LV2"
      }
    response_example: >-
      {
        "notification_id": "notification-123456789012",
        "topic": "monitoring.Alert",
        "message": {
            "title": "[Alerting] Not Running Pods 0:OK alert",
            "description": "[spaceone-dev] Not Running Pods 0 is OK\n\nFailure level : WorkerNode\nPanel ... ",
            "tags": {
                "urgency": "LOW",
                "resource_id": "pod",
                "assignee": "user1@email.com",
                "created_at": "2022-01-01T17:12:45.990Z",
                "state": "ACKNOWLEDGED",
                "project_id": "project-123456789012"
            }
        },
        "notification_type": "INFO",
        "notification_level": "LV2",
        "is_read": true,
        "user_id": "Cloudforet@mz.co.kr",
        "domain_id": "domain-123456789012",
        "created_at": "2022-01-01T17:12:40.990Z"
      }
    */
    rpc create (CreateNotificationRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { post: "/notification/v1/notifications" };
    }
    /*
    desc: Manually raises a Notification. A Notification is raised with a message to be sent using a valid specific Protocol, and data used for a specific Protocol such as a phone number.
    request_example: >-
      {
        "protocol_id": "protocol-fb30cb6c28d6",
        "data": {
            "phone_number": "01012345678"
        },
        "message": {
            "tags": [
                {
                    "key": "project_id",
                    "value": "project-xxxx"
                },
                {
                    "key": "project_name",
                    "value": "Test Project"
                },
                {
                    "key": "resource_id",
                    "value": "server-yyyyy"
                },
                {
                    "key": "resource_name",
                    "value": "web-server-001"
                }
            ],
            "description": "This is Sample Message",
            "title": "Sample"
        }
      }
    */
    rpc push (PushNotificationRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { post: "/notification/v1/notifications/push" };
    }
    /*
    desc: Deletes multiple Notifications. You must specify `notifications` of the list of Notifications to delete.
    request_example: >-
      {
        "notifications": [
            "notification-4025c1b61225",
            "notification-13hk3fh32534",
            "notification-4kth40jth5jy"
        ]
      }
    */
    rpc delete (NotificationRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/notification/v1/notification/{notifications}" };
    }
    /*
    desc: Marks a Notification as read. When a Notification is raised and if the Notification has been acknowledged, it can be marked as read with the method.
    request_example: >-
      {
        "notifications": [
            "notification-6c548a37ee77",
            "notification-4j3jt9384fnf"
        ]
      }
    */
    rpc set_read (SetReadNotificationRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { post: "/notification/v1/notifications/read" };
    }
    /*
    desc: Gets a specific Notification. Prints detailed information about the Notification, including not only the message contents(`title`, `description`) but also related data such as created time and urgency.
    request_example: >-
      {
        "notification_id": "notification-4025c1b61225"
      }
    response_example: >-
      {
        "notification_id": "notification-4025c1b61225",
        "topic": "monitoring.Alert",
        "message": {
            "tags": {
                "project_id": "project-18655561c535",
                "created_at": null,
                "urgency": "LOW",
                "state": "TRIGGERED",
                "resource_id": "AWS/NetworkELB",
                "resource_name": "[Asia Pacific (Seoul)]:[AWS/NetworkELB]: net/af83f347171a044af46453ebb34c8225/743a23562a96c595"
            },
            "title": "[Asia Pacific (Seoul)]: NLB-TCP_Target_Reset_Count-Alert",
            "description": "Threshold Crossed: 1 out of the last 1 datapoints [200.0 (25/06/21 06:38:00)] was not greater than the threshold (200.0)"
        },
        "notification_type": "INFO",
        "notification_level": "ALL",
        "is_read": true,
        "user_id": "user1@spaceone.dev",
        "domain_id": "domain-58010aa2e451",
        "created_at": "2021-06-25T06:42:05.867Z"
      }
    */
    rpc get (GetNotificationRequest) returns (NotificationInfo) {
        option (google.api.http) = { get: "/notification/v1/notification/{notification_id}" };
    }
    /*
    desc: Gets a list of all Notifications. You can use a query to get a filtered list of Notifications.
    request_example: >-
      {
        "query": {
            "filter": [
                {
                    "key": "notification_type",
                    "value": "INFO",
                    "operator": "eq"
                }
            ]
        }
      }
    response_example: >-
      {
        "results": [
            {
                "notification_id": "notification-9f1476af11b7",
                "topic": "monitoring.Alert",
                "message": {
                    "tags": {
                        "state": "ACKNOWLEDGED",
                        "resource_id": "pod",
                        "project_id": "project-18655561c535",
                        "urgency": "LOW",
                        "created_at": null,
                        "assignee": "yuda@test.co"
                    },
                    "title": "[Alerting] Not Running Pods 0:OK alert",
                    "description": "[cloudone-dev-v1-eks-cluster] Not Running Pods 0 is OK"
                },
                "notification_type": "INFO",
                "notification_level": "LV2",
                "is_read": true,
                "user_id": "user33@spaceone.dev",
                "domain_id": "domain-58010aa2e451",
                "created_at": "2021-06-21T17:13:39.570Z"
            },
            {
                "notification_id": "notification-4025c1b61225",
                "topic": "monitoring.Alert",
                "message": {
                    "title": "[Asia Pacific (Seoul)]: NLB-TCP_Target_Reset_Count-Alert",
                    "description": "Threshold Crossed: 1 out of the last 1 datapoints [200.0 (25/06/21 06:38:00)] was not greater than the threshold (200.0)",
                    "tags": {
                        "resource_id": "AWS/NetworkELB",
                        "resource_name": "[Asia Pacific (Seoul)]:[AWS/NetworkELB]: net/dfsbvs/advdr32rwqdsvzc",
                        "created_at": null,
                        "state": "TRIGGERED",
                        "project_id": "project-18655561c535",
                        "urgency": "LOW"
                    }
                },
                "notification_type": "INFO",
                "notification_level": "ALL",
                "is_read": true,
                "user_id": "user1@cloudforet.io",
                "domain_id": "domain-58010aa2e451",
                "created_at": "2021-06-25T06:42:05.867Z"
            }
        ],
        "total_count": 2
      }
    */
    rpc list (NotificationQuery) returns (NotificationsInfo) {
        option (google.api.http) = {
            get: "/notification/v1/notifications"
            additional_bindings {
                post: "/notification/v1/notifications/search"
            }
        };
    }
    rpc stat (NotificationStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/notification/v1/notifications/stat" };
    }
}

message CreateNotificationRequest {
    enum NotificationType {
        NOTIFICATION_TYPE_NONE = 0;
        INFO = 1;
        ERROR = 2;
        SUCCESS = 3;
        WARNING = 4;
    }
    enum NotificationLEVEL {
        NONE = 0;
        ALL = 1;
        LV1 = 2;
        LV2 = 3;
        LV3 = 4;
        LV4 = 5;
        LV5 = 6;
    }
    // is_required: true
    // desc: The type of resource to which the notification is dispatched.
    // Currently, only "identity.Project" or "identity.User" can be set.
    string resource_type = 1;
    // is_required: true
    // desc: The ID of the resource to which notifications are dispatched.
    // If resource_type is "identity.Project", then resource_id requires a project ID values.
    // If resource_type is "identity.User", then resource_id requires a user ID value.
    string resource_id = 2;
    // is_required: true
    // desc: The topic of notification.
    string topic = 3;
    // is_required: true
    // desc: This message is used for each protocol.
    google.protobuf.Struct message = 4;
    // is_required: false
    // desc: The type of notification.
    NotificationType notification_type = 5;
    // is_required: false
    // desc: The level of notification.
    NotificationLEVEL notification_level = 7;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 11;
}

message PushNotificationRequest {
    // is_required: true
    // desc: The ID of Protocol.
    string protocol_id = 1;
    // is_required: true
    google.protobuf.Struct data = 2;
    // is_required: true
    google.protobuf.Struct message = 3;
    // is_required: false
    string notification_type = 4;
    // is_required: false
    string notification_level = 5;
    // is_required: true
    string domain_id = 11;
}

message NotificationRequest {
    // is_required: true
    // desc: ID list of Notifications.
    repeated string notifications = 1;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 2;
}

message SetReadNotificationRequest {
    // is_required: true
    // desc: The ID list of notification that want to change read status.
    repeated string notifications = 1;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 2;
}

message GetNotificationRequest {
    // is_required: true
    // desc: The ID of Notification.
    string notification_id = 1;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 2;
    // is_required: false
    // desc: The list of the notification information column you want to be returned. It must be specified in the NotificationInfo.
    repeated string only = 3;
}

message NotificationQuery {
    enum NotificationType {
        NOTIFICATION_TYPE_NONE = 0;
        INFO = 1;
        ERROR = 2;
        SUCCESS = 3;
        WARNING = 4;
    }
    enum NotificationLEVEL {
        NONE = 0;
        ALL = 1;
        LV1 = 2;
        LV2 = 3;
        LV3 = 4;
        LV4 = 5;
        LV5 = 6;
    }
    // is_required: false
    // desc: Query format provided by SpaceONE. Please check the link for more information.
    spaceone.api.core.v1.Query query = 1;
    // is_required: false
    // desc: The ID of notification.
    string notification_id = 2;
    // is_required: false
    // desc: The topic of notification.
    string topic = 3;
    // is_required: false
    // desc: The type of notification.
    NotificationType notification_type = 4;
    // is_required: false
    // desc: The level of notification.
    NotificationLEVEL notification_level = 5;
    // is_required: false
    // desc: Whether or not to check the notification.
    // If is_read is False, the user has not checked the notification yet.
    bool is_read = 6;
    // is_required: false
    // desc: The ID of parent notification. Not used yet.
    string parent_notification_id = 7;
    // is_required: false
    // desc: The project ID to which the notification will be dispatched.
    string project_id = 8;
    // is_required: false
    // desc: The ID of user.
    string user_id = 9;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 11;
}

message NotificationInfo {
    enum NotificationType {
        NOTIFICATION_TYPE_NONE = 0;
        INFO = 1;
        ERROR = 2;
        SUCCESS = 3;
        WARNING = 4;
    }
    enum NotificationLEVEL {
        NONE = 0;
        ALL = 1;
        LV1 = 2;
        LV2 = 3;
        LV3 = 4;
        LV4 = 5;
        LV5 = 6;
    }

    // desc: The ID of notification.
    string notification_id = 1;
    // desc: The topic of notification.
    string topic = 2;
    // desc: The contents of notification.
    // This message is used for each protocol.
    google.protobuf.Struct message = 3;
    // desc: The type of notification.
    NotificationType notification_type = 4;
    // desc: The level of notification.
    NotificationLEVEL notification_level = 5;
    // desc: Whether or not to check the notification.
    // If notification has been returned at least once through the Get or List method, is_read is changed to True.
    bool is_read = 6;
    // desc: The ID of user to whom the notification was dispatched.
    string user_id = 11;
    // desc: The ID of domain
    string domain_id = 12;
    // desc: Notification creation time.
    string created_at = 21;
}

message NotificationsInfo {
    // desc: List of queried notifications.
    repeated NotificationInfo results = 1;
    // desc: Total counts of queried notifications.
    int32 total_count = 2;
}

message NotificationStatQuery {
    // is_required: true
    // desc: Statistics Query format provided by SpaceONE. Please check the link for more information.
    spaceone.api.core.v1.StatisticsQuery query = 1;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 2;
}
