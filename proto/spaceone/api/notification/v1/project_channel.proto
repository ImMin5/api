/*
desc: A ProjectChannel is a destination  where Notifications are delivered. Notifications are generated via the Protocol set by each Project.
*/
syntax = "proto3";

package spaceone.api.notification.v1;

option go_package = "dist/go";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";


service ProjectChannel {
    /*
    desc: Creates a new ProjectChannel. ProjectChannel is a channel that delivers a Notification to the Project when the Notification is created. When creating a ProjectChannel, one Protocol must be selected, and a Notification is dispatched via the selected Protocol.
    request_example: >-
      {
        "protocol_id": "protocol-ab94ea7d574e",
        "name": "sms-test",
        "data": {
            "phone_number": "01011112222"
        },
        "is_subscribe": true,
        "subscriptions": ["monitoring.Alert"],
        "notification_level": "LV1",
        "is_scheduled": true,
        "schedule": {
            "day_of_week": [
                "MON",
                "TUE",
                "WED",
                "THU",
                "FRI"
            ],
            "end_hour": 9
        },
        "project_id": "project-52a423012d5e"
      }
    response_example: >-
      {
        "project_channel_id": "project-ch-488df94d026d",
        "name": "sms-test",
        "state": "ENABLED",
        "data": {
            "phone_number": "01011112222"
        },
        "notification_level": "LV1",
        "tags": {},
        "protocol_id": "protocol-ab94ea7d574e",
        "project_id": "project-aa723eed3d69",
        "domain_id": "domain-58010aa2e451",
        "created_at": "2022-06-13T07:35:28.305Z"
      }
    */
    rpc create (CreateProjectChannelRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = { post: "/notification/v1/project-channels" };
    }
    /*
    desc: Updates a specific ProjectChannel. A ProjectChannel that has already been configured cannot be changed. Instead, the data required for dispatching Notifications to a ProjectChannel can be updated.
    request_example: >-
      {
        "project_channel_id": "project-ch-488df94d026d",
        "name": "sms2-test",
        "data": {
            "phone_number": "01033334444"
        },
        "notification_level": "LV2",
        "tags": {
            "a": "b"
        }
      }
    response_example: >-
      {
        "project_channel_id": "project-ch-488df94d026d",
        "name": "sms2-test",
        "state": "ENABLED",
        "data": {
            "phone_number": "01033334444"
        },
        "notification_level": "LV2",
        "tags": {
            "a": "b"
        },
        "protocol_id": "protocol-ab94ea7d574e",
        "project_id": "project-aa723eed3d69",
        "domain_id": "domain-58010aa2e451",
        "created_at": "2022-06-13T07:35:28.305Z"
      }
    */
    rpc update (UpdateProjectChannelRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = { put: "/notification/v1/project-channel/{project_channel_id}" };
    }
    /*
    desc: Sets a schedule for a ProjectChannel. A schedule defines the time to receive a Notification. When a Notification is created, you can set the day of the week and time you want to receive it. When you set the day of the week, you can receive a notification only on the day of the week you set. If you also set the start time and end time with the day of the week, you can receive a Notification only at the scheduled time on the day of the week you set. If there is no schedule set in a ProjectChannel, Notifications will be dispatched at all times via the ProjectChannel.
    request_example: >-
      {
        "project_channel_id": "project-ch-488df94d026d",
        "is_scheduled": true,
        "schedule": {
            "day_of_week": [
                "MON",
                "WED",
                "FRI"
            ],
            "end_hour": 9
        }
      }
    response_example: >-
      {
        "project_channel_id": "project-ch-488df94d026d",
        "name": "sms2-test",
        "state": "ENABLED",
        "data": {
            "phone_number": "01033334444"
        },
        "notification_level": "LV2",
        "is_scheduled": true,
        "schedule": {
            "day_of_week": [
                "MON",
                "WED",
                "FRI"
            ],
            "end_hour": 9
        },
        "tags": {
            "a": "b"
        },
        "protocol_id": "protocol-ab94ea7d574e",
        "project_id": "project-aa723eed3d69",
        "domain_id": "domain-58010aa2e451",
        "created_at": "2022-06-13T07:35:28.305Z"
      }
    */
    rpc set_schedule (UpdateProjectChannelScheduleRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = { put: "/notification/v1/project-channel/{project_channel_id}/schedule" };
    }
    /*
    desc: Sets a subscription for a ProjectChannel. A subscription is a topic for channels to subscribe to and get notified about. If a ProjectChannel has subscriptions, a Notification is dispatched only if the topic of the Notification is the same as the one set in the subscriptions. If there is no subscription in a ProjectChannel, all Notifications will be dispatched.
    request_example: >-
      {
        "project_channel_id": "project-ch-cff007433a23",
        "is_subscribe": true,
        "subscriptions": [
            "monitoring.Alert"
        ]
      }
    response_example: >-
      {
        "project_channel_id": "project-ch-cff007433a23",
        "name": "sms-test",
        "state": "ENABLED",
        "data": {
            "phone_number": "01033334444"
        },
        "is_subscribe": true,
        "subscriptions": [
            "monitoring.Alert"
        ],
        "notification_level": "LV1",
        "is_scheduled": true,
        "schedule": {
            "day_of_week": [
                "MON",
                "TUE",
                "WED",
                "THU",
                "FRI"
            ],
            "end_hour": 9
        },
        "tags": {},
        "protocol_id": "protocol-ab94ea7d574e",
        "project_id": "project-52a423012d5e",
        "domain_id": "domain-58010aa2e451",
        "created_at": "2022-06-20T06:03:09.177Z"
      }
    */
    rpc set_subscription (UpdateProjectChannelSubscriptionRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = { put: "/notification/v1/project-channel/{project_channel_id}/subscription" };
    }
    /*
    desc: Enables a specific ProjectChannel. If a ProjectChannel is enabled, the ProjectChannel can be used and the Notification can be dispatched. Even if a ProjectChannel is enabled, if the Protocol used in the ProjectChannel is disabled, the Notification is not dispatched.
    request_example: >-
      {
        "project_channel_id": "project-ch-ffdb1d6cc774"
      }
    */
    rpc enable (ProjectChannelRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = { put: "/notification/v1/project-channel/{project_channel_id}/enable" };
    }
    /*
    desc: Disables a specific ProjectChannel. If a ProjectChannel is disabled, the Notification is not dispatched, even if it is created.
    request_example: >-
      {
        "project_channel_id": "project-ch-ffdb1d6cc774"
      }
    */
    rpc disable (ProjectChannelRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = { put: "/notification/v1/project-channel/{project_channel_id}/disable" };
    }
    /*
    desc: Deletes a specific ProjectChannel.
    request_example: >-
      {
        "project_channel_id": "project-ch-ffdb1d6cc774"
      }
    */
    rpc delete (ProjectChannelRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/notification/v1/project-channel/{project_channel_id}" };
    }
    /*
    desc: Gets a specific ProjectChannel. Prints detailed information about the ProjectChannel.
    request_example: >-
      {
        "project_channel_id": "project-ch-ffdb1d6cc774"
      }
    response_example: >-
      {
        "project_channel_id": "project-ch-ffdb1d6cc774",
        "name": "personal_email",
        "state": "ENABLED",
        "data": {
            "email": "user1@cloudforet.io"
        },
        "notification_level": "LV1",
        "tags": {},
        "protocol_id": "protocol-e000a677ebdb",
        "project_id": "project-52a423012d5e",
        "domain_id": "domain-58010aa2e451",
        "created_at": "2022-06-20T04:40:21.264Z"
      }
    */
    rpc get (GetProjectChannelRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = { get: "/notification/v1/project-channel/{project_channel_id}" };
    }
    /*
    desc: Gets a list of all ProjectChannels. You can use a query to get a filtered list of ProjectChannels.
    request_example: >-
      {
        "query": {
            "filter": [
                {
                    "key": "state",
                    "value": "ENABLED",
                    "operator": "eq"
                }
            ]
        }
      }
    response_example: >-
      {
        "results": [
            {
                "project_channel_id": "project-ch-473efcfde4b1",
                "name": "Email Groups",
                "state": "ENABLED",
                "data": {
                    "email": "sykim1@cloudforet.io, sykim2@cloudforet.io"
                },
                "notification_level": "LV1",
                "tags": {},
                "protocol_id": "protocol-e000a677ebdb",
                "project_id": "project-28cf4f2e6645",
                "domain_id": "domain-58010aa2e451",
                "created_at": "2022-04-18T01:22:01.182Z"
            },
            {
                "project_channel_id": "project-ch-98845ba0f975",
                "name": "Song Email",
                "state": "ENABLED",
                "data": {
                    "email": "sykim@mz.co.kr"
                },
                "notification_level": "LV1",
                "tags": {},
                "protocol_id": "protocol-e000a677ebdb",
                "project_id": "project-28cf4f2e6645",
                "domain_id": "domain-58010aa2e451",
                "created_at": "2022-04-18T01:17:40.741Z"
            }
        ],
        "total_count": 2
      }
    */
    rpc list (ProjectChannelQuery) returns (ProjectChannelsInfo) {
        option (google.api.http) = {
            get: "/notification/v1/project-channels"
            additional_bindings {
                post: "/notification/v1/project-channels/search"
            }
        };
    }
    rpc stat (ProjectChannelStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/notification/v1/project-channels/stat" };
    }
}

enum NotificationLevel {
    NONE = 0;
    LV1 = 1;
    LV2 = 2;
    LV3 = 3;
    LV4 = 4;
    LV5 = 5;
}

message ProjectChannelSchedule {
    enum DayOfWeek {
        NONE = 0;
        MON = 1;
        TUE = 2;
        WED = 3;
        THU = 4;
        FRI = 5;
        SAT = 6;
        SUN = 7;
    }
    // desc: Day of the week to be notified.
    // As a list type, only types that can be specified from MON to SUN can be set.
    repeated DayOfWeek day_of_week = 1;
    // desc: Start time to receive notifications.
    // Only integer type can be set, and 0 to 23 can be.
    int32 start_hour = 2;
    // desc: End time to receive notifications.
    // Only integer type can be set, and 1 to 24 can be.
    int32 end_hour = 3;
}

message CreateProjectChannelRequest {
    // is_required: true
    // desc: The ID of protocol that will be set in project channel.
    string protocol_id = 1;
    // is_required: true
    // desc: The name of Project Channel. It can have a maximum of 255 characters.
    string name = 2;
    // is_required: true
    // desc: The data for using project channel.
    // This data is encrypted and stored in the Secret service if JSON schema in the protocol's metadata is set to SECRET type.
    // In this case, the secret ID that is stored in the security service will be returned and the data value will be empty.
    // if JSON schema in the protocol's metadata is set to PLAIN_TEXT type, This data is not encrypted and stored directly in the DB.
    google.protobuf.Struct data = 3;
    // is_required: false
    // desc: Indicates whether subscriptions will be used.
    bool is_subscribe = 4;
    // is_required: false
    // desc: When using subscriptions, it indicates the topic list to subscription.
    // If is_subscribe is set to false, this value is ignored.
    repeated string subscriptions = 5;
    // is_required: false
    // desc: Set the level of notification.
    // If a notification has a level and a notification level that this channel can receive is set, a notification is dispatched only if the notification level is the same.
    NotificationLevel notification_level = 6;
    // is_required: false
    // desc: Indicates whether schedule will be used.
    bool is_scheduled = 7;
    // is_required: false
    // desc: Schedule for which you want to receive notifications through the project channel.
    ProjectChannelSchedule schedule = 8;
    // is_required: false
    // desc: The tags for project channel.
    google.protobuf.Struct tags = 9;
    // is_required: true
    // desc: The ID of project to which the project channel belongs.
    string project_id = 21;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 22;
}

message UpdateProjectChannelRequest {
    // is_required: true
    // desc: The ID of project channel.
    string project_channel_id = 1;
    // is_required: false
    // desc: The name of Project Channel. It can have a maximum of 255 characters.
    string name = 2;
    // is_required: false
    // desc: The data for using project channel.
    // This data is encrypted and stored in the Secret service if JSON schema in the protocol's metadata is set to SECRET type.
    // In this case, the secret ID that is stored in the security service will be returned and the data value will be empty.
    // if JSON schema in the protocol's metadata is set to PLAIN_TEXT type, This data is not encrypted and stored directly in the DB.
    google.protobuf.Struct data = 3;
    // is_required: false
    // desc: Set the level of notification.
    // If a notification has a level and a notification level that this channel can receive is set, a notification is dispatched only if the notification level is the same.
    NotificationLevel notification_level = 5;
    // is_required: false
    // desc: The tags for project channel.
    google.protobuf.Struct tags = 7;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 11;
}

message UpdateProjectChannelScheduleRequest {
    // is_required: true
    // desc: The ID of project channel.
    string project_channel_id = 1;
    // is_required: true
    // desc: Indicates whether schedule will be used.
    bool is_scheduled = 2;
    // is_required: false
    // desc: Schedule for which you want to receive notifications through the project channel.
    ProjectChannelSchedule schedule = 3;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 4;
}

message UpdateProjectChannelSubscriptionRequest {
    // is_required: true
    // desc: The ID of project channel.
    string project_channel_id = 1;
    // is_required: true
    // desc: Indicates whether subscriptions will be used.
    bool is_subscribe = 2;
    // is_required: false
    // desc: When using subscriptions, it indicates the topic list to subscription.
    // If is_subscribe is set to false, this value is ignored.
    repeated string subscriptions = 3;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 4;
}

message ProjectChannelRequest {
    // is_required: true
    // desc: The ID of project channel.
    string project_channel_id = 1;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 2;
}

message GetProjectChannelRequest {
    // is_required: true
    // desc: The ID of project channel.
    string project_channel_id = 1;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 2;
    // is_required: false
    // desc: The list of the project channel information column you want to be returned. It must be specified in the ProjectChannelInfo.
    repeated string only = 3;
}

message ProjectChannelQuery {
    enum ProjectChannelState {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }
    // is_required: false
    // desc: Query format provided by SpaceONE. Please check the link for more information.
    spaceone.api.core.v1.Query query = 1;
    // is_required: false
    // desc: The ID of project channel.
    string project_channel_id = 2;
    // is_required: false
    // desc: The name of project channel.
    string name = 3;
    // is_required: false
    // desc: The state of project channel. ENABLED or DISABLED only.
    ProjectChannelState state = 4;
    // is_required: false
    // The ID of secret encrypted data in the security service
    string secret_id = 5;
    // is_required: false
    // desc: The level of notification.
    NotificationLevel notification_level = 6;
    // is_required: false
    // desc: The ID of protocol set in the project channel.
    string protocol_id = 11;
    // is_required: false
    // desc: The ID of project to which the project channel belongs.
    string project_id = 12;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 13;
}

message ProjectChannelInfo {
    enum ProjectChannelState {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }
    // desc: The ID of project channel.
    string project_channel_id = 1;
    // desc: The name of project channel
    string name = 2;
    // desc: The state of project channel. ENABLED or DISABLED only.
    ProjectChannelState state = 3;
    // desc: The data for using project channel.
    google.protobuf.Struct data = 4;
    // The ID of secret encrypted data in the security service
    string secret_id = 5;
    // desc: Indicates whether subscriptions will be used.
    bool is_subscribe = 6;
    // desc: The topic list to subscription.
    repeated string subscriptions = 7;
    // desc: Set the level of notification.
    NotificationLevel notification_level = 8;
    // desc: Indicates whether schedule will be used.
    bool is_scheduled = 9;
    // desc: Schedule for which you want to receive notifications through the project channel.
    ProjectChannelSchedule schedule = 10;
    // desc: The tags for project channel.
    google.protobuf.Struct tags = 11;
    // desc: The ID of protocol set in the project channel.
    string protocol_id = 21;
    // desc: The ID of project to which the project channel belongs.
    string project_id = 22;
    // desc: The ID of domain.
    string domain_id = 23;
    // desc: Project channel creation time.
    string created_at = 31;
}

message ProjectChannelsInfo {
    // desc : List of queried project channels.
    repeated ProjectChannelInfo results = 1;
    // desc : Total counts of queried project channels.
    int32 total_count = 2;
}

message ProjectChannelStatQuery {
    // is_required: true
    // desc: Statistics Query format provided by SpaceONE. Please check the link for more information.
    spaceone.api.core.v1.StatisticsQuery query = 1;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 2;
}