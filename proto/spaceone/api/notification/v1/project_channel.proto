// A ProjectChannel is a destination  where Notifications are delivered. Notifications are generated via the Protocol set by each Project.
syntax = "proto3";

package spaceone.api.notification.v1;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/notification/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";


service ProjectChannel {
    // Creates a new ProjectChannel. ProjectChannel is a channel that delivers a Notification to the Project when the Notification is created. When creating a ProjectChannel, one Protocol must be selected, and a Notification is dispatched via the selected Protocol.
    rpc create (CreateProjectChannelRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = {
            post: "/notification/v1/project-channel/create"
            body: "*"
        };
    }
    
    // Updates a specific ProjectChannel. A ProjectChannel that has already been configured cannot be changed. Instead, the data required for dispatching Notifications to a ProjectChannel can be updated.
    rpc update (UpdateProjectChannelRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = {
            post: "/notification/v1/project-channel/update"
            body: "*"
        };
    }
    
    // Sets a schedule for a ProjectChannel. A schedule defines the time to receive a Notification. When a Notification is created, you can set the day of the week and time you want to receive it. When you set the day of the week, you can receive a notification only on the day of the week you set. If you also set the start time and end time with the day of the week, you can receive a Notification only at the scheduled time on the day of the week you set. If there is no schedule set in a ProjectChannel, Notifications will be dispatched at all times via the ProjectChannel.
    rpc set_schedule (UpdateProjectChannelScheduleRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = {
            post: "/notification/v1/project-channel/set-schedule"
            body: "*"
        };
    }
    
    // Sets a subscription for a ProjectChannel. A subscription is a topic for channels to subscribe to and get notified about. If a ProjectChannel has subscriptions, a Notification is dispatched only if the topic of the Notification is the same as the one set in the subscriptions. If there is no subscription in a ProjectChannel, all Notifications will be dispatched.
    rpc set_subscription (UpdateProjectChannelSubscriptionRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = {
            post: "/notification/v1/project-channel/set-subscription"
            body: "*"
        };
    }
    
    // Enables a specific ProjectChannel. If a ProjectChannel is enabled, the ProjectChannel can be used and the Notification can be dispatched. Even if a ProjectChannel is enabled, if the Protocol used in the ProjectChannel is disabled, the Notification is not dispatched.
    rpc enable (ProjectChannelRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = {
            post: "/notification/v1/project-channel/enable"
            body: "*"
        };
    }


    // Disables a specific ProjectChannel. If a ProjectChannel is disabled, the Notification is not dispatched, even if it is created.
    rpc disable (ProjectChannelRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = {
            post: "/notification/v1/project-channel/disable"
            body: "*"
        };
    }
    
    // Deletes a specific ProjectChannel.
    rpc delete (ProjectChannelRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/notification/v1/project-channel/delete"
            body: "*"
        };
    }
    
    // Gets a specific ProjectChannel. Prints detailed information about the ProjectChannel.
    rpc get (GetProjectChannelRequest) returns (ProjectChannelInfo) {
        option (google.api.http) = {
            post: "/notification/v1/project-channel/get"
            body: "*"
        };
    }
    
    // Gets a list of all ProjectChannels. You can use a query to get a filtered list of ProjectChannels.
    rpc list (ProjectChannelQuery) returns (ProjectChannelsInfo) {
        option (google.api.http) = {
            post: "/notification/v1/project-channel/list"
            body: "*"
        };
    }
    
    rpc stat (ProjectChannelStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            post: "/notification/v1/project-channel/stat"
            body: "*"
        };
    }
}

enum NotificationLevel {
    NONE = 0;
    LV1 = 1;
    LV2 = 2;
    LV3 = 3;
    LV4 = 4;
    LV5 = 5;
}

message ProjectChannelSchedule {
    enum DayOfWeek {
        NONE = 0;
        MON = 1;
        TUE = 2;
        WED = 3;
        THU = 4;
        FRI = 5;
        SAT = 6;
        SUN = 7;
    }
    // Day of the week to be notified.
    // As a list type, only types that can be specified from MON to SUN can be set.
    repeated DayOfWeek day_of_week = 1;
    // Start time to receive notifications.
    // Only integer type can be set, and 0 to 23 can be.
    int32 start_hour = 2;
    // End time to receive notifications.
    // Only integer type can be set, and 1 to 24 can be.
    int32 end_hour = 3;
}

//{
//    "protocol_id": "protocol-ab94ea7d574e",
//    "name": "sms-test",
//    "data": {
//        "phone_number": "01011112222"
//    },
//    "is_subscribe": true,
//    "subscriptions": ["monitoring.Alert"],
//    "notification_level": "LV1",
//    "is_scheduled": true,
//    "schedule": {
//        "day_of_week": [
//            "MON",
//            "TUE",
//            "WED",
//            "THU",
//            "FRI"
//        ],
//        "end_hour": 9
//    },
//    "project_id": "project-52a423012d5e"
//}
message CreateProjectChannelRequest {
    // The ID of protocol that will be set in project channel.
    string protocol_id = 1;
    // The name of Project Channel. It can have a maximum of 255 characters.
    string name = 2;
    // The data for using project channel.
    // This data is encrypted and stored in the Secret service if JSON schema in the protocol's metadata is set to SECRET type.
    // In this case, the secret ID that is stored in the security service will be returned and the data value will be empty.
    // if JSON schema in the protocol's metadata is set to PLAIN_TEXT type, This data is not encrypted and stored directly in the DB.
    google.protobuf.Struct data = 3;
    // Indicates whether subscriptions will be used.
    // +optional
    bool is_subscribe = 4;
    // When using subscriptions, it indicates the topic list to subscription.
    // If is_subscribe is set to false, this value is ignored.
    // +optional
    repeated string subscriptions = 5;
    // Set the level of notification.
    // If a notification has a level and a notification level that this channel can receive is set, a notification is dispatched only if the notification level is the same.
    // +optional
    NotificationLevel notification_level = 6;
    // Indicates whether schedule will be used.
    // +optional
    bool is_scheduled = 7;
    // Schedule for which you want to receive notifications through the project channel.
    // +optional
    ProjectChannelSchedule schedule = 8;
    // The tags for project channel.
    // +optional
    google.protobuf.Struct tags = 9;
    // The ID of project to which the project channel belongs.
    string project_id = 21;
    // The ID of domain.
    string domain_id = 22;
}

//{
//    "project_channel_id": "project-ch-488df94d026d",
//    "name": "sms2-test",
//    "data": {
//        "phone_number": "01033334444"
//    },
//    "notification_level": "LV2",
//    "tags": {
//        "a": "b"
//    }
//}
message UpdateProjectChannelRequest {
    // The ID of project channel.
    string project_channel_id = 1;
    // The name of Project Channel. It can have a maximum of 255 characters.
    // +optional
    string name = 2;
    // The data for using project channel.
    // This data is encrypted and stored in the Secret service if JSON schema in the protocol's metadata is set to SECRET type.
    // In this case, the secret ID that is stored in the security service will be returned and the data value will be empty.
    // if JSON schema in the protocol's metadata is set to PLAIN_TEXT type, This data is not encrypted and stored directly in the DB.
    // +optional
    google.protobuf.Struct data = 3;
    // Set the level of notification.
    // If a notification has a level and a notification level that this channel can receive is set, a notification is dispatched only if the notification level is the same.
    // +optional
    NotificationLevel notification_level = 5;
    // The tags for project channel.
    // +optional
    google.protobuf.Struct tags = 7;
    // The ID of domain.
    string domain_id = 11;
}

//{
//    "project_channel_id": "project-ch-488df94d026d",
//    "is_scheduled": true,
//    "schedule": {
//        "day_of_week": [
//            "MON",
//            "WED",
//            "FRI"
//        ],
//        "end_hour": 9
//    }
//}
message UpdateProjectChannelScheduleRequest {
    // The ID of project channel.
    string project_channel_id = 1;
    // Indicates whether schedule will be used.
    bool is_scheduled = 2;
    // Schedule for which you want to receive notifications through the project channel.
    // +optional
    ProjectChannelSchedule schedule = 3;
    // The ID of domain.
    string domain_id = 4;
}

//{
//    "project_channel_id": "project-ch-cff007433a23",
//    "is_subscribe": true,
//    "subscriptions": [
//        "monitoring.Alert"
//    ]
//}
message UpdateProjectChannelSubscriptionRequest {
    // The ID of project channel.
    string project_channel_id = 1;
    // Indicates whether subscriptions will be used.
    bool is_subscribe = 2;
    // When using subscriptions, it indicates the topic list to subscription.
    // If is_subscribe is set to false, this value is ignored.
    // +optional
    repeated string subscriptions = 3;
    // The ID of domain.
    string domain_id = 4;
}

//{
//    "project_channel_id": "project-ch-ffdb1d6cc774"
//}
message ProjectChannelRequest {
    // The ID of project channel.
    string project_channel_id = 1;
    // The ID of domain.
    string domain_id = 2;
}

//{
//    "project_channel_id": "project-ch-ffdb1d6cc774"
//}
message GetProjectChannelRequest {
    // The ID of project channel.
    string project_channel_id = 1;
    // The ID of domain.
    string domain_id = 2;
    // The list of the project channel information column you want to be returned. It must be specified in the ProjectChannelInfo.
    // +optional
    repeated string only = 3;
}

//{
//    "query": {
//        "filter": [
//            {
//                "key": "state",
//                "value": "ENABLED",
//                "operator": "eq"
//            }
//        ]
//    }
//}
message ProjectChannelQuery {
    enum ProjectChannelState {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }
    // Query format provided by SpaceONE. Please check the link for more information.
    // +optional
    spaceone.api.core.v1.Query query = 1;
    // The ID of project channel.
    // +optional
    string project_channel_id = 2;
    // The name of project channel.
    // +optional
    string name = 3;
    // The state of project channel. ENABLED or DISABLED only.
    // +optional
    ProjectChannelState state = 4;
    // The ID of secret encrypted data in the security service
    // +optional
    string secret_id = 5;
    // The level of notification.
    // +optional
    NotificationLevel notification_level = 6;
    // The ID of protocol set in the project channel.
    // +optional
    string protocol_id = 11;
    // The ID of project to which the project channel belongs.
    // +optional
    string project_id = 12;
    // The ID of domain.
    string domain_id = 13;
}

//{
//    "project_channel_id": "project-ch-488df94d026d",
//    "name": "sms-test",
//    "state": "ENABLED",
//    "data": {
//        "phone_number": "01011112222"
//    },
//    "notification_level": "LV1",
//    "tags": {},
//    "protocol_id": "protocol-ab94ea7d574e",
//    "project_id": "project-aa723eed3d69",
//    "domain_id": "domain-58010aa2e451",
//    "created_at": "2022-06-13T07:35:28.305Z"
//}
message ProjectChannelInfo {
    enum ProjectChannelState {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }
    // The ID of project channel.
    string project_channel_id = 1;
    // The name of project channel
    string name = 2;
    // The state of project channel. ENABLED or DISABLED only.
    ProjectChannelState state = 3;
    // The data for using project channel.
    google.protobuf.Struct data = 4;
    // The ID of secret encrypted data in the security service
    string secret_id = 5;
    // Indicates whether subscriptions will be used.
    bool is_subscribe = 6;
    // The topic list to subscription.
    repeated string subscriptions = 7;
    // Set the level of notification.
    NotificationLevel notification_level = 8;
    // Indicates whether schedule will be used.
    bool is_scheduled = 9;
    // Schedule for which you want to receive notifications through the project channel.
    ProjectChannelSchedule schedule = 10;
    // The tags for project channel.
    google.protobuf.Struct tags = 11;
    // The ID of protocol set in the project channel.
    string protocol_id = 21;
    // The ID of project to which the project channel belongs.
    string project_id = 22;
    // The ID of domain.
    string domain_id = 23;
    // Project channel creation time.
    string created_at = 31;
}

//{
//    "results": [
//        {
//            "project_channel_id": "project-ch-473efcfde4b1",
//            "name": "Email Groups",
//            "state": "ENABLED",
//            "data": {
//                "email": "sykim1@cloudforet.io, sykim2@cloudforet.io"
//            },
//            "notification_level": "LV1",
//            "tags": {},
//            "protocol_id": "protocol-e000a677ebdb",
//            "project_id": "project-28cf4f2e6645",
//            "domain_id": "domain-58010aa2e451",
//            "created_at": "2022-04-18T01:22:01.182Z"
//        },
//        {
//            "project_channel_id": "project-ch-98845ba0f975",
//            "name": "Song Email",
//            "state": "ENABLED",
//            "data": {
//                "email": "sykim@mz.co.kr"
//            },
//            "notification_level": "LV1",
//            "tags": {},
//            "protocol_id": "protocol-e000a677ebdb",
//            "project_id": "project-28cf4f2e6645",
//            "domain_id": "domain-58010aa2e451",
//            "created_at": "2022-04-18T01:17:40.741Z"
//        }
//    ],
//    "total_count": 2
//}
message ProjectChannelsInfo {
    // List of queried project channels.
    repeated ProjectChannelInfo results = 1;
    // Total counts of queried project channels.
    int32 total_count = 2;
}

message ProjectChannelStatQuery {
    // Statistics Query format provided by SpaceONE. Please check the link for more information.
    spaceone.api.core.v1.StatisticsQuery query = 1;
    // The ID of domain.
    string domain_id = 2;
}