// A UserChannel is a destination where Notifications are delivered. Notifications are generated via the Protocol set by each User.
syntax = "proto3";

package spaceone.api.notification.v1;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/notification/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";


service UserChannel {
    // Creates a new UserChannel. A UserChannel is a channel that delivers a Notification to users when the Notification is created. When creating a UserChannel, one Protocol must be selected, and an Notification is dispatched via the selected Protocol.
    rpc create (CreateUserChannelRequest) returns (UserChannelInfo) {
        option (google.api.http) = {
            post: "/notification/v1/user-channel/create"
            body: "*"
        };
    }
    
    // Updates a specific UserChannel. A UserChannel that has already been configured cannot be changed. Instead, the data required for dispatching Notifications to a UserChannel can be updated.
    rpc update (UpdateUserChannelRequest) returns (UserChannelInfo) {
        option (google.api.http) = {
            post: "/notification/v1/user-channel/update"
            body: "*"
        };
    }
    
    // Sets a schedule for a UserChannel. A schedule defines the time to receive a Notification. When a Notification is created, you can set the day of the week and time you want to receive it. When you set the day of the week, you can receive a notification only on the day of the week you set. If you also set the start time and end time with the day of the week, you can receive a Notification only at the scheduled time on the day of the week you set. If there is no schedule set in a UserChannel, Notifications will be dispatched at all times via the UserChannel.
    rpc set_schedule (UpdateUserChannelScheduleRequest) returns (UserChannelInfo) {
        option (google.api.http) = {
            post: "/notification/v1/user-channel/set-schedule"
            body: "*"
        };
    }
    
    // Sets a subscription for a UserChannel. A subscription is a topic for channels to subscribe to and get notified about. If a UserChannel has subscriptions, a Notification is dispatched only if the topic of the Notification is the same as the one set in the subscriptions. If there is no subscription in a UserChannel, all Notifications will be dispatched.
    rpc set_subscription (UpdateUserChannelSubscriptionRequest) returns (UserChannelInfo) {
        option (google.api.http) = {
            post: "/notification/v1/user-channel/set-subscription"
            body: "*"
        };
    }
    
    // Enables a specific UserChannel. If a UserChannel is enabled, the UserChannel can be used and the Notification can be dispatched. Even if a UserChannel is enabled, if the Protocol used in the UserChannel is disabled, the Notification is not dispatched.
    rpc enable (UserChannelRequest) returns (UserChannelInfo) {
        option (google.api.http) = {
            post: "/notification/v1/user-channel/enable"
            body: "*"
        };
    }
    
    // Disables a specific UserChannel. If a UserChannel is disabled, the Notification is not dispatched, even if it is created.
    rpc disable (UserChannelRequest) returns (UserChannelInfo) {
        option (google.api.http) = {
            post: "/notification/v1/user-channel/disable"
            body: "*"
        };
    }
    
    // Deletes a specific UserChannel. You must specify the `user_channel_id` of the UserChannel to delete.
    rpc delete (UserChannelRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/notification/v1/user-channel/delete"
            body: "*"
        };
    }
    
    // Gets a specific UserChannel. Prints detailed information about the UserChannel, including the Protocol configured and the Notification settings.
    rpc get (UserChannelRequest) returns (UserChannelInfo) {
        option (google.api.http) = {
            post: "/notification/v1/user-channel/get"
            body: "*"
        };
    }
    
    // Gets a list of all UserChannels. You can use a query to get a filtered list of UserChannels.
    rpc list (UserChannelQuery) returns (UserChannelsInfo) {
        option (google.api.http) = {
            post: "/notification/v1/user-channel/list"
            body: "*"
        };
    }
    
    rpc stat (UserChannelStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            post: "/notification/v1/user-channel/stat"
            body: "*"
        };
    }
}

message UserChannelSchedule {
    enum DayOfWeek {
        NONE = 0;
        MON = 1;
        TUE = 2;
        WED = 3;
        THU = 4;
        FRI = 5;
        SAT = 6;
        SUN = 7;
    }
    // Day of the week to be notified.
    // As a list type, only types that can be specified from MON to SUN can be set.
    repeated DayOfWeek day_of_week = 1;
    // Start time to receive notifications.
    // Only integer type can be set, and 0 to 23 can be.
    int32 start_hour = 2;
    // End time to receive notifications.
    // Only integer type can be set, and 1 to 24 can be.
    int32 end_hour = 3;
}

//{
//    "protocol_id": "protocol-123456789012",
//    "name": "Email",
//    "data": {
//        "email": "user1@email.com"
//    },
//}
message CreateUserChannelRequest {
    // The ID of protocol that will be set in user channel.
    string protocol_id = 1;
    // The name of User Channel. It can have a maximum of 255 characters.
    string name = 2;
    // The data for using user channel.
    // This data is encrypted and stored in the Secret service if JSON schema in the protocol's metadata is set to SECRET type.
    // In this case, the secret ID that is stored in the security service will be returned and the data value will be empty.
    // if JSON schema in the protocol's metadata is set to PLAIN_TEXT type, This data is not encrypted and stored directly in the DB.
    google.protobuf.Struct data = 3;
    // Indicates whether subscriptions will be used.
    // +optional
    bool is_subscribe = 4;
    // When using subscriptions, it indicates the topic list to subscription.
    // If is_subscribe is set to false, this value is ignored.
    // +optional
    repeated string subscriptions = 5;
    // Indicates whether schedule will be used.
    // +optional
    bool is_scheduled = 6;
    // Schedule for which you want to receive notifications through the user channel.
    // +optional
    UserChannelSchedule schedule = 7;
    // The tags for user channel.
    // +optional
    google.protobuf.Struct tags = 8;
}

//{
//    "user_channel_id": "user-ch-123456789012",
//    "name": "Email2",
//    "data": {
//        "email": "user1@gmail.com"
//    },
//    "tags": {
//        "type": "test"
//    }
//}
message UpdateUserChannelRequest {
    // The ID of user channel.
    string user_channel_id = 1;
    // The name of user channel. It can have a maximum of 255 characters.
    // +optional
    string name = 2;
    // The data for using user channel.
    // This data is encrypted and stored in the Secret service if JSON schema in the protocol's metadata is set to SECRET type.
    // In this case, the secret ID that is stored in the security service will be returned and the data value will be empty.
    // if JSON schema in the protocol's metadata is set to PLAIN_TEXT type, This data is not encrypted and stored directly in the DB.
    // +optional
    google.protobuf.Struct data = 3;
    // Set the level of notification.
    // If a notification has a level and a notification level that this channel can receive is set, a notification is dispatched only if the notification level is the same.
    // +optional
    UserChannelSchedule schedule = 4;
    // The tags for user channel.
    // +optional
    google.protobuf.Struct tags = 5;
}

//{
//    "user_channel_id": "user-ch-28097e8d5d59",
//    "is_scheduled": true,
//    "schedule": {
//        "day_of_week": [
//            "MON",
//            "TUE",
//            "WED",
//            "THU",
//            "FRI"
//        ],
//        "end_hour": 9
//    },
//}
message UpdateUserChannelScheduleRequest {
    // The ID of user channel.
    string user_channel_id = 1;
    // Indicates whether schedule will be used.
    bool is_scheduled = 2;
    // Schedule for which you want to receive notifications through the user channel.
    // +optional
    UserChannelSchedule schedule = 3;
}

//{
//    "user_channel_id": "user-ch-28097e8d5d59",
//    "is_subscribe": true,
//    "subscriptions": [
//        "monitoring.Alert"
//    ],
//}
message UpdateUserChannelSubscriptionRequest {
    // The ID of user channel.
    string user_channel_id = 1;
    // Indicates whether subscriptions will be used.
    bool is_subscribe = 2;
    // If is_subscribe is set to false, this value is ignored.
    // +optional
    repeated string subscriptions = 3;
}

//{
//    "user_channel_id": "user-ch-123456789012"
//}
message UserChannelRequest {
    // The ID of user channel.
    string user_channel_id = 1;
}

//{
//    "query": {}
//}
message UserChannelQuery {
    enum UserChannelState {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }
    // Query format provided by SpaceONE. Please check the link for more information.
    // +optional
    spaceone.api.core.v1.Query query = 1;
    // The ID of user channel.
    // +optional
    string user_channel_id = 2;
    // The name of user channel. It can have a maximum of 255 characters.
    // +optional
    string name = 3;
    // The state of user channel. ENABLED or DISABLED only.
    // +optional
    UserChannelState state = 4;
    // Indicates whether subscriptions will be used.
    // +optional
    bool is_subscribe = 5;
    // Indicates whether schedule will be used.
    // +optional
    bool is_scheduled = 6;
    // The ID of protocol set in the user channel.
    // +optional
    string protocol_id = 21;
    // The ID of secret encrypted data in the security service
    // +optional
    string secret_id = 22;
}

//{
//    "user_channel_id": "user-ch-123456789012",
//    "name": "Email",
//    "state": "ENABLED",
//    "data": {
//        "email": "user1@email.com"
//    },
//    "protocol_id": "protocol-123456789012",
//    "user_id": "user1@email.com",
//    "domain_id": "domain-123456789012",
//    "created_at": "2022-01-01T08:28:49.108Z"
//}
message UserChannelInfo {
    enum UserChannelState {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }
    // The ID of user channel.
    string user_channel_id = 1;
    // The name of user channel
    string name = 2;
    // The state of user channel. ENABLED or DISABLED only.
    UserChannelState state = 3;
    // The data for using user channel.
    google.protobuf.Struct data = 4;
    // Indicates whether subscriptions will be used.
    bool is_subscribe = 5;
    // The topic list to subscription.
    repeated string subscriptions = 6;
    // Indicates whether schedule will be used.
    bool is_scheduled = 7;
    // Schedule for which you want to receive notifications through the user channel.
    UserChannelSchedule schedule = 8;
    // The tags for user channel.
    google.protobuf.Struct tags = 9;

    // The ID of domain.
    string domain_id = 21;
    // The ID of user using the user channel.
    string user_id = 22;
    // The ID of protocol set in the user channel.
    string protocol_id = 23;
    // The ID of secret encrypted data in the security service
    string secret_id = 24;

    // User channel creation time.
    string created_at = 31;
}

//{
//    "results": [
//        {
//            "user_channel_id": "user-ch-123456789012",
//            "name": "Email",
//            "state": "ENABLED",
//            "data": {
//                "email": "user1@email.com"
//            },
//            "protocol_id": "protocol-123456789012",
//            "user_id": "user1@email.com",
//            "domain_id": "domain-123456789012",
//            "created_at": "2022-01-01T08:28:49.108Z"
//        },
//        {
//            "user_channel_id": "user-ch-98765432109",
//            "name": "Email",
//            "state": "ENABLED",
//            "data": {
//                "email": "user2@email.com"
//            },
//            "is_scheduled": true,
//            "schedule": {
//                "day_of_week": [
//                    "MON",
//                    "TUE",
//                    "WED",
//                    "THU",
//                    "FRI"
//                ],
//                "start_hour": 3,
//                "end_hour": 23
//            },
//            "protocol_id": "protocol-123456789012",
//            "user_id": "user2@email.com",
//            "domain_id": "domain-123456789012",
//            "created_at": "2022-01-01T06:45:57.260Z"
//        }
//    ],
//    "total_count": 2
//}
message UserChannelsInfo {
    // List of queried user channels.
    repeated UserChannelInfo results = 1;
    // Total counts of queried user channels.
    int32 total_count = 2;
}

message UserChannelStatQuery {
    // Statistics Query format provided by SpaceONE. Please check the link for more information.
    spaceone.api.core.v1.StatisticsQuery query = 1;
}