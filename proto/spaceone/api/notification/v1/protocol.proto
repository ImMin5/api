// A Protocol defines the method to use when dispatching Notifications via a channel.
syntax = "proto3";

package spaceone.api.notification.v1;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/notification/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";


service Protocol {
    // Creates a new Protocol. When creating a protocol, you must specify the plugins provided from the repository, and you must also set the credentials to be set in the plugin if necessary.
    rpc create (CreateProtocolRequest) returns (ProtocolInfo) {
        option (google.api.http) = {
            post: "/notification/v1/protocol/create"
            body: "*"
        };
    }
    
    // Updates a specific Protocol. The method `update` can update the name and tags only. If you want to update the plugin version or options, you can use `update_plugin` method.
    rpc update (UpdateProtocolRequest) returns (ProtocolInfo) {
        option (google.api.http) = {
            post: "/notification/v1/protocol/update"
            body: "*"
        };
    }
    
    // Updates a plugin for a Protocol. It is usually used when redeploying a plugin to a new version.
    rpc update_plugin (UpdateProtocolPluginRequest) returns (ProtocolInfo) {
        option (google.api.http) = {
            post: "/notification/v1/protocol/update-plugin"
            body: "*"
        };
    }
    
    // Enables a specific Protocol. If the Protocol is enabled, the Protocol can be used and the Notification can be dispatched.
    rpc enable (ProtocolRequest) returns (ProtocolInfo) {
        option (google.api.http) = {
            post: "/notification/v1/protocol/enable"
            body: "*"
        };
    }
    
    // Disables a specific Protocol. If a Protocol is disabled, the Notification will not be dispatched, even if it is created.
    rpc disable (ProtocolRequest) returns (ProtocolInfo) {
        option (google.api.http) = {
            post: "/notification/v1/protocol/disable"
            body: "*"
        };
    }
    
    // Deletes a specific Protocol. If there exists a channel using the Protocol, it cannot be deleted.
    rpc delete (ProtocolRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/notification/v1/protocol/delete"
            body: "*"
        };
    }
    
    // Gets a specific Protocol. Prints detailed information about the Protocol.
    rpc get (GetProtocolRequest) returns (ProtocolInfo) {
        option (google.api.http) = {
            post: "/notification/v1/protocol/get"
            body: "*"
        };
    }
    
    // Gets a list of Protocols. You can use a query to get a filtered list of Protocols.
    rpc list (ProtocolQuery) returns (ProtocolsInfo) {
        option (google.api.http) = {
            post: "/notification/v1/protocol/list"
            body: "*"
        };
    }
    
    rpc stat (ProtocolStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            post: "/notification/v1/protocol/stat"
            body: "*"
        };
    }
}

message PluginRequest{
    enum UpgradeMode {
        NONE = 0;
        AUTO = 1;
        MANUAL = 2;
    }
    
    // The ID of plugin.
    string plugin_id = 1;
    // The version of plugin.
    string version = 2;
    // The Options that contains information about using plugin.
    // +optional
    google.protobuf.Struct options = 3;
    // The data for using plugin if necessary. This data is encrypted and stored in the Secret service.
    // +optional
    google.protobuf.Struct secret_data = 4;
    // The name of schema.
    // When the secret_data is stored in the Secret service, it can be set with schema if the schema is existed.
    // The schema is provided through the Repository service.
    // +optional
    string schema = 5;
    // Auto upgrade feature for plugin.
    // If the upgrade mode is AUTO, check the latest plugin version when running the plugin, and if a new version is existed, replace the plugin and then run it.
    // +optional
    UpgradeMode upgrade_mode = 6;
}

message PluginInfo{
    enum UpgradeMode {
        NONE = 0;
        AUTO = 1;
        MANUAL = 2;
    }

    // The ID of plugin set in the Protocol.
    string plugin_id = 1;
    // The version of plugin.
    string version = 2;
    // The Options that contains information about using plugin.
    google.protobuf.Struct options = 3;
    // The ID of the Secret containing encrypted data to be used in the plugin.
    // +optional
    string secret_id = 4;
    // The metadata of plugin. It includes schema for the data that must be set for the Channel when creating the Channel using a Protocol.
    // The schema follows the JSON Schema format.
    google.protobuf.Struct metadata = 6;
    // Auto upgrade for plugin.
    // If the upgrade_mode is AUTO, check the latest plugin version when running the plugin, and if a new version is existed, replace the plugin and then run it.
    UpgradeMode upgrade_mode = 7;
}

//{
//    "name": "Email",
//    "plugin_info": {
//        "plugin_id": "plugin-email-noti-protocol",
//        "version": "1.0.1",
//        "options": {},
//        "secret_id": "secret-123546789012",
//        "metadata": {
//            "data": {
//                "schema": {
//                    "properties": {
//                        "email": {
//                            "pattern": "^[\\W]*([\\w+\\-.%]+@[\\w\\-.]+\\.[A-Za-z]{2,4}[\\W]*,{1}[\\W]*)*([\\w+\\-.%]+@[\\w\\-.]+\\.[A-Za-z]{2,4})[\\W]*$",
//                            "examples": [
//                                "user1@test.com, user2@test.com"
//                            ],
//                            "minLength": 10.0,
//                            "description": "Email address to receive notifications",
//                            "type": "string",
//                            "title": "Email Address"
//                        }
//                    },
//                    "required": [
//                        "email"
//                    ],
//                    "type": "object"
//                }
//            },
//            "data_type": "PLAIN_TEXT"
//        },
//        "upgrade_mode": "AUTO"
//    },
//    "tags": {}
//}
message CreateProtocolRequest {
    // The name of Protocol. It can have a maximum of 255 characters.
    string name = 1;
    // Describe a Plugin information for protocol that include was used plugin, specific version, schema etc.
    PluginRequest plugin_info = 2;
    // The tags for protocol.
    // +optional
    google.protobuf.Struct tags = 3;
}

//{
//    "protocol_id": "protocol-123456789012",
//    "name": "Email-test",
//    "tags": {
//        "type": "test"
//    }
//}
message UpdateProtocolRequest {
    // The ID of Protocol.
    string protocol_id = 1;
    // The Name of Protocol. It can have a maximum of 255 characters.
    // +optional
    string name = 2;
    // The tags for protocol. When updating, existing tag information is deleted all and will be updated with new.
    // +optional
    google.protobuf.Struct tags = 3;
}

//{
//    "protocol_id": "protocol-123456789012",
//    "version": "1.0.2",
//    "options": {}
//}
message UpdateProtocolPluginRequest {
    // The ID of Protocol.
    string protocol_id = 1;
    // The version of plugin you want to update. Version means the tags of plugin container image in repository that specific market place.
    // +optional
    string version = 2;
    // The Options that contains information about using plugin.
    // +optional
    google.protobuf.Struct options = 3;
    // The ID of domain to which the Protocol belongs.
    string domain_id = 11;
}

//{
//    "protocol_id": "protocol-123456789012"
//}
message ProtocolRequest {
    // The ID of Protocol.
    string protocol_id = 1;
}

//{
//    "protocol_id": "protocol-123456789012"
//}
message GetProtocolRequest {
    // The ID of Protocol.
    string protocol_id = 1;
}

//{
//    "query": {}
//}
message ProtocolQuery {
    enum ProtocolState {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }

    enum ProtocolType {
        PROTOCOL_TYPE_NONE = 0;
        INTERNAL = 1;
        EXTERNAL = 2;
    }

    // Query format provided by SpaceONE. Please check the link for more information.
    // +optional
    spaceone.api.core.v1.Query query = 1;
    // The ID of Protocol.
    // +optional
    string protocol_id = 2;
    // The name of Protocol.
    // +optional
    string name = 3;
    // The state of Protocol. ENABLED or DISABLED only.
    // +optional
    ProtocolState state = 4;
    // The type of Protocol. INTERNAL or EXTERNAL only.
    // +optional
    ProtocolType protocol_type = 5;
}

//{
//    "protocol_id": "protocol-123546789012",
//    "name": "Email",
//    "state": "ENABLED",
//    "protocol_type": "EXTERNAL",
//    "capability": {
//        "supported_schema": [
//            "email_smtp"
//        ]
//    },
//    "plugin_info": {
//        "plugin_id": "plugin-email-noti-protocol",
//        "version": "1.0.1",
//        "options": {},
//        "secret_id": "secret-123546789012",
//        "metadata": {
//            "data": {
//                "schema": {
//                    "properties": {
//                        "email": {
//                            "pattern": "^[\\W]*([\\w+\\-.%]+@[\\w\\-.]+\\.[A-Za-z]{2,4}[\\W]*,{1}[\\W]*)*([\\w+\\-.%]+@[\\w\\-.]+\\.[A-Za-z]{2,4})[\\W]*$",
//                            "examples": [
//                                "user1@test.com, user2@test.com"
//                            ],
//                            "minLength": 10.0,
//                            "description": "Email address to receive notifications",
//                            "type": "string",
//                            "title": "Email Address"
//                        }
//                    },
//                    "required": [
//                        "email"
//                    ],
//                    "type": "object"
//                }
//            },
//            "data_type": "PLAIN_TEXT"
//        },
//        "upgrade_mode": "AUTO"
//    },
//    "tags": {},
//    "domain_id": "domain-123546789012",
//    "created_at": "2022-01-01T07:55:57.043Z"
//}
message ProtocolInfo {
    enum ProtocolState {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }

    enum ProtocolType {
        PROTOCOL_TYPE_NONE = 0;
        INTERNAL = 1;
        EXTERNAL = 2;
    }

    // The ID of Protocol.
    string protocol_id = 1;
    // The name of Protocol.
    string name = 2;
    // The state of Protocol.
    // ENABLED or DISABLED only.
    ProtocolState state = 3;
    // desc : The type of Protocol.
    // INTERNAL or EXTERNAL only.
    ProtocolType protocol_type = 4;
    // desc : Resource type for Protocol. Currently only identity.Project or identity.User can be set.
    string resource_type = 5;
    // desc : The capability information for the Protocol. It included supported schema for the Protocol.
    google.protobuf.Struct capability = 6;
    // the plugin information set in Protocol.
    PluginInfo plugin_info = 7;
    // The tags for protocol.
    google.protobuf.Struct tags = 8;
    // The ID of domain to which the Protocol belongs.
    string domain_id = 11;
    // Protocol creation time.
    string created_at = 21;
}

//{
//       "results":[
//          {
//             "protocol_id":"protocol-123456789012",
//             "name":"Email",
//             "state":"ENABLED",
//             "protocol_type":"EXTERNAL",
//             "capability":{
//                "supported_schema":[
//                   "email_smtp"
//                ]
//             },
//             "plugin_info":{
//                "plugin_id":"plugin-email-noti-protocol",
//                "version":"1.0.1",
//                "options":{
//
//                },
//                "secret_id":"secret-123456789012",
//                "metadata":{
//                   "data_type":"PLAIN_TEXT",
//                   "data":{
//                      "schema":{
//                         "properties":{
//                            "email":{
//                               "pattern":"^[\\W]*([\\w+\\-.%]+@[\\w\\-.]+\\.[A-Za-z]{2,4}[\\W]*,{1}[\\W]*)*([\\w+\\-.%]+@[\\w\\-.]+\\.[A-Za-z]{2,4})[\\W]*$",
//                               "examples":[
//                                  "user1@test.com, user2@test.com"
//                               ],
//                               "minLength":10.0,
//                               "description":"Email address to receive notifications",
//                               "type":"string",
//                               "title":"Email Address"
//                            }
//                         },
//                         "required":[
//                            "email"
//                         ],
//                         "type":"object"
//                      }
//                   }
//                },
//                "upgrade_mode":"AUTO"
//             },
//             "tags":{
//
//             },
//             "domain_id":"domain-123456789012",
//             "created_at":"2022-01-01T07:55:57.043Z"
//          }
//       ],
//       "total_count":1
//}
message ProtocolsInfo {
    // List of queried protocols.
    repeated ProtocolInfo results = 1;
    // Total counts of queried Protocols.
    int32 total_count = 2;
}

message ProtocolStatQuery {
    // Statistics Query format provided by SpaceONE. Please check the link for more information.
    spaceone.api.core.v1.StatisticsQuery query = 1;
}