syntax = "proto3";

package spaceone.api.alert_manager.v1;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/alert-manager/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v2/query.proto";

service EventRule {
    rpc create (EventRuleCreateRequest) returns (EventRuleInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/event-rule/create"
            body: "*"
        };
    }
    rpc change_order (EventRuleChangeOrderRequest) returns (EventRuleInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/event-rule/change-order"
            body: "*"
        };
    }
    rpc update (EventRuleUpdateRequest) returns (EventRuleInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/event-rule/update"
            body: "*"
        };
    }
    rpc delete (EventRuleRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/alert-manager/v1/event-rule/delete"
            body: "*"
        };
    }
    rpc get (EventRuleRequest) returns (EventRuleInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/event-rule/get"
            body: "*"
        };
    }
    rpc list (EventRuleSearchQuery) returns (EventRulesInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/event-rule/list"
            body: "*"
        };
    }
    rpc stat (EventRuleStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            post: "/alert-manager/v1/event-rule/stat"
            body: "*"
        };
    }
}

enum ConditionsPolicy {
    CONDITIONS_POLICY_NONE = 0;
    ALL = 1;
    ANY = 2;
    ALWAYS = 3;
}

message EventRuleOptions {
    bool stop_processing = 1;
}

message Condition {
    string key = 1;
    google.protobuf.Value value = 2;
    string operator = 3;
}

//message Actions {
//    string change_service = 1;
//    google.protobuf.Struct match_asset = 2;
//    string change_urgency = 3;
//    string change_escalation_policy = 4;
//    google.protobuf.Struct add_additional_info = 5;
//    bool no_notification = 6;
//}

enum EventRuleScope {
    EVENT_RULE_SCOPE_NONE = 0;
    GLOBAL = 1;
    WEBHOOK = 2;
}

message EventRuleCreateRequest {
    // +optional
    string name = 1;
    EventRuleScope scope = 2;
    // +optional
    repeated Condition conditions = 3;
    ConditionsPolicy conditions_policy = 4;
    google.protobuf.Struct actions = 5;
    // +optional
    EventRuleOptions options = 6;

    // +optional
    google.protobuf.Struct tags = 11;

    string service_id = 21;
    // +optional
    string webhook_id = 22;
}

message EventRuleChangeOrderRequest {
    string event_rule_id = 1;
    int32 order = 2;
}

message EventRuleUpdateRequest {
    string event_rule_id = 1;
    // +optional
    string name = 2;
    // +optional
    repeated Condition conditions = 3;
    // +optional
    ConditionsPolicy conditions_policy = 4;
    // +optional
    google.protobuf.Struct actions = 5;
    // +optional
    EventRuleOptions options = 6;

    // +optional
    google.protobuf.Struct tags = 11;
}

message EventRuleRequest {
    string event_rule_id = 1;
}

message EventRuleSearchQuery {
    // +optional
    spaceone.api.core.v2.Query query = 1;
    // +optional
    string event_rule_id = 2;
    // +optional
    string name = 3;
    // +optional
    EventRuleScope scope = 4;

    // +optional
    string workspace_id = 21;
    // +optional
    string service_id = 22;
    // +optional
    string webhook_id = 23;
}

message EventRuleStatQuery {
    spaceone.api.core.v2.StatisticsQuery query = 1;
}

message EventRuleInfo {
    string event_rule_id = 1;
    string name = 2;
    EventRuleScope scope = 3;
    int32 order = 4;
    repeated Condition conditions = 5;
    ConditionsPolicy conditions_policy = 6;
    google.protobuf.Struct actions = 7;
    EventRuleOptions options = 8;

    google.protobuf.Struct tags = 11;

    string domain_id = 21;
    string workspace_id = 22;
    string service_id = 23;
    string webhook_id = 24;

    string created_at = 31;
    string updated_at = 32;
}

message EventRulesInfo {
    repeated EventRuleInfo results = 1;
    int32 total_count = 2;
}