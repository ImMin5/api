syntax = "proto3";

package spaceone.api.alert_manager.v1;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/alert-manager/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v2/query.proto";

service EventRule {
    rpc create (EventRuleCreateRequest) returns (EventRuleInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/comment/create"
            body: "*"
        };
    }
    rpc change_order (EventRuleChangeMemberRequest) returns (EventRuleInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/comment/update"
            body: "*"
        };
    }
    rpc update (EventRuleUpdateRequest) returns (EventRuleInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/comment/update"
            body: "*"
        };
    }
    rpc delete (EventRuleRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/alert-manager/v1/comment/delete"
            body: "*"
        };
    }
    rpc get (EventRuleRequest) returns (EventRuleInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/comment/get"
            body: "*"
        };
    }
    rpc list (EventRuleSearchQuery) returns (EventRulesInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/comment/list"
            body: "*"
        };
    }
    rpc stat (EventRuleStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            post: "/alert_manager/v1/comment/stat"
            body: "*"
        };
    }
}

enum Options {
    NONE = 0;
    True = 1;
    False = 2;
}
enum ConditionsPolicy {
    CONDITION_POLICY_NONE = 0;
    ALL = 1;
    ANY = 2;
    ALWAYS = 3;
}

//////////
//Receive
//////////
message EventRuleCreateRequest {
    // +optional
    string name = 1;
    repeated google.protobuf.Struct conditions = 2;
    ConditionsPolicy conditions_policy = 3;
    google.protobuf.Struct actions = 4;
    // +optional
    Options options = 5;
    // +optional
    google.protobuf.Struct tags = 6;
    string service_id = 7;
}

message EventRuleChangeMemberRequest {
    string event_rule_id = 1;
    int32 order = 2;
}

message EventRuleUpdateRequest {
    string event_rule_id = 1;
    // +optional
    string name = 2;
    // +optional
    repeated google.protobuf.Struct conditions = 3;
    // +optional
    ConditionsPolicy conditions_policy = 4;
    // +optional
    google.protobuf.Struct actions = 5;
    // +optional
    Options options = 6;
    // +optional
    google.protobuf.Struct tags = 7;
}

message EventRuleRequest {
    string event_rule_id = 1;
}

message EventRuleSearchQuery {
    // +optional
    spaceone.api.core.v2.Query query = 1;
    // +optional
    string event_rule_id = 2;
    // +optional
    string name = 3;
    // +optional
    string resource_group = 4;
    // +optional
    string workspace_id = 5;
    // +optional
    string project_id = 6;
}

message EventRuleStatQuery {
    spaceone.api.core.v2.StatisticsQuery query = 1;
}


//////////
//Returns
//////////

message EventRuleInfo {
    string event_rule_id = 1;
    string name = 2;
    int32 order = 3;
    repeated google.protobuf.Struct conditions = 4;
    ConditionsPolicy conditions_policy = 5;
    google.protobuf.Struct actions = 6;
    Options options = 7;
    google.protobuf.Struct tags = 8;
    string service_id = 10;
    string workspace_id = 11;
    string domain_id = 12;
    string created_at = 13;
}

message EventRulesInfo {
    repeated EventRuleInfo results = 1;
    int32 total_count = 2;
}