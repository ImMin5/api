syntax = "proto3";

package spaceone.api.alert_manager.v1;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/alert-manager/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v2/query.proto";
import "spaceone/api/alert_manager/v1/service_channel.proto";

service UserChannel {
    rpc create (UserChannelCreateRequest) returns (UserChannelInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/user-channel/create"
            body: "*"
        };
    }
    rpc update (UserChannelUpdateRequest) returns (UserChannelInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/user-channel/update"
            body: "*"
        };
    }
    rpc enable (UserChannelRequest) returns (UserChannelInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/user-channel/enable"
            body: "*"
        };
    }
    rpc disable (UserChannelRequest) returns (UserChannelInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/user-channel/disable"
            body: "*"
        };
    }
    rpc delete (UserChannelRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/alert-manager/v1/user-channel/delete"
            body: "*"
        };
    }
    rpc get (UserChannelRequest) returns (UserChannelInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/user-channel/get"
            body: "*"
        };
    }
    rpc list (UserChannelSearchQuery) returns (UserChannelsInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/user-channel/list"
            body: "*"
        };
    }
    rpc stat (UserChannelStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            post: "/alert-manager/v1/user-channel/stat"
            body: "*"
        };
    }
}

message UserChannelCreateRequest {
    string protocol_id = 1;
    string name = 2;
    // +optional
    spaceone.api.alert_manager.v1.ChannelSchedule schedule = 3;

    google.protobuf.Struct data = 11;
    // +optional
    google.protobuf.Struct tags = 12;
}

message UserChannelUpdateRequest {
    string channel_id = 1;
    // +optional
    string name = 2;
    // +optional
    spaceone.api.alert_manager.v1.ChannelSchedule schedule = 3;

    // +optional
    google.protobuf.Struct data = 11;
    // +optional
    google.protobuf.Struct tags = 12;
}

message UserChannelRequest {
    string channel_id = 1;
}

message UserChannelSearchQuery {
    enum UserChannelState {
        CHANNEL_STATE_NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }

    // +optional
    spaceone.api.core.v2.Query query = 1;
    // +optional
    string channel_id = 2;
    // +optional
    string name = 3;
    // +optional
    UserChannelState state = 4;

    // +optional
    string protocol_id = 21;
    // +optional
    string plugin_id = 22;
}

message UserChannelStatQuery {
    spaceone.api.core.v2.StatisticsQuery query = 1;
}

message UserChannelInfo {
    enum UserChannelState {
        CHANNEL_STATE_NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }

    string channel_id = 1;
    string name = 2;
    UserChannelState state = 3;
    spaceone.api.alert_manager.v1.ChannelSchedule schedule = 4;

    google.protobuf.Struct data = 11;
    google.protobuf.Struct tags = 12;

    string domain_id = 21;
    string protocol_id = 22;
    string user_id = 23;
    string user_secret_id = 24;
    string plugin_id = 25;

    string created_at = 31;
}

message UserChannelsInfo {
    repeated UserChannelInfo results = 1;
    int32 total_count = 2;
}