syntax = "proto3";

package spaceone.api.alert_manager.v1;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/alert-manager/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v2/query.proto";

service EscalationPolicy {
    rpc create (EscalationPolicyCreateRequest) returns (EscalationPolicyInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/escalation-policy/create"
            body: "*"
        };
    }
    rpc update (EscalationPolicyUpdateRequest) returns (EscalationPolicyInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/escalation-policy/update"
            body: "*"
        };
    }
    rpc delete (EscalationPolicyRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/alert-manager/v1/escalation-policy/delete"
            body: "*"
        };
    }
    rpc get (EscalationPolicyRequest) returns (EscalationPolicyInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/escalation-policy/get"
            body: "*"
        };
    }
    rpc list (EscalationPolicySearchQuery) returns (EscalationPoliciesInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/escalation-policy/list"
            body: "*"
        };
    }
    rpc stat (EscalationPolicyStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            post: "/alert-manager/v1/escalation-policy/stat"
            body: "*"
        };
    }
}

enum FinishCondition {
    FINISH_CONDITION_NONE = 0;
    ACKNOWLEDGED = 1;
    RESOLVED = 2;
}

message EscalationRule {
    repeated string channels = 1;
    int32 escalate_minutes = 2;
}

message Repeat {
    enum RepeatState {
        REPEAT_STATE_NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }

     RepeatState state = 1;
     int32 count = 2;
}

message EscalationPolicyCreateRequest {
    string name = 1;
    repeated EscalationRule rules = 2;
    // +optional
    Repeat repeat = 3;
    // +optional
    FinishCondition finish_condition = 4;

    // +optional
    google.protobuf.Struct tags = 11;

    string service_id = 21;
}

message EscalationPolicyUpdateRequest {
    string escalation_policy_id = 1;
    // +optional
    string name = 2;
    // +optional
    repeated EscalationRule rules = 3;
    // +optional
    FinishCondition finish_condition = 4;

    // +optional
    google.protobuf.Struct tags = 11;
}

message EscalationPolicyRequest {
    string escalation_policy_id = 1;
}

message EscalationPolicySearchQuery {
    // +optional
    spaceone.api.core.v2.Query query = 1;
    // +optional
    string escalation_policy_id = 2;
    // +optional
    string name = 3;
    // +optional
    FinishCondition finish_condition = 4;

    // +optional
    string service_id = 21;
}

message EscalationPolicyStatQuery {
    spaceone.api.core.v2.StatisticsQuery query = 1;
}

message EscalationPolicyInfo {
    string escalation_policy_id = 1;
    string name = 2;
    repeated EscalationRule rules = 3;
    Repeat repeat = 4;
    FinishCondition finish_condition = 5;

    google.protobuf.Struct tags = 11;

    string domain_id = 21;
    string workspace_id = 22;
    string service_id = 23;

    string created_at = 31;
    string updated_at = 32;
}

message EscalationPoliciesInfo {
    repeated EscalationPolicyInfo results = 1;
    int32 total_count = 2;
}