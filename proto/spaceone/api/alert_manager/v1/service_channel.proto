syntax = "proto3";

package spaceone.api.alert_manager.v1;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/alert-manager/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v2/query.proto";

service ServiceChannel {
    rpc create (ServiceChannelCreateRequest) returns (ServiceChannelInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/service-channel/create"
            body: "*"
        };
    }
    rpc create_forward_channel (ServiceChannelCreateForwardChannelRequest) returns (ServiceChannelInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/service-channel/create-forward-channel"
            body: "*"
        };
    }
    rpc update (ServiceChannelUpdateRequest) returns (ServiceChannelInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/service-channel/update"
            body: "*"
        };
    }
    rpc enable (ServiceChannelRequest) returns (ServiceChannelInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/service-channel/enable"
            body: "*"
        };
    }
    rpc disable (ServiceChannelRequest) returns (ServiceChannelInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/service-channel/disable"
            body: "*"
        };
    }
    rpc delete (ServiceChannelRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/alert-manager/v1/service-channel/delete"
            body: "*"
        };
    }
    rpc get (ServiceChannelRequest) returns (ServiceChannelInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/service-channel/get"
            body: "*"
        };
    }
    rpc list (ServiceChannelSearchQuery) returns (ServiceChannelsInfo) {
        option (google.api.http) = {
            post: "/alert-manager/v1/service-channel/list"
            body: "*"
        };
    }
    rpc stat (ServiceChannelStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            post: "/alert-manager/v1/service-channel/stat"
            body: "*"
        };
    }
}

message ChannelScheduleInfo {
    bool is_scheduled = 1;
    int32 start = 2;
    int32 end = 3;
}

message ChannelSchedule {
    enum ChannelScheduleType {
        CHANNEL_SCHEDULE_TYPE_NONE = 0;
        ALL_DAY = 1;
        WEEK_DAY = 2;
        WEEKEND = 3;
        CUSTOM = 4;
    }

    ChannelScheduleType SCHEDULE_TYPE = 1;
    ChannelScheduleInfo SUN = 8;
    ChannelScheduleInfo MON = 2;
    ChannelScheduleInfo TUE = 3;
    ChannelScheduleInfo WED = 4;
    ChannelScheduleInfo THU = 5;
    ChannelScheduleInfo FRI = 6;
    ChannelScheduleInfo SAT = 7;
}

message ServiceChannelCreateRequest {
    string protocol_id = 1;
    string name = 2;
    // +optional
    ChannelSchedule schedule = 3;
    
    google.protobuf.Struct data = 11;
    // +optional
    google.protobuf.Struct tags = 12;

    string service_id = 21;
}

message ServiceChannelCreateForwardChannelRequest {
    string name = 1;
    ChannelSchedule schedule = 2;

    google.protobuf.Struct data = 11;
    google.protobuf.Struct tags = 12;

    string service_id = 21;
}

message ServiceChannelUpdateRequest {
    string channel_id = 1;
    // +optional
    string name = 2;
    // +optional
    ChannelSchedule schedule = 3;

    // +optional
    google.protobuf.Struct data = 11;
    // +optional
    google.protobuf.Struct tags = 12;
}

message ServiceChannelRequest {
    string channel_id = 1;
}

message ServiceChannelSearchQuery {
    enum ServiceChannelType {
        CHANNEL_TYPE_NONE = 0;
        DIRECT = 1;
        FORWARD = 2;
    }

    enum ChannelState {
        CHANNEL_STATE_NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }

    // +optional
    spaceone.api.core.v2.Query query = 1;
    // +optional
    string channel_id = 2;
    // +optional
    string name = 3;
    // +optional
    ChannelState state = 4;
    // +optional
    ServiceChannelType channel_type = 5;
    
    // +optional
    string workspace_id = 11;
    // +optional
    string service_id = 12;
    // +optional
    string protocol_id = 13;
}

message ServiceChannelStatQuery {
    spaceone.api.core.v2.StatisticsQuery query = 1;
}

message ServiceChannelInfo {
    enum ServiceChannelType {
        CHANNEL_TYPE_NONE = 0;
        DIRECT = 1;
        FORWARD = 2;
    }

    enum ChannelState {
        CHANNEL_STATE_NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }

    string channel_id = 1;
    string name = 2;
    ChannelState state = 3;
    ServiceChannelType channel_type = 4;
    ChannelSchedule schedule = 5;

    google.protobuf.Struct data = 11;
    google.protobuf.Struct tags = 12;

    string domain_id = 21;
    string workspace_id = 22;
    string service_id = 23;
    string protocol_id = 24;
    string secret_id = 25;

    string created_at = 31;
}

message ServiceChannelsInfo {
    repeated ServiceChannelInfo results = 1;
    int32 total_count = 2;
}